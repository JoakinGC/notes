<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[FEMPA]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib\media\favicon.png</url><title>FEMPA</title><link></link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Sun, 02 Mar 2025 11:40:51 GMT</lastBuildDate><atom:link href="lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Sun, 02 Mar 2025 11:39:55 GMT</pubDate><ttl>60</ttl><dc:creator></dc:creator><item><title><![CDATA[1 Casos prácticos (elegir uno)]]></title><description><![CDATA[ 
 <br>Ejemplos de proyectos que incluirán elementos de persistencia, servicios, controladores, relaciones entre entidades, APIs, e interfaces web. <br>
<br>
Sistema de Reservas para un Hotel (ejemplo, no elegir): Gestiona reservas de habitaciones, clientes y servicios del hotel. Las habitaciones pueden tener múltiples reservas (OneToMany) y los clientes pueden tener múltiples reservas (OneToMany).

<br>
Plataforma de Cursos Online: Administra cursos, estudiantes y profesores. Los cursos pueden tener varios estudiantes (ManyToMany) y un profesor asignado (ManyToOne).

<br>
Tienda Online de Productos Electrónicos: Maneja productos, categorías y pedidos. Los productos pueden pertenecer a múltiples categorías (ManyToMany) y tener varios pedidos (OneToMany).

<br>
Sistema de Biblioteca: Controla libros, préstamos y usuarios. Los libros pueden estar en varios préstamos (OneToMany) y cada usuario puede tener múltiples préstamos (OneToMany).

<br>
Aplicación de Gestión de Proyectos: Administra proyectos, tareas y empleados. Los proyectos pueden tener varias tareas (OneToMany) y los empleados pueden trabajar en múltiples proyectos (ManyToMany).

<br>
Red Social para Mascotas: Permite a los usuarios crear perfiles para sus mascotas, seguir a otras mascotas y compartir fotos. Las mascotas pueden seguir a muchas otras (ManyToMany) y tener varias fotos (OneToMany).

<br>
Sistema de Gestión de Eventos: Organiza eventos, inscripciones y participantes. Los eventos pueden tener varios participantes (ManyToMany) y cada usuario puede inscribirse en múltiples eventos (OneToMany).

<br>
Plataforma de Gestión de Restaurantes: Gestiona menús, pedidos y clientes. Los menús pueden tener varios platos (OneToMany) y los clientes pueden realizar múltiples pedidos (OneToMany).

<br>
Sistema de Gestión Hospitalaria: Administra pacientes, citas médicas y doctores. Los pacientes pueden tener múltiples citas (OneToMany) y los doctores pueden atender a muchos pacientes (OneToMany).

<br>
Aplicación de Reseñas de Películas: Permite a los usuarios calificar películas, escribir reseñas y seguir a otros críticos. Las películas pueden tener múltiples reseñas (OneToMany) y los usuarios pueden seguir a varios críticos (ManyToMany).

<br>Estos proyectos abarcan un rango variado de dominios y presentan distintas complejidades en cuanto a relaciones entre entidades. Una vez elijas el proyecto que más te interese, hay que planificar su estructura y a abordar los aspectos técnicos específicos.]]></description><link>acceso-a-datos\acd-main\práctica-segunda-evaluación\1-casos-prácticos-(elegir-uno).html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Práctica segunda evaluación/1 Casos prácticos (elegir uno).md</guid><pubDate>Wed, 17 Jan 2024 14:57:56 GMT</pubDate></item><item><title><![CDATA[2 Aspectos técnicos]]></title><description><![CDATA[ 
 <br>El desarrollo de una aplicación de grado profesional requiere un enfoque integral que cubra varios aspectos clave para garantizar su funcionalidad, seguridad y escalabilidad. Aspectos importantes a considerar:<br>
<br>
Análisis y Planificación de Requerimientos: Define claramente los requisitos funcionales y no funcionales. Entiende las necesidades del usuario final y cómo interactuarán con la aplicación.

<br>
Diseño de la Arquitectura: Opta por una arquitectura robusta y escalable. Considera patrones como MVC (Modelo-Vista-Controlador) y capas separadas para la lógica de negocio, la interfaz de usuario y la base de datos.

<br>
Modelo de Datos Eficiente: Diseña un esquema de base de datos que soporte eficientemente las operaciones del hotel, incluyendo reservas, habitaciones, clientes, servicios adicionales, etc. Considera las relaciones entre entidades y la integridad de los datos.

<br>
Seguridad:

<br>Autenticación y Autorización: Implementa un sistema robusto para gestionar usuarios, roles y permisos. Considera el uso de OAuth, JWT o sesiones seguras.
<br>Protección de Datos Sensibles: Asegura los datos de los clientes mediante encriptación y prácticas seguras de manejo de datos.
<br>Prevención de Ataques Comunes: Protege tu aplicación contra inyecciones SQL, Cross-Site Scripting (XSS), Cross-Site Request Forgery (CSRF), etc.


<br>
Interfaz de Usuario y Experiencia del Usuario (UI/UX): Diseña una interfaz amigable y accesible, centrada en la experiencia del usuario. Asegúrate de que sea responsiva y accesible desde distintos dispositivos.

<br>
APIs y Integraciones: Considera la integración con sistemas externos, como sistemas de pago, gestión de opiniones, servicios de correo electrónico, etc.

<br>
Testing y Aseguramiento de la Calidad: Implementa pruebas unitarias, de integración, y pruebas de extremo a extremo para garantizar la calidad del software.

<br>
Logging y Monitorización: Implementa un sistema de logging para auditar y rastrear las actividades dentro de la aplicación. Usa herramientas para monitorizar el rendimiento y la salud de la aplicación.

<br>
Manejo de Errores y Excepciones: Desarrolla una estrategia para manejar errores y excepciones de manera que afecten mínimamente a los usuarios finales.

<br>
Documentación: Mantén una documentación actualizada del código, la arquitectura, la API y los procedimientos operativos.

<br>
Despliegue y Mantenimiento:

<br>Estrategias de Despliegue: Utiliza integración y despliegue continuos para agilizar el lanzamiento de nuevas versiones.
<br>Escalabilidad y Rendimiento: Asegúrate de que tu aplicación pueda escalar según la demanda y mantenga un buen rendimiento bajo carga.
<br>Actualizaciones y Mantenimiento: Planifica cómo se manejarán las actualizaciones y el mantenimiento regular.


<br>
Accesibilidad y Localización: Asegúrate de que la aplicación sea accesible para personas con discapacidades y considera la localización si tu audiencia es internacional.

<br>
Aspectos Legales y Conformidad: Asegúrate de cumplir con las leyes y regulaciones relevantes, como GDPR para la protección de datos en Europa.

<br>
Gestión de Cambios y Versiones: Usa sistemas de control de versiones como Git y prácticas de gestión de cambios eficientes.

<br>Cada uno de estos aspectos contribuirá a la creación de una aplicación robusta, segura y amigable para el usuario, que cumpla con los estándares profesionales de desarrollo de software.]]></description><link>acceso-a-datos\acd-main\práctica-segunda-evaluación\2-aspectos-técnicos.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Práctica segunda evaluación/2 Aspectos técnicos.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[2.1 Análisis y Planificación de Requerimientos]]></title><description><![CDATA[ 
 <br>El Análisis y Planificación de Requerimientos es una fase crucial en el desarrollo de software que define cómo será la aplicación, qué hará y qué necesidades específicas debe satisfacer. <br><br>
<br>Identificación de Stakeholders: Identifica quiénes se verán afectados o tienen interés en el sistema (gerentes de hotel, empleados, clientes).
<br>Recopilación de Requisitos: Realiza entrevistas, encuestas, sesiones de brainstorming y observación para recopilar requisitos.
<br>Documentación de Requisitos: Redacta un documento de especificación de requisitos detallado que sirva como referencia.
<br>Priorización de Requisitos: Clasifica los requisitos en esenciales, importantes y opcionales.
<br>Creación de Prototipos: Desarrolla prototipos para visualizar la interfaz de usuario y recibir feedback temprano.
<br>Revisión y Aprobación: Presenta los requisitos a los stakeholders para su revisión y aprobación.
<br>Planificación del Alcance del Proyecto: Define el alcance del proyecto basándote en los requisitos aprobados y establece límites claros de lo que se incluirá en el sistema.
<br>Recuerda que el análisis y la planificación de requisitos no es un proceso estático; es iterativo y puede necesitar ajustes a medida que avanza el proyecto y surgen nuevos entendimientos o cambios en las necesidades del negocio.<br><br>Son descripciones detalladas de las capacidades y funciones que el sistema debe tener. En el contexto de tu sistema de reservas para un hotel, podrían incluir:<br>
<br>Gestión de Reservas: Capacidad para crear, modificar, cancelar y visualizar reservas.
<br>Manejo de Habitaciones: Funciones para agregar, eliminar, modificar y listar habitaciones disponibles.
<br>Gestión de Clientes: Registrar y mantener la información de los clientes, incluyendo historial de reservas.
<br>Servicios del Hotel: Gestionar información sobre servicios adicionales (como spa, gimnasio, restaurante).
<br>Facturación y Pagos: Procesar pagos, emitir facturas y gestionar tarifas.
<br><br>Son criterios que definen el funcionamiento del sistema. Incluyen:<br>
<br>Usabilidad: La aplicación debe ser fácil de usar, con una interfaz intuitiva y una experiencia de usuario agradable.
<br>Rendimiento: Tiempos de respuesta rápidos, incluso bajo carga (muchos usuarios simultáneos).
<br>Seguridad: Protección de datos personales y financieros, y aseguramiento de la integridad del sistema.
<br>Escalabilidad: Capacidad de manejar un aumento en la carga de trabajo sin degradar el rendimiento.
<br>Disponibilidad: Alta disponibilidad del sistema, minimizando el tiempo de inactividad.
<br>Compatibilidad: Funcionamiento en distintos dispositivos y navegadores.
]]></description><link>acceso-a-datos\acd-main\práctica-segunda-evaluación\2.1-análisis-y-planificación-de-requerimientos.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Práctica segunda evaluación/2.1 Análisis y Planificación de Requerimientos.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[2.2 Diseño de la Arquitectura]]></title><description><![CDATA[ 
 <br>El Diseño de la Arquitectura es fundamental para asegurar que tu aplicación sea robusta, escalable y fácil de mantener. <br><br>
<br>Separación de Preocupaciones: Cada componente o capa debe tener una responsabilidad clara y definida.
<br>Principios SOLID: Aplica estos principios para un diseño de software orientado a objetos eficiente y mantenible.
<br>Servicios y Microservicios: Considera la posibilidad de descomponer la aplicación en servicios más pequeños, especialmente si es una aplicación grande o si se espera un crecimiento significativo.
<br>Base de Datos y ORM: Elige una base de datos adecuada y considera el uso de un mapeador objeto-relacional (ORM) para interactuar con ella.
<br>APIs y Contratos de Servicio: Si tu aplicación interactúa con otros sistemas, define claramente las APIs y asegúrate de que los contratos de servicio sean robustos.
<br>Escalabilidad Horizontal y Vertical: Prepárate para escalar tu aplicación tanto horizontalmente (agregando más máquinas) como verticalmente (mejorando las capacidades de la máquina existente).
<br>Patrones de Diseño: Utiliza patrones de diseño apropiados para solucionar problemas comunes y mejorar la eficiencia del desarrollo.
<br><br>Dependiendo de las necesidades específicas del proyecto y del entorno en el que se desplegará, deberás elegir el conjunto de herramientas y tecnologías que mejor se adapten, como frameworks específicos para el backend, frontend, bases de datos, etc.<br>El diseño de la arquitectura es una fase que requiere visión de futuro y una comprensión profunda de los requisitos y desafíos del proyecto. Un diseño bien pensado al principio puede ahorrar muchos problemas y re-trabajos en el futuro.<br><br>Una visión general de algunas de las arquitecturas de software más comunes, destacando sus características, ventajas y posibles aplicaciones. Cada arquitectura tiene sus propios beneficios y se adapta mejor a ciertos tipos de proyectos.<br><br>En una arquitectura monolítica, todos los componentes de la aplicación (interfaz de usuario, lógica de negocio, acceso a datos) están unidos en un único código base y se despliegan juntos. Es el enfoque tradicional y más sencillo.<br>
<br>Ventajas: Simplicidad en desarrollo, despliegue y operación.
<br>Desventajas: Escalabilidad limitada, mantenimiento más difícil a medida que crece el proyecto.
<br>Uso típico: Proyectos pequeños o medianos, aplicaciones con requisitos bien definidos y estables.
<br><br>Separación de responsabilidades en diferentes capas, típicamente presentación, lógica de negocio y persistencia de datos.<br>
<br>Ventajas: Organización clara del código, mantenimiento más fácil, flexibilidad para cambiar capas de forma independiente.
<br>Desventajas: El rendimiento puede verse afectado por la sobrecarga de llamadas entre capas.
<br>Uso típico: Aplicaciones empresariales, sistemas que requieren una clara separación entre la lógica de procesamiento y la de datos.
<br><br>Divide una aplicación en un conjunto de servicios más pequeños, cada uno ejecutándose en su propio proceso y comunicándose con mecanismos ligeros, generalmente HTTP.<br>
<br>Ventajas: Alta escalabilidad, flexibilidad para usar diferentes tecnologías y frameworks, fácil despliegue y mantenimiento.
<br>Desventajas: Complejidad en la gestión, requerimientos de monitoreo y seguridad.
<br>Uso típico: Aplicaciones grandes y complejas, sistemas que necesitan escalar rápidamente, aplicaciones que requieren una alta disponibilidad.
<br><br>Enfocada en la producción, detección, consumo y reacción a eventos. Los componentes son débilmente acoplados y reaccionan a acciones o cambios de estado.<br>
<br>Ventajas: Alta escalabilidad, flexibilidad, y adaptabilidad a cambios y flujos de trabajo dinámicos.
<br>Desventajas: Puede ser complejo de entender y manejar, especialmente el flujo de eventos y el manejo de errores.
<br>Uso típico: Sistemas en tiempo real, aplicaciones IoT, aplicaciones que requieren integración con múltiples servicios.
<br><br>Consiste en descomponer la funcionalidad en servicios (generalmente web services), que pueden ser llamados y reutilizados en diferentes partes de la aplicación o incluso en diferentes aplicaciones.<br>
<br>Ventajas: Reutilización de código, flexibilidad, fácil integración entre diferentes sistemas.
<br>Desventajas: Complejidad en la gestión y en la definición de los servicios.
<br>Uso típico: Integración de sistemas empresariales, migración de sistemas monolíticos a arquitecturas más modernas.
<br><br>La lógica de negocio se ejecuta en contenedores sin estado que son efímeros y gestionados por un proveedor de la nube.<br>
<br>Ventajas: No hay necesidad de gestionar la infraestructura, escalabilidad automática, pago por uso.
<br>Desventajas: Dependencia del proveedor, limitaciones en el tiempo de ejecución y en el control del entorno.
<br>Uso típico: Aplicaciones con patrones de uso variables, microservicios, tareas en background.
<br>Cada una de estas arquitecturas tiene sus propias fortalezas y debilidades, y la elección de una u otra depende en gran medida de los requisitos específicos del proyecto, la experiencia del equipo de desarrollo y las restricciones del entorno en el que se va a operar. En muchos casos, las aplicaciones modernas pueden incluso combinar elementos de varias de estas arquitecturas para aprovechar los beneficios de cada una.<br><br>En el sistema de reservas para un hotel, un diseño de arquitectura eficaz te ayudará a manejar las complejidades del sistema de manera eficiente. Aquí exponemos explico en detalle los conceptos y enfoques clave elegidos:<br><br>Una arquitectura en capas divide la aplicación en capas lógicas, cada una con una responsabilidad específica. Las capas típicas son:<br>
<br>Presentación: Encargada de interactuar con el usuario (la Vista en MVC).
<br>Negocio: Contiene la lógica de negocio y las reglas de la aplicación (parte del Modelo en MVC).
<br>Persistencia: Gestiona el acceso y la manipulación de los datos (también parte del Modelo en MVC).
<br>Integración: Capa para integrar con sistemas externos o servicios.
<br><br>MVC es un patrón de diseño que separa la aplicación en tres componentes principales:<br>
<br>Modelo: Representa la lógica de negocio y los datos. En tu caso, serían las entidades como reservas, habitaciones, clientes, etc.
<br>Vista: Es la interfaz de usuario, donde los datos del modelo se presentan y se interactúa con el usuario.
<br>Controlador: Actúa como un intermediario entre el modelo y la vista. Controla las entradas del usuario y utiliza el modelo para realizar las acciones requeridas.
<br>Este patrón ayuda a separar las responsabilidades, facilita la prueba de componentes individuales y mejora la mantenibilidad.]]></description><link>acceso-a-datos\acd-main\práctica-segunda-evaluación\2.2-diseño-de-la-arquitectura.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Práctica segunda evaluación/2.2 Diseño de la Arquitectura.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[2.3 Modelo de datos]]></title><description><![CDATA[ 
 <br>Un Modelo de Datos Eficiente es esencial para garantizar que tu sistema maneje los datos de manera eficaz y eficiente. Un buen diseño de base de datos no solo mejora el rendimiento, sino que también asegura la integridad y la coherencia de los datos. Aquí están los aspectos clave a considerar:<br><br>El primer paso es definir un modelo entidad-relación que refleje las entidades del sistema y sus interrelaciones.<br>
<br>Entidades: Identifica las entidades principales como Cliente, Habitación, Reserva, Servicio, etc.
<br>Relaciones: Define cómo se relacionan estas entidades. Por ejemplo, un cliente puede tener múltiples reservas, una habitación puede estar incluida en varias reservas, etc.
<br>Atributos: Determina los atributos necesarios para cada entidad, como nombre, dirección, fecha de reserva, etc.
<br><br>La normalización es el proceso de estructurar un modelo de base de datos para reducir la redundancia y mejorar la integridad.<br>
<br>Objetivo: Evitar anomalías en la inserción, actualización y eliminación de datos.
<br>Normal Forms: Aplica al menos hasta la Tercera Forma Normal (3NF) para asegurar que los datos están bien estructurados.
<br><br>Define claves primarias para identificar de manera única cada fila en una tabla y claves extranjeras para establecer relaciones entre tablas.<br>
<br>Claves Primarias: Únicas para cada registro (como ID de cliente, ID de reserva).
<br>Claves Extranjeras: Establecen vínculos entre tablas (como el ID de cliente en la tabla de reservas).
<br><br>Los índices son cruciales para mejorar el rendimiento de las consultas en grandes conjuntos de datos.<br>
<br>Selección de Índices: Crea índices en columnas que se usan frecuentemente en consultas y condiciones WHERE.
<br><br>Garantiza la precisión y consistencia de los datos a través de restricciones.<br>
<br>Restricciones de Integridad: Incluyen restricciones de clave primaria, clave foránea, unicidad, y verificaciones.
<br><br>Diseña el modelo pensando en el rendimiento.<br>
<br>Diseño de Tablas: Evita tablas excesivamente anchas; considera la desnormalización en casos donde mejore significativamente el rendimiento.
<br>Consultas Optimizadas: Escribe consultas SQL eficientes; considera el uso de vistas o procedimientos almacenados para operaciones complejas.
<br><br>Prepara tu modelo de datos para crecer y adaptarse a cambios futuros.<br>
<br>Escalabilidad: Diseña para manejar un aumento en el volumen de datos y usuarios.
<br>Flexibilidad: Permite modificaciones en el esquema sin grandes trastornos.
<br><br>Implementa medidas para proteger los datos sensibles.<br>
<br>Cifrado: Considera cifrar datos sensibles, especialmente datos personales y financieros.
<br>Control de Acceso: Restringe el acceso a la base de datos a usuarios autorizados.
<br>Un modelo de datos bien diseñado es el fundamento sobre el cual se construye toda la aplicación. Debe ser lo suficientemente flexible para adaptarse a cambios futuros y lo suficientemente robusto para manejar el volumen y la complejidad de los datos de tu sistema.]]></description><link>acceso-a-datos\acd-main\práctica-segunda-evaluación\2.3-modelo-de-datos.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Práctica segunda evaluación/2.3 Modelo de datos.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[2.4 Seguridad]]></title><description><![CDATA[ 
 <br>La seguridad es un aspecto crítico en el desarrollo de aplicaciones, especialmente en sistemas como una plataforma online donde se manejan datos sensibles de los clientes. A continuación, se detalla cada uno de los puntos principales a tener en cuenta.<br><br>Son dos procesos fundamentales en la seguridad de las aplicaciones:<br>
<br>
Autenticación: Verifica la identidad del usuario. Asegúrate de que el usuario es quien dice ser.

<br>Métodos Comunes: Incluyen contraseñas, autenticación de dos factores (2FA), y autenticación basada en tokens.
<br>JWT (JSON Web Tokens): Permite a los usuarios autenticarse con un token seguro y eficiente.
<br>OAuth: Permite a los usuarios autorizar tu aplicación para actuar en su nombre en otro servicio web, sin compartir sus credenciales.


<br>
Autorización: Determina qué recursos y operaciones puede acceder y realizar un usuario autenticado.

<br>Control de Acceso Basado en Roles (RBAC): Asigna roles a los usuarios y define permisos basados en estos roles.
<br>Gestión de Permisos: Asegúrate de que los usuarios solo puedan acceder a los datos y realizar las acciones para las que tienen permiso.


<br><br>La protección de los datos personales y financieros de los usuarios es crucial:<br>
<br>
Encriptación de Datos: Usa encriptación tanto en reposo como en tránsito.

<br>En Reposo: Los datos almacenados deben estar encriptados en la base de datos.
<br>En Tránsito: Utiliza HTTPS para encriptar los datos que se transmiten entre el cliente y el servidor.


<br>
Manejo Seguro de Contraseñas: Almacena las contraseñas de forma segura utilizando algoritmos de hash fuertes como bcrypt.

<br>
Principio de Menor Privilegio: Asegúrate de que cada componente del sistema tenga solo el acceso que necesita para funcionar.

<br><br>Implementa medidas para proteger tu aplicación de vulnerabilidades comunes:<br>
<br>
Inyecciones SQL: Utiliza consultas parametrizadas o ORM para prevenir inyecciones SQL, una técnica en la que un atacante inserta o manipula declaraciones SQL a través de entradas del usuario.

<br>
Cross-Site Scripting (XSS): Evita que los atacantes inyecten scripts maliciosos en tu sitio web. Escapa y valida la entrada del usuario y utiliza Content Security Policy (CSP).

<br>
Cross-Site Request Forgery (CSRF): Utiliza tokens anti-CSRF para prevenir ataques donde un sitio malicioso puede realizar acciones en otro sitio en el que el usuario ha iniciado sesión.

<br>
Seguridad en Cabeceras HTTP: Implementa cabeceras de seguridad como X-Content-Type-Options, X-Frame-Options, y X-XSS-Protection.

<br>
Actualizaciones y Parches de Seguridad: Mantén tu sistema y sus dependencias actualizadas con los últimos parches de seguridad.

<br>La implementación de estas medidas de seguridad ayudará a proteger tanto a los usuarios como al sistema de amenazas y vulnerabilidades, manteniendo la integridad y la confianza en la aplicación.]]></description><link>acceso-a-datos\acd-main\práctica-segunda-evaluación\2.4-seguridad.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Práctica segunda evaluación/2.4 Seguridad.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[2.5 Interfaz de Usuario y Experiencia del Usuario]]></title><description><![CDATA[ 
 <br>El diseño de la Interfaz de Usuario (UI) y la Experiencia del Usuario (UX) es crucial para asegurar que tu sistema de reservas de hotel sea intuitivo, eficiente y agradable de usar. A continuación, te ofrezco pautas y consideraciones específicas para este contexto:<br><br>
<br>Análisis del Usuario: Entiende a tus usuarios (por ejemplo, huéspedes del hotel, personal de recepción, gerentes de hotel) y sus necesidades específicas.
<br>Escenarios de Uso: Identifica cómo y por qué los usuarios utilizarán el sistema. Por ejemplo, un huésped podría querer reservar una habitación fácilmente, mientras que el personal de recepción necesita gestionar rápidamente las reservas.
<br><br>
<br>Claridad y Simplicidad: Diseña una interfaz clara y sin elementos innecesarios. Por ejemplo, el proceso de reserva debe ser directo y fácil de seguir.
<br>Estética y Branding: Utiliza los colores, tipografías y estilos que se alineen con la imagen de marca del hotel.
<br>Elementos Visuales y Textuales: Usa iconos, imágenes y textos claros para guiar al usuario. Por ejemplo, iconos para diferentes tipos de habitaciones o servicios del hotel.
<br><br>
<br>Flujo de Navegación Intuitivo: Asegúrate de que el flujo de la aplicación sea lógico y fácil de seguir. Por ejemplo, desde la selección de fechas hasta la confirmación de la reserva.
<br>Feedback y Carga: Proporciona feedback claro (mensajes de éxito/error) y gestiona adecuadamente los tiempos de carga.
<br>Accesibilidad: Asegúrate de que tu aplicación sea accesible para todos los usuarios, incluyendo aquellos con discapacidades.
<br><br>
<br>Adaptabilidad: La interfaz debe adaptarse y ser funcional en dispositivos de diferentes tamaños, desde móviles hasta desktops.
<br>Pruebas en Diversos Dispositivos: Realiza pruebas en varios dispositivos para garantizar una experiencia uniforme.
<br><br>
<br>Frameworks y Librerías: Considera el uso de frameworks como React, Angular o Vue para el frontend, junto con librerías de UI como Material-UI o Bootstrap para un diseño coherente y responsivo.
<br>Prototipado y Wireframes: Usa herramientas como Sketch, Figma o Adobe XD para crear prototipos y wireframes antes de desarrollar la interfaz.
<br><br>
<br>Pruebas con Usuarios Reales: Realiza pruebas de usabilidad con usuarios reales para obtener feedback directo y realizar ajustes.
<br>Análisis automático: Realiza evaluaciones  para identificar problemas de usabilidad (mapas de calor, tests automáticos, Selenium, etc).
<br><br>
<br>Feedback y Mejoras: Continúa recogiendo feedback de los usuarios y mejora la aplicación de forma iterativa.
<br><br>Imagina una página de inicio donde los usuarios pueden seleccionar fechas, tipo de habitación y ver disponibilidad inmediatamente. El proceso de reserva debe ser sencillo, guiando al usuario paso a paso, con opciones claras y sin ambigüedades. Para el personal del hotel, el sistema podría tener un dashboard donde gestionar reservas, check-ins/check-outs y disponibilidad de habitaciones de manera eficiente y clara.<br>En resumen, un buen diseño UI/UX en tu sistema de reservas de hotel mejorará significativamente la experiencia del usuario, lo que puede traducirse en una mayor satisfacción del cliente y, en última instancia, en un impacto positivo en el negocio del hotel.]]></description><link>acceso-a-datos\acd-main\práctica-segunda-evaluación\2.5-interfaz-de-usuario-y-experiencia-del-usuario.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Práctica segunda evaluación/2.5 Interfaz de Usuario y Experiencia del Usuario.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[2.6 APIs y Integraciones]]></title><description><![CDATA[ 
 <br>La integración de APIs y sistemas externos es una parte fundamental en el desarrollo de aplicaciones modernas, especialmente en un sistema de reservas para hoteles, donde la interacción con otros sistemas puede enriquecer la funcionalidad y mejorar la experiencia del usuario. A continuación, describo varios aspectos y ejemplos relevantes para este punto:<br><br>
<br>Integración con Pasarelas de Pago: Integrar APIs de proveedores de pago como Stripe, PayPal o sistemas bancarios para procesar transacciones.
<br>Seguridad y Cumplimiento: Asegurarte de cumplir con los estándares de seguridad como PCI-DSS para el manejo de datos de tarjetas.
<br><br>
<br>Plataformas de Opiniones: Integrar con plataformas como TripAdvisor o Google Reviews para mostrar opiniones de clientes o permitir que dejen comentarios.
<br>Análisis de Sentimientos: Utilizar APIs de análisis de texto para obtener insights de los comentarios de los clientes.
<br><br>
<br>Notificaciones y Confirmaciones: Integrar servicios de correo electrónico como SendGrid o Mailchimp para enviar confirmaciones de reservas, recordatorios y comunicaciones de marketing.
<br>Personalización y Automatización: Usar plantillas personalizables y automatización para mejorar la comunicación con el cliente.
<br><br>
<br>Mapas y Localización: Integrar con Google Maps o similares para mostrar la ubicación del hotel y puntos de interés cercanos.
<br>Clima: Mostrar información meteorológica actualizada de la localidad del hotel usando APIs de clima.
<br><br>
<br>Sincronización de Datos: Integrar con un Property Management System para sincronizar datos de reservas, disponibilidad de habitaciones, check-in/check-out, etc.
<br>Flujo de Trabajo Unificado: Facilitar las operaciones diarias del hotel, integrando la gestión de reservas con tareas operativas del hotel.
<br><br>Imagina un flujo de reserva en la aplicación del hotel donde el usuario selecciona las fechas y el tipo de habitación:<br>
<br>Reserva y Pago: Una vez seleccionada la habitación, el usuario procede al pago a través de una pasarela de pago integrada como Stripe.
<br>Confirmación por Email: Después de realizar el pago, el sistema envía automáticamente un correo electrónico de confirmación usando SendGrid, con detalles de la reserva y un enlace para modificar o cancelar la reserva.
<br>Opiniones de Usuarios: En la página de detalles del hotel, se muestran las opiniones recientes de TripAdvisor, proporcionando confianza y transparencia a futuros clientes.
<br>Interacción con el PMS: La reserva se sincroniza automáticamente con el sistema de gestión hotelera, actualizando la disponibilidad de habitaciones y permitiendo al personal del hotel prepararse para la llegada del huésped.
<br>Este enfoque integrado no solo mejora la experiencia del usuario al proporcionar un proceso de reserva fluido y transparente, sino que también optimiza las operaciones internas del hotel, asegurando que todos los sistemas estén sincronizados y actualizados.]]></description><link>acceso-a-datos\acd-main\práctica-segunda-evaluación\2.6-apis-y-integraciones.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Práctica segunda evaluación/2.6 APIs y Integraciones.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[2.7  Testing y Aseguramiento de la Calidad]]></title><description><![CDATA[ 
 <br>El Testing y Aseguramiento de la Calidad son esenciales para garantizar que tu sistema de reservas de hotel sea fiable, funcione como se espera y ofrezca una buena experiencia de usuario. A continuación, te explico los diferentes tipos de pruebas y cómo podrían aplicarse en el contexto de tu proyecto:<br><br>
<br>Objetivo: Probar cada componente o clase de manera aislada para asegurarse de que funciona correctamente.
<br>Herramientas: En un entorno de Spring Boot, puedes usar JUnit y Mockito para pruebas unitarias.
<br>Ejemplo: Probar una clase que calcula el costo total de una reserva, asegurándote de que maneje correctamente diferentes tipos de habitaciones y duraciones de estadía.
<br><br>
<br>Objetivo: Probar la integración entre diferentes módulos o servicios para asegurarse de que trabajan juntos como se espera.
<br>Herramientas: Spring Boot ofrece soporte para pruebas de integración con @SpringBootTest y TestRestTemplate o MockMvc para pruebas de API.
<br>Ejemplo: Probar el proceso completo de reserva, desde la creación de una nueva reserva hasta la confirmación de que se ha guardado correctamente en la base de datos.
<br><br>
<br>Objetivo: Simular el flujo del usuario en la aplicación completa, desde la interfaz de usuario hasta la base de datos.
<br>Herramientas: Herramientas como Selenium o Cypress pueden ser usadas para automatizar pruebas E2E en aplicaciones web.
<br>Ejemplo: Automatizar un flujo donde un usuario accede a la plataforma, selecciona fechas, elige una habitación, realiza el pago y recibe la confirmación de la reserva.
<br><br>
<br>Objetivo: Asegurarse de que las APIs funcionan como se espera, tanto individualmente como en interacción con otros servicios.
<br>Herramientas: Postman o herramientas similares para pruebas manuales, y JUnit o RestAssured para pruebas automatizadas.
<br>Ejemplo: Probar endpoints de la API para verificar que devuelven los datos correctos de disponibilidad de habitaciones y aceptan reservas correctamente.
<br><br>
<br>Objetivo: Verificar que el sistema puede manejar un volumen alto de usuarios y operaciones sin degradar el rendimiento.
<br>Herramientas: JMeter o Gatling pueden ser utilizados para simular tráfico y carga.
<br>Ejemplo: Simular un alto número de usuarios haciendo reservas simultáneamente para probar la escalabilidad y el rendimiento del sistema.
<br><br>Imagina que estás desarrollando el módulo de reserva de tu aplicación:<br>
<br>Pruebas Unitarias: Pruebas para validar la lógica de cálculo de precios por noche y por tipo de habitación.
<br>Pruebas de Integración: Verificar que el módulo de reserva interactúa correctamente con la base de datos y registra las reservas correctamente.
<br>Pruebas E2E: Automatizar un flujo completo desde la selección de la habitación en la interfaz de usuario hasta la generación de la confirmación de la reserva.
<br>Testing de APIs: Probar la API de reservas, asegurando que maneja correctamente las peticiones y respuestas.
<br>Pruebas de Carga: Simular picos de demanda para asegurarse de que el sistema puede manejar temporadas altas sin problemas.
<br>La implementación de un plan de pruebas exhaustivo te ayudará a identificar y corregir problemas antes de que afecten a los usuarios finales, garantizando así una experiencia de usuario de alta calidad y la confiabilidad del sistema.]]></description><link>acceso-a-datos\acd-main\práctica-segunda-evaluación\2.7-testing-y-aseguramiento-de-la-calidad.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Práctica segunda evaluación/2.7  Testing y Aseguramiento de la Calidad.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[2.8 Logging y Monitorización]]></title><description><![CDATA[ 
 <br>El Logging y la Monitorización son cruciales para mantener la salud y el rendimiento de tu sistema, proporcionando visibilidad sobre el funcionamiento de la aplicación y facilitando la identificación y solución de problemas.<br><br>El logging implica registrar eventos y datos que ocurren dentro de la aplicación, lo que es vital para la depuración y el análisis post-incidente.<br>
<br>Niveles de Logging: Utiliza diferentes niveles de logging (como INFO, DEBUG, WARN, ERROR) para categorizar la importancia de los mensajes.
<br>Información Útil en Logs: Incluye información como timestamps, identificadores de usuario, acciones realizadas, y detalles del error.
<br>Herramientas y Librerías: Para aplicaciones Spring Boot, se utilizan comúnmente librerías como Logback o Log4j2. Spring Boot ya tiene una integración predeterminada con estas librerías.
<br>Almacenamiento y Rotación de Logs: Guarda los logs en un archivo o una base de datos y establece una política de rotación para evitar el uso excesivo de recursos.
<br><br>La monitorización se refiere a la observación continua del estado de la aplicación, incluyendo el rendimiento, la disponibilidad y el uso de recursos.<br>
<br>Metricas y KPIs: Define métricas clave de rendimiento como tiempo de respuesta, tasa de errores, carga del servidor, etc.
<br>Herramientas de Monitorización: Utiliza herramientas como Prometheus y Grafana para recopilar y visualizar métricas. Spring Boot Actuator es útil para exponer métricas de la aplicación.
<br>Alertas y Notificaciones: Configura alertas para notificarte cuando las métricas superen ciertos umbrales, indicando posibles problemas.
<br><br>Imagina que tienes un sistema de reservas en línea para un hotel. Veamos cómo podrían implementarse el logging y la monitorización:<br>
<br>
Logging:

<br>Registra cada acción de reserva con detalles como el ID del usuario, la fecha y hora de la reserva, el tipo de habitación reservada y el resultado (éxito o error).
<br>Usa niveles de logging para diferenciar entre acciones normales (INFO) y errores o problemas (ERROR).
<br>Ejemplo de mensaje de log: 2024-01-10 10:00:00 [INFO] [UserID: 1234] - Reserva realizada con éxito para la habitación Deluxe, ID de Reserva: 5678.


<br>
Monitorización:

<br>Monitorea métricas como el número de reservas realizadas por hora, el tiempo promedio de respuesta del sistema y la tasa de errores.
<br>Utiliza Spring Boot Actuator para exponer métricas de la aplicación y Prometheus para recopilarlas.
<br>Configura un dashboard en Grafana para visualizar estas métricas en tiempo real y establece alertas para ser notificado si, por ejemplo, la tasa de errores supera el 1%.


<br>Implementando un sistema efectivo de logging y monitorización, podrás asegurarte de que tu sistema de reservas sea confiable y eficiente, y estarás preparado para responder rápidamente en caso de problemas o degradación del rendimiento.]]></description><link>acceso-a-datos\acd-main\práctica-segunda-evaluación\2.8-logging-y-monitorización.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Práctica segunda evaluación/2.8 Logging y Monitorización.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[2.9 Manejo de Errores y Excepciones]]></title><description><![CDATA[ 
 <br>El Manejo de Errores y Excepciones es una parte crucial del desarrollo de software, especialmente en aplicaciones donde una experiencia de usuario fluida es esencial. Una estrategia efectiva de manejo de errores implica no solo capturar y registrar errores, sino también proporcionar feedback útil al usuario y asegurar la estabilidad del sistema.<br><br>
<br>Prevención de Errores: Anticipar y prevenir condiciones de error comunes mediante validaciones y comprobaciones de integridad.
<br>Captura y Manejo de Excepciones: Capturar excepciones de manera efectiva para prevenir fallos en el sistema y proporcionar una respuesta adecuada.
<br>Registro de Errores: Registrar los detalles de los errores para permitir un análisis posterior y la depuración.
<br>Feedback al Usuario: Informar al usuario de manera clara y no técnica cuando ocurre un error y, si es posible, sugerir acciones para resolverlo.
<br>Consistencia en el Manejo de Errores: Aplicar un enfoque coherente y centralizado para el manejo de errores en toda la aplicación.
<br><br><br>
<br>Validaciones de Entrada: Asegurarse de que las fechas de reserva sean válidas y que las habitaciones estén disponibles antes de aceptar una reserva.
<br>Manejos de Estado de Aplicación: Verificar que el estado de la aplicación sea el adecuado antes de realizar operaciones críticas.
<br><br>
<br>Manejo de Excepciones en Spring Boot:

<br>Usar @ControllerAdvice para manejar excepciones a nivel global.
<br>Ejemplo:
@ControllerAdvice
public class GlobalExceptionHandler {
    @ExceptionHandler(ReservationNotFoundException.class)
    public ResponseEntity&lt;String&gt; handleReservationNotFound(ReservationNotFoundException ex) {
        return new ResponseEntity&lt;&gt;(ex.getMessage(), HttpStatus.NOT_FOUND);
    }
}




<br>Proporcionar Respuestas de Error Personalizadas: Enviar respuestas de error que sean informativas pero no expongan detalles internos del sistema.
<br><br>
<br>Logging de Excepciones: Registrar excepciones con detalles suficientes para la depuración.
<br>Herramientas como Logback o SLF4J: Configurar niveles de logging apropiados y destinos de log (archivo, consola, sistemas de monitoreo).
<br><br>
<br>Mensajes de Error Amigables: Mostrar mensajes de error comprensibles para el usuario en la interfaz, evitando detalles técnicos.
<br>Manejo de Errores en la UI: Por ejemplo, mostrar un mensaje de "Habitación no disponible" si una reserva no puede ser completada.
<br><br>
<br>Patrones Comunes de Error: Implementar un enfoque consistente para manejar y reportar errores a través de toda la aplicación.
<br><br>Imagina que un usuario intenta reservar una habitación en tu sistema de reservas de hotel, pero selecciona fechas que ya están completamente reservadas. El sistema podría:<br>
<br>Validar la Solicitud: Revisar las fechas y disponibilidad antes de proceder.
<br>Manejar la Excepción: Si no hay disponibilidad, lanzar una NoRoomAvailableException.
<br>Registrar el Error: Registrar la solicitud y el error en los logs del sistema.
<br>Feedback al Usuario: Informar al usuario mediante un mensaje claro y amigable en la interfaz, como "Lo sentimos, no hay habitaciones disponibles para las fechas seleccionadas. Por favor, intenta con otras fechas".
<br>Esta estrategia de manejo de errores asegura que, incluso cuando ocurren errores, la experiencia del usuario se mantiene positiva y el sistema permanece estable y seguro.]]></description><link>acceso-a-datos\acd-main\práctica-segunda-evaluación\2.9-manejo-de-errores-y-excepciones.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Práctica segunda evaluación/2.9 Manejo de Errores y Excepciones.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[2.10 Documentación]]></title><description><![CDATA[ 
 <br>La Documentación es un aspecto fundamental en el desarrollo y mantenimiento de software, especialmente en sistemas complejos como por ejemplo un sistema de reservas para hoteles. Una buena documentación facilita la comprensión del sistema, ayuda en el mantenimiento y es crucial para la colaboración eficaz en equipos de desarrollo.<br><br>
<br>
Documentación del Código: Incluye comentarios en el código y documentación técnica que explica cómo funciona el sistema y cómo están implementadas las diferentes partes.

<br>Comentarios en el Código: Explicaciones directamente en el código fuente para clarificar la lógica, especialmente en partes complejas.
<br>Documentación Técnica Externa: Detalles sobre la arquitectura del sistema, modelos de datos, flujos de trabajo, etc.


<br>
Documentación de la API: Si tu sistema expone una API (por ejemplo, para integraciones con otros sistemas), es importante documentar cómo se utiliza.

<br>Herramientas como Swagger: Automatizan la creación de documentación para APIs REST, permitiendo a los desarrolladores y usuarios entender y probar la API.


<br>
Documentación de Procedimientos Operativos: Instrucciones y procedimientos para el despliegue, configuración y mantenimiento del sistema.

<br>Guías de Instalación y Configuración: Pasos para instalar y configurar el sistema en diferentes entornos.
<br>Manual de Usuario: Instrucciones sobre cómo utilizar el sistema, orientadas al usuario final.


<br>
Documentación para Desarrolladores y Nuevos Integrantes del Equipo: Incluye guías de inicio rápido, mejores prácticas, y explicaciones de las decisiones de diseño.

<br>Guías de Contribución: Normas y recomendaciones para desarrolladores que contribuyen al proyecto.


<br><br>Imagina que tu sistema de reservas de hotel tiene varias componentes clave: una interfaz de usuario para reservas, un backend para gestionarlas, y una API para integraciones con otros servicios. La documentación podría incluir:<br>
<br>
Documentación del Código:

<br>Comentarios en el código fuente del backend explicando la lógica de la gestión de reservas.
<br>Documento técnico que describe la arquitectura general del sistema, incluyendo cómo se procesan y almacenan las reservas.


<br>
Documentación de la API:

<br>Documentación generada por Swagger para la API de reservas, detallando endpoints, parámetros, formatos de respuesta, etc.
<br>Ejemplos de uso de la API para realizar reservas o recuperar información de reservas existentes.


<br>
Manual de Usuario:

<br>Guía paso a paso sobre cómo realizar una reserva a través de la interfaz de usuario, dirigida a los clientes del hotel.
<br>Instrucciones para el personal del hotel sobre cómo gestionar las reservas a través del panel de administración.


<br>
Documentación de Procedimientos Operativos:

<br>Instrucciones de cómo desplegar el sistema en un servidor o en la nube.
<br>Procedimientos de respaldo y recuperación de datos.


<br>Mantener esta documentación actualizada y accesible asegura que cualquier persona involucrada con el sistema, ya sea desarrollando, operando o utilizando, pueda hacerlo de manera efectiva y eficiente.]]></description><link>acceso-a-datos\acd-main\práctica-segunda-evaluación\2.10-documentación.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Práctica segunda evaluación/2.10 Documentación.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[2.11 Despliegue y Mantenimiento]]></title><description><![CDATA[ 
 <br>El Despliegue y Mantenimiento de una aplicación, especialmente en un entorno de producción, requiere una planificación cuidadosa y estrategias efectivas para asegurar que la aplicación sea confiable, escalable y fácil de mantener.<br><br>
<br>Integración y Despliegue Continuos (CI/CD):

<br>CI (Continuous Integration): Automatiza la integración de cambios de código en un repositorio central. Esto incluye ejecutar pruebas automáticas para asegurar que los cambios no rompan la aplicación.
<br>CD (Continuous Deployment/Delivery): Automatiza el despliegue de la aplicación a los entornos de prueba y producción. Herramientas como Jenkins, GitLab CI/CD o GitHub Actions son comúnmente usadas.
<br>Ejemplo: Cada vez que se realiza un commit en la rama principal, se desencadena un proceso automatizado que ejecuta pruebas, y si son exitosas, se despliega la nueva versión en el servidor de producción.


<br><br>
<br>
Escalabilidad Horizontal y Vertical:

<br>Vertical: Aumentar los recursos del servidor (CPU, memoria).
<br>Horizontal: Añadir más instancias del servidor para distribuir la carga.
<br>Balanceo de Carga: Utilizar un balanceador de carga para distribuir las solicitudes entrantes entre múltiples instancias.
<br>Ejemplo: Durante las temporadas altas, el sistema de reservas podría escalar automáticamente para manejar un mayor número de reservas simultáneas.


<br>
Optimización del Rendimiento:

<br>Analizar y optimizar consultas de base de datos, caché de datos frecuentemente solicitados y revisión del código para detectar cuellos de botella.
<br>Ejemplo: Implementar caché para los datos de disponibilidad de habitaciones para reducir la carga en la base de datos.


<br><br>
<br>
Planificación de Actualizaciones:

<br>Establecer un calendario de mantenimiento regular y comunicarlo a los usuarios.
<br>Actualizar dependencias y frameworks para mantener la seguridad y la eficiencia del sistema.


<br>
Estrategias de Mantenimiento:

<br>Mantenimiento Proactivo: Incluye monitoreo regular y auditorías de seguridad para prevenir problemas.
<br>Mantenimiento Reactivo: Responder rápidamente a los problemas a medida que surgen.
<br>Ejemplo: Realizar auditorías de seguridad trimestrales y aplicar parches de seguridad a la base de código tan pronto como estén disponibles.


<br>
Pruebas Post-Despliegue:

<br>Realizar pruebas automáticas y manuales después de cada despliegue para asegurar que la actualización funcione como se espera.


<br><br>Imagina que tu sistema de reservas experimenta un aumento significativo de tráfico durante la temporada alta de vacaciones. Para manejar esto:<br>
<br>Despliegue: Usas una pipeline de CI/CD para desplegar automáticamente las nuevas características y actualizaciones de seguridad, minimizando el tiempo de inactividad y los errores humanos.
<br>Escalabilidad: Implementas la escalabilidad horizontal, donde se añaden automáticamente más servidores web durante los picos de demanda, y un balanceador de carga distribuye las solicitudes de reserva entre estos servidores.
<br>Mantenimiento: Estableces un plan de mantenimiento regular, donde revisas y actualizas la aplicación fuera de las horas pico, y realizas pruebas exhaustivas después de cada actualización para garantizar que todo funcione correctamente.
<br>Al implementar estas estrategias, puedes asegurarte de que tu sistema de reservas sea robusto, confiable y capaz de manejar tanto las demandas regulares como las picos estacionales con eficacia.]]></description><link>acceso-a-datos\acd-main\práctica-segunda-evaluación\2.11-despliegue-y-mantenimiento.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Práctica segunda evaluación/2.11 Despliegue y Mantenimiento.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[2.12 Accesibilidad y Localización]]></title><description><![CDATA[ 
 <br>La Accesibilidad y Localización son aspectos cruciales para hacer que tu sistema sea inclusivo y accesible a una audiencia global.<br><br>Asegurarse de que la aplicación sea utilizable por personas con diversas discapacidades (visuales, auditivas, motoras, cognitivas).<br>
<br>
Directrices de Accesibilidad Web (WCAG):

<br>Sigue las WCAG para garantizar que la web sea accesible.
<br>Por ejemplo, asegúrate de que la interfaz sea navegable con teclado y que los elementos interactivos sean accesibles a lectores de pantalla.


<br>
Diseño Inclusivo:

<br>Utiliza un tamaño de fuente legible, contrastes de color adecuados y etiquetas claras.
<br>Por ejemplo, botones con etiquetas descriptivas y tamaño suficiente para ser fácilmente seleccionables.


<br>
Pruebas de Accesibilidad:

<br>Realiza pruebas con herramientas como Lighthouse de Google o con usuarios reales que tengan discapacidades.


<br><br>Adaptar la aplicación para diferentes idiomas y culturas para atender a una audiencia internacional.<br>
<br>
Internacionalización (i18n):

<br>Diseña la aplicación de modo que sea fácil cambiar textos y formatos a diferentes idiomas y regiones.
<br>Por ejemplo, utilizar archivos de recursos para almacenar cadenas de texto que puedan ser traducidas.


<br>
Localización (L10n):

<br>Traduce la interfaz de usuario y los contenidos a diferentes idiomas.
<br>Considera diferencias culturales en imágenes, colores y formatos de fecha/hora.


<br><br>Imagina un sitio web de reservas para un hotel que recibe visitantes de todo el mundo y quiere ser accesible para todos:<br>
<br>
Accesibilidad:

<br>La interfaz del sitio web tiene un alto contraste entre el texto y el fondo para facilitar la lectura.
<br>Los formularios de reserva tienen etiquetas claras y son navegables usando solo teclado, lo que es crucial para usuarios con discapacidades motoras o visuales.
<br>Los elementos interactivos proporcionan feedback audible y visual para ser accesibles a personas con discapacidades auditivas y visuales.


<br>
Localización:

<br>El sitio web detecta la ubicación del usuario y ofrece la opción de traducir el contenido al idioma local, como español, francés o japonés.
<br>Los formatos de fecha y moneda se ajustan automáticamente según la región del usuario.
<br>Se ofrece soporte de atención al cliente en múltiples idiomas.


<br>Al implementar la accesibilidad y la localización, no solo cumples con las regulaciones y estándares internacionales, sino que también aseguras una experiencia de usuario inclusiva y global, lo que es esencial para un negocio hotelero que atiende a una clientela diversa.]]></description><link>acceso-a-datos\acd-main\práctica-segunda-evaluación\2.12-accesibilidad-y-localización.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Práctica segunda evaluación/2.12 Accesibilidad y Localización.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[2.13 Aspectos Legales y Conformidad]]></title><description><![CDATA[ 
 <br>El cumplimiento de los Aspectos Legales y Normativas es esencial en cualquier aplicación que maneja datos personales y financieros de usuarios de diferentes regiones geográficas. Esto incluye cumplir con leyes de privacidad de datos como el GDPR en Europa, y otras regulaciones locales e internacionales.<br><br>El Reglamento General de Protección de Datos (GDPR) es una regulación de la Unión Europea que establece directrices para la recopilación y procesamiento de información personal de individuos dentro de la UE.<br>
<br>
Consentimiento del Usuario:

<br>Obtener consentimiento claro y explícito de los usuarios para recoger y procesar sus datos.
<br>Por ejemplo, tener una clara política de privacidad y términos de servicio en el proceso de reserva.


<br>
Derecho a Ser Olvidado:

<br>Permitir a los usuarios solicitar la eliminación de sus datos personales.
<br>Por ejemplo, proporcionar una opción en el perfil del usuario para solicitar la eliminación de la cuenta y todos los datos asociados.


<br>
Portabilidad de Datos:

<br>Permitir a los usuarios obtener sus datos en un formato utilizable y transferirlos a otro servicio.
<br>Por ejemplo, permitir a los usuarios descargar sus historiales de reserva.


<br><br>Dependiendo de la ubicación del hotel y de los usuarios, pueden aplicarse otras leyes y regulaciones.<br>
<br>
Leyes Locales:

<br>Cumplir con las leyes de privacidad de datos y de consumidores específicas de cada país o región.
<br>Por ejemplo, la CCPA en California, EE.UU.


<br>
Estándares de la Industria:

<br>Cumplir con estándares de la industria, como PCI DSS para el procesamiento de pagos con tarjeta de crédito.


<br><br>Imagina que tu sistema de reservas de hotel opera a nivel internacional y maneja datos de clientes de diferentes regiones:<br>
<br>
Cumplimiento de GDPR:

<br>Durante el proceso de reserva, se solicita a los usuarios que acepten la política de privacidad, que detalla cómo se usarán y protegerán sus datos.
<br>Se ofrece una opción clara en el perfil del usuario para eliminar su cuenta, lo que resulta en la eliminación de todos sus datos personales del sistema.


<br>
Adaptación a Normativas Locales:

<br>Si el hotel tiene una gran base de clientes en EE.UU., asegurarse de cumplir con la CCPA, proporcionando información detallada sobre el uso de datos y permitiendo a los usuarios optar por no participar en ciertas formas de recopilación de datos.


<br>
Procesamiento Seguro de Pagos:

<br>Implementar un sistema de pago que cumpla con PCI DSS, asegurando que todos los datos de tarjetas de crédito se manejen de manera segura.


<br>Al asegurarse de que tu sistema cumpla con las leyes y regulaciones relevantes, proteges a tu empresa de posibles litigios y multas, y más importante aún, construyes confianza con tus usuarios al respetar y proteger su privacidad y derechos.]]></description><link>acceso-a-datos\acd-main\práctica-segunda-evaluación\2.13-aspectos-legales-y-conformidad.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Práctica segunda evaluación/2.13 Aspectos Legales y Conformidad.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[2.14 Gestión de Cambios y Versiones]]></title><description><![CDATA[ 
 <br>La Gestión de Cambios y Versiones es vital para mantener el control y la integridad del código en proyectos de desarrollo de software. Esta práctica ayuda a gestionar el desarrollo colaborativo, rastrear y revertir cambios, y mantener un historial claro del progreso del proyecto.<br><br>Git es una herramienta de control de versiones distribuido que permite a los equipos trabajar de manera más eficiente y segura en el código de la aplicación.<br>
<br>
Repositorios Git:

<br>Almacenar el código fuente en un repositorio Git, como GitHub, GitLab o Bitbucket.
<br>Permite rastrear cada cambio realizado en el código, quién lo hizo y cuándo.


<br>
Ramas y Fusiones (Branching and Merging):

<br>Utilizar ramas para desarrollar nuevas características o corregir errores sin afectar la rama principal (master/main).
<br>Fusionar cambios a la rama principal una vez que se completa y prueba la nueva característica o corrección.


<br>
Revisión de Código y Pull Requests:

<br>Realizar revisiones de código a través de pull requests para asegurar la calidad y la coherencia del código antes de que se fusione en la rama principal.


<br><br>La gestión de cambios implica procesos y herramientas para controlar y gestionar los cambios en el código, las configuraciones y otros artefactos del proyecto.<br>
<br>
Políticas de Commit:

<br>Establecer normas para los commits, como mensajes de commit claros y descriptivos y la agrupación lógica de cambios.


<br>
Integración Continua (CI):

<br>Automatizar la compilación y las pruebas del código con cada push o pull request usando herramientas de CI como Jenkins, Travis CI o GitHub Actions.


<br>
Gestión de Lanzamientos y Despliegues:

<br>Mantener un registro de las versiones lanzadas, y planificar y coordinar los despliegues para minimizar las interrupciones.


<br><br>Imagina que estás trabajando en una nueva función para el sistema de reservas del hotel, como la integración de un sistema de fidelización de clientes:<br>
<br>
Desarrollo de la Función:

<br>Creas una nueva rama en Git para desarrollar esta función.
<br>Realizas commits regulares con mensajes descriptivos, como "Añadida la API de puntos de fidelidad" o "Corregido el error en el cálculo de puntos".


<br>
Revisión y Fusión:

<br>Una vez completada la función, abres un pull request.
<br>Tu equipo revisa el código en el pull request y, después de la aprobación, se fusiona en la rama principal.


<br>
Integración y Despliegue Continuos:

<br>Con cada commit, un sistema de CI ejecuta pruebas automáticas.
<br>Una vez en la rama principal, se despliega automáticamente en un entorno de prueba y, finalmente, en producción siguiendo los procedimientos de lanzamiento establecidos.


<br>Este enfoque estructurado y controlado para la gestión de cambios y versiones asegura que el desarrollo del sistema de reservas del hotel sea eficiente, transparente y de alta calidad, minimizando errores y facilitando la colaboración en equipo.]]></description><link>acceso-a-datos\acd-main\práctica-segunda-evaluación\2.14-gestión-de-cambios-y-versiones.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Práctica segunda evaluación/2.14 Gestión de Cambios y Versiones.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[Sesión 1 (1 hora y 30 minutos):]]></title><description><![CDATA[ 
 <br><br><br><br>Definición (5 minutos):<br>
<br>El "acceso a datos" se refiere a las técnicas y métodos que permiten a una aplicación interáctuar con fuentes de datos, sean estas bases de datos, archivos de texto, archivos binarios, entre otros.
<br>En este módulo, nos concentraremos en el acceso a datos a través de archivos utilizando Java.
<br>Componentes fundamentales (10 minutos):<br>
<br>Archivo: Un conjunto de datos relacionados almacenados en una computadora.
<br>Stream: Un flujo de datos o secuencia que puede ser de entrada (para leer datos) o de salida (para escribir datos).
<br>Buffer: Un área de almacenamiento temporal utilizada para mejorar la eficiencia de las operaciones de lectura y escritura.
<br>Introducción a las clases y métodos comúnmente utilizados en Java para el acceso a datos (File, InputStream, OutputStream, Reader, Writer, etc.), estos se tratarán con más detalle en las siguientes secciones.
<br><br>Fundamentación (5 minutos):<br>
<br>El manejo de archivos es una habilidad fundamental para cualquier programador, ya que permite la persistencia de datos, es decir, que los datos sigan existiendo incluso después de que el programa haya terminado.
<br>A través del manejo de archivos, podemos compartir información entre distintos programas y realizar análisis de datos complejos.
<br>Aplicaciones Prácticas (5 minutos):<br>
<br>Almacenamiento y recuperación de información: guardar configuraciones, guardar resultados, leer datos de entrada, entre otros.
<br>Intercambio de datos: exportar e importar datos en diferentes formatos (texto, JSON, XML, binario, etc.) facilita el intercambio de información entre sistemas diferentes.
<br>Logging: registrar eventos o transacciones para el análisis posterior, una herramienta indispensable para el monitoreo y el debugging.
<br>API de Java (5 minutos):<br>
<br>Java ofrece un amplio soporte para operaciones de I/O a través de varias clases y APIs, facilitando así el manejo de archivos de diversas formas y tipos.
<br>Clases para archivos de texto:<br><br>Clases para archivos binarios:<br><br><br><br>Definición y características (3 minutos):<br>
<br>Los archivos de texto: archivos que contienen caracteres legibles y están estructurados en líneas.
<br>Algunas de sus características: sencillos de leer y escribir, pueden ser editados con cualquier editor de texto, no contienen metadatos complejos, etc.
<br>Uso en Java (7 minutos):<br>
<br>Para operaciones de Lectura:

<br>Utilización de clases como FileReader y BufferedReader para leer archivos de texto en Java.


<br>Explicación en detalle sobre la clase FileReader en Java.<br><br>FileReader es una clase en Java que proporciona métodos para leer caracteres de un archivo. Es una subclase de la clase InputStreamReader, que es una clase para leer flujos de caracteres. Aquí están algunos puntos clave sobre FileReader:<br><br>Para leer un archivo, primero necesitamos crear una instancia de FileReader, especificando el archivo que queremos leer, que puede ser un objeto File o una ruta de archivo como una cadena:<br>FileReader reader = new FileReader("ruta/del/archivo.txt");
<br><br>La clase FileReader provee varios métodos para leer caracteres del archivo:<br>
<br>int read(): Lee un solo carácter y devuelve su valor como un entero (devuelve -1 si se ha alcanzado el final del archivo).
<br>int read(char[] cbuf): Lee varios caracteres a la vez en una matriz de caracteres (devuelve el número de caracteres leídos o -1 si se ha alcanzado el final del archivo).
<br>int read(char[] cbuf, int off, int len): Lee varios caracteres en una parte de la matriz de caracteres especificada.
<br><br>Las operaciones de I/O pueden generar excepciones, así que se deben manejar utilizando bloques try-catch o declarando que el método puede lanzar una excepción del tipo IOException:<br>try {
    FileReader reader = new FileReader("ruta/del/archivo.txt");
    int caracter;
    while((caracter = reader.read()) != -1) {
        System.out.print((char) caracter);
    }
    reader.close();
} catch (IOException e) {
    e.printStackTrace();
}
<br><br>Es fundamental cerrar el FileReader después de usarlo para liberar los recursos asociados. Esto se puede hacer utilizando el método close():<br>reader.close();
<br><br>A partir de Java 7, puedes utilizar la declaración try-with-resources, que garantiza que el FileReader se cerrará automáticamente al final del bloque try:<br>try (FileReader reader = new FileReader("ruta/del/archivo.txt")) {
    int caracter;
    while((caracter = reader.read()) != -1) {
        System.out.print((char) caracter);
    }
} catch (IOException e) {
    e.printStackTrace();
}
<br><br>Aunque FileReader puede leer caracteres directamente de un archivo, generalmente es más eficiente usarlo con BufferedReader, que puede reducir el número de operaciones de I/O al leer múltiples caracteres a la vez.<br><br>FileReader utiliza la codificación de caracteres predeterminada del sistema. Si deseas especificar una codificación de caracteres diferente, considera usar InputStreamReader con FileInputStream, lo que permite especificar la codificación de caracteres.<br><br>Para archivos grandes, es recomendable usar FileReader con BufferedReader para aumentar el rendimiento, ya que BufferedReader lee grandes bloques de datos a la vez en lugar de leer carácter por carácter, reduciendo así el tiempo de I/O.<br>try (BufferedReader br = new BufferedReader(new FileReader("ruta/del/archivo.txt"))) {
    String linea;
    while ((linea = br.readLine()) != null) {
        System.out.println(linea);
    }
} catch (IOException e) {
    e.printStackTrace();
}
<br>
<br>Demostración con un ejemplo sencillo de cómo leer un archivo de texto línea por línea.
<br>import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class LecturaArchivo {
    public static void main(String[] args) {
        try (BufferedReader br = new BufferedReader(new FileReader("ejemplo.txt"))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                System.out.println(linea);
            }
        } catch (IOException e) {
            System.err.println("Error al leer el archivo: " + e.getMessage());
        }
    }
}
<br>
<br>Escritura:

<br>Utilización de clases como FileWriter y BufferedWriter para escribir en archivos de texto en Java.


<br>Explicación sobre la clase FileWriter en Java:<br><br>La clase FileWriter es una clase en Java que se utiliza para escribir caracteres en un archivo. Forma parte del paquete java.io y es una subclase de la clase OutputStreamWriter, que es una clase de escritura de flujo de caracteres. Aquí están algunos detalles clave sobre FileWriter:<br><br>Cuando creamos una instancia de FileWriter, Java intenta abrir el archivo especificado. Si el archivo no existe, se creará uno nuevo. Aquí está un ejemplo sencillo:<br>FileWriter writer = new FileWriter("archivo.txt");
<br><br>FileWriter permite escribir en un archivo en dos modos: <br>
<br>
Modo Sobrescribir (default): Sobrescribe el contenido del archivo existente.

<br>
Modo Append: Añade el nuevo contenido al final del archivo existente, conservando el contenido original. Se activa pasando un segundo argumento true al constructor:
FileWriter writer = new FileWriter("archivo.txt", true);


<br><br>El FileWriter ofrece varios métodos para escribir en el archivo:<br>
<br>write(int c): Escribe un solo carácter.
<br>write(char[] cbuf): Escribe una matriz de caracteres.
<br>write(String str): Escribe una cadena de caracteres.
<br>write(String str, int off, int len): Escribe una parte de una cadena de caracteres.
<br>Por ejemplo,<br>writer.write("Hola Mundo");
<br><br>Es importante cerrar el FileWriter una vez que hemos terminado de escribir en el archivo para liberar los recursos asociados. Se hace utilizando el método close():<br>writer.close();
<br><br>Las operaciones de I/O pueden generar excepciones, por lo que es necesario manejarlas utilizando bloques try-catch o declarando que el método puede lanzar una excepción de tipo IOException:<br>try {
    FileWriter writer = new FileWriter("archivo.txt");
    writer.write("Hola Mundo");
    writer.close();
} catch (IOException e) {
    e.printStackTrace();
}
<br><br>Desde Java 7, puedes utilizar la declaración try-with-resources, que garantiza que el FileWriter se cerrará automáticamente al final del bloque try:<br>try (FileWriter writer = new FileWriter("archivo.txt")) {
    writer.write("Hola Mundo");
} catch (IOException e) {
    e.printStackTrace();
}
<br><br>Aunque FileWriter puede escribir caracteres directamente en un archivo, es recomendable usarlo junto con BufferedWriter para una escritura más eficiente, especialmente cuando se escribe una gran cantidad de texto.<br><br>FileWriter utiliza la codificación de caracteres predeterminada del sistema. Si deseas especificar una codificación de caracteres diferente, deberías considerar usar OutputStreamWriter.<br>
<br>Demostración con un ejemplo sencillo de cómo escribir en un archivo de texto.
<br>import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

public class EscrituraArchivo {
    public static void main(String[] args) {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter("salida.txt"))) {
            bw.write("Esto es una línea de texto.");
            bw.newLine();
            bw.write("Esto es otra línea de texto.");
        } catch (IOException e) {
            System.err.println("Error al escribir en el archivo: " + e.getMessage());
        }
    }
}
<br>Dos escenarios ejemplo donde el manejo de archivos en aplicaciones Java sería muy útil:<br><br>Situación: Una aplicación requiere mantener un registro de usuarios con su respectiva información básica como nombre, edad y correo electrónico.<br>Ejemplo de Código en Java:<br>import java.io.FileWriter;
import java.io.FileReader;
import java.io.IOException;

public class RegistroUsuarios {

    public static void main(String[] args) {
        String archivo = "usuarios.txt";

        // Escribiendo datos de usuarios en el archivo
        try (FileWriter writer = new FileWriter(archivo)) {
            writer.write("Nombre,Edad,Correo\n");
            writer.write("Juan,30,juan@example.com\n");
            writer.write("Maria,25,maria@example.com\n");
        } catch (IOException e) {
            System.out.println("Error escribiendo en el archivo: " + e.getMessage());
        }

        // Leyendo datos de usuarios del archivo
        try (FileReader reader = new FileReader(archivo)) {
            int caracter;
            while ((caracter = reader.read()) != -1) {
                System.out.print((char) caracter);
            }
        } catch (IOException e) {
            System.out.println("Error leyendo el archivo: " + e.getMessage());
        }
    }
}
<br><br>Situación: Un software que necesita guardar y leer configuraciones del usuario, como preferencias de visualización, desde un archivo.<br>Ejemplo de Código en Java:<br>import java.util.Properties;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.IOException;

public class ConfiguracionApp {

    public static void main(String[] args) {
        Properties prop = new Properties();
        String archivo = "config.properties";

        // Guardando configuraciones en un archivo
        try (FileOutputStream output = new FileOutputStream(archivo)) {
            prop.setProperty("tema", "oscuro");
            prop.setProperty("fuente", "Arial");
            prop.store(output, null);
        } catch (IOException io) {
            System.out.println("Error guardando configuraciones: " + io.getMessage());
        }

        // Leyendo configuraciones desde un archivo
        try (FileInputStream input = new FileInputStream(archivo)) {
            prop.load(input);
            System.out.println("Tema: " + prop.getProperty("tema"));
            System.out.println("Fuente: " + prop.getProperty("fuente"));
        } catch (IOException ex) {
            System.out.println("Error leyendo configuraciones: " + ex.getMessage());
        }
    }
}
<br>En ambos ejemplos, se demuestra cómo realizar operaciones básicas de escritura y lectura de archivos en Java, una habilidad esencial para manipular datos persistentes en aplicaciones reales.<br><br>Definición y características (3 minutos):<br>
<br>Los archivos binarios contienen información en un formato que solo puede ser leído por programas específicos, no son legibles por humanos.
<br>Algunas características: pueden almacenar una amplia variedad de tipos de datos, son más eficientes para la lectura y escritura en comparación con los archivos de texto.
<br>Uso en Java (7 minutos):<br>
<br>Lectura:

<br>Explicación detallada de las clases FileInputStream y DataInputStream en Java, específicamente para la lectura de archivos binarios:


<br><br><br>La clase FileInputStream es parte del paquete java.io y se utiliza para leer bytes de un archivo. Es adecuado para leer datos binarios.<br><br>Para crear una instancia de FileInputStream, necesitarás especificar la ruta del archivo desde el cual deseas leer, esto puede hacerse usando un objeto File o una cadena que representa la ruta del archivo:<br>FileInputStream fis = new FileInputStream("ruta/del/archivo.bin");
<br><br>FileInputStream proporciona varios métodos para leer datos:<br>
<br>int read(): lee un byte de datos y devuelve su valor como un entero (retorna -1 si se ha alcanzado el final del archivo).
<br>int read(byte[] b): lee varios bytes a la vez en un array de bytes.
<br>int read(byte[] b, int off, int len): lee varios bytes en una parte del array de bytes especificada.
<br><br>Al igual que con otras clases de IO, las operaciones de IO pueden generar excepciones, y estas deben manejarse correctamente, generalmente con un bloque try-catch:<br>try {
    FileInputStream fis = new FileInputStream("ruta/del/archivo.bin");
} catch (FileNotFoundException e) {
    e.printStackTrace();
}
<br><br><br>La clase DataInputStream permite leer tipos de datos primitivos (como int, float, double, etc.) de una manera portable desde un flujo de entrada. Generalmente se usa en combinación con FileInputStream para leer datos binarios.<br><br>Para crear una instancia de DataInputStream, necesitarás envolver un objeto InputStream (como un FileInputStream) dentro de un DataInputStream:<br>DataInputStream dis = new DataInputStream(new FileInputStream("ruta/del/archivo.bin"));
<br><br>DataInputStream proporciona varios métodos para leer datos primitivos:<br>
<br>int readInt(): lee un entero de 4 bytes.
<br>float readFloat(): lee un float de 4 bytes.
<br>double readDouble(): lee un double de 8 bytes.
<br>String readUTF(): lee una cadena en formato UTF-8.
<br>Entre otros...
<br><br>Al igual que con FileInputStream, las operaciones de IO pueden generar excepciones que deben manejarse con bloques try-catch:<br>try {
    DataInputStream dis = new DataInputStream(new FileInputStream("ruta/del/archivo.bin"));
    int i = dis.readInt();
    float f = dis.readFloat();
    // y así sucesivamente...
} catch (IOException e) {
    e.printStackTrace();
}
<br><br>FileInputStream y DataInputStream a menudo se usan juntos para leer datos binarios de un archivo:<br>try (DataInputStream dis = new DataInputStream(new FileInputStream("ruta/del/archivo.bin"))) {
    int i = dis.readInt();
    float f = dis.readFloat();
    // ...
} catch (IOException e) {
    e.printStackTrace();
}
<br>
<br>Demostración con un ejemplo básico de cómo leer datos de un archivo binario utilizando FileInputStream y DataInputStream en Java:
<br>import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;

public class LeerDatosBinarios {

    public static void main(String[] args) {
        
        String ruta = "ruta/del/archivo.bin";  // Ajusta la ruta según necesitas
        
        try (DataInputStream dis = new DataInputStream(new FileInputStream(ruta))) {
            
            // Supongamos que el archivo contiene un entero, un flotante y una cadena en este orden
            int valorEntero = dis.readInt();       // Leer un entero de 4 bytes
            float valorFlotante = dis.readFloat(); // Leer un float de 4 bytes
            String valorCadena = dis.readUTF();    // Leer una cadena en formato UTF-8
            
            System.out.println("Valor Entero: " + valorEntero);
            System.out.println("Valor Flotante: " + valorFlotante);
            System.out.println("Valor Cadena: " + valorCadena);
            
        } catch (IOException e) {
            System.err.println("Ocurrió un error durante la lectura del archivo: " + e.getMessage());
        }
    }
}
<br>En este ejemplo:<br>
<br>Importamos las clases necesarias.
<br>Usamos un bloque try-with-resources para manejar el flujo de entrada, lo que garantiza que el flujo se cerrará automáticamente al final del bloque, incluso si ocurre una excepción.
<br>Creamos una nueva instancia de DataInputStream envolviendo una nueva instancia de FileInputStream apuntando a la ruta del archivo binario.
<br>Usamos los métodos readInt(), readFloat() y readUTF() de DataInputStream para leer un entero, un flotante y una cadena del archivo, respectivamente, y luego los imprimimos a la consola.
<br>Capturamos cualquier excepción de IOException que pueda ocurrir y la manejamos imprimiendo un mensaje de error en la consola.
<br>
<br>Escritura:

<br>Introducir clases como FileOutputStream y DataOutputStream para la escritura de archivos binarios en Java.
<br>Demostración con un ejemplo básico de cómo escribir datos en un archivo binario.


<br><br>Definición y características (3 minutos):<br>
<br>Explicar que tanto JSON como XML son formatos de archivo utilizados para estructurar y almacenar datos de una manera que es tanto legible por humanos como por máquinas.
<br>Comparar brevemente JSON y XML, destacando las características principales de cada uno.
<br>Uso en Java (7 minutos):<br>
<br>JSON:

<br>Presentar bibliotecas populares en Java para trabajar con JSON, como Jackson o Gson.
<br>Demostrar con un ejemplo básico cómo parsear y crear archivos JSON en Java.


<br>XML:

<br>Introducir la biblioteca JAXB que es comúnmente utilizada para trabajar con XML en Java.
<br>Demostrar con un ejemplo básico cómo parsear y crear archivos XML en Java.


<br><br>Introducción y planificación (5 minutos):<br>
<br>Explicar que ahora los estudiantes utilizarán el entorno configurado para crear un proyecto básico en Java.
<br>Dar una breve introducción sobre qué consistirá el proyecto básico: un pequeño programa que será capaz de leer y escribir en un archivo (preludio a las siguientes sesiones).
<br>Creación del proyecto (7 minutos):<br>
<br>Guía paso a paso para la creación del proyecto:

<br>Creación de una nueva clase Java en la IDE.
<br>Estructura básica de una clase Java: explicación sobre public static void main(String[] args) y su importancia.
<br>Introducción a la API de I/O de Java: explicación breve sobre las clases File, FileReader, y FileWriter.
<br>Escribir un código básico para leer y escribir en un archivo de texto usando las clases mencionadas.


<br>Un ejemplo básico usando únicamente File, FileWriter y FileReader para escribir y leer en un archivo de texto:<br>import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class AccesoDatos {

    public static void main(String[] args) {
        AccesoDatos accesoDatos = new AccesoDatos();

        // Escribir datos en el archivo
        String textoParaEscribir = "Hola, ¡bienvenidos al curso de Acceso a Datos!";
        accesoDatos.escribirArchivo("datos.txt", textoParaEscribir);

        // Leer datos del archivo
        accesoDatos.leerArchivo("datos.txt");
    }

    /**
     * Método para escribir texto en un archivo
     */
    public void escribirArchivo(String nombreArchivo, String texto) {
        try {
            FileWriter writer = new FileWriter(new File(nombreArchivo));
            writer.write(texto);
            writer.close();
            System.out.println("Datos escritos exitosamente en el archivo.");
        } catch (IOException e) {
            System.err.println("Error al escribir en el archivo: " + e.getMessage());
        }
    }

    /**
     * Método para leer texto de un archivo
     */
    public void leerArchivo(String nombreArchivo) {
        try {
            FileReader reader = new FileReader(new File(nombreArchivo));
            int caracter;
            System.out.println("Leyendo datos del archivo:");
            while ((caracter = reader.read()) != -1) {
                System.out.print((char) caracter);
            }
            reader.close();
            System.out.println();
        } catch (IOException e) {
            System.err.println("Error al leer el archivo: " + e.getMessage());
        }
    }
}
<br>Aquí utilizando buffers para mejorar el rendimiento y simplificar el código al escribir y leer líneas completas a cada iteración del bucle while.<br>import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class AccesoDatos {

    public static void main(String[] args) {
        AccesoDatos accesoDatos = new AccesoDatos();
        
        // Escribir datos en el archivo
        String textoParaEscribir = "Hola, ¡bienvenidos al curso de Acceso a Datos!";
        accesoDatos.escribirArchivo("datos.txt", textoParaEscribir);
        
        // Leer datos del archivo
        accesoDatos.leerArchivo("datos.txt");
    }

    /**
     * Método para escribir texto en un archivo
     */
    public void escribirArchivo(String nombreArchivo, String texto) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(nombreArchivo))) {
            writer.write(texto);
            System.out.println("Datos escritos exitosamente en el archivo.");
        } catch (IOException e) {
            System.err.println("Error al escribir en el archivo: " + e.getMessage());
        }
    }

    /**
     * Método para leer texto de un archivo
     */
    public void leerArchivo(String nombreArchivo) {
        try (BufferedReader reader = new BufferedReader(new FileReader(nombreArchivo))) {
            String linea;
            System.out.println("Leyendo datos del archivo:");
            while ((linea = reader.readLine()) != null) {
                System.out.println(linea);
            }
        } catch (IOException e) {
            System.err.println("Error al leer el archivo: " + e.getMessage());
        }
    }
}
<br>Prueba del proyecto (3 minutos):<br>
<br>Ejecución del proyecto para demostrar que funciona como se esperaba.
<br>Introducción a la depuración: mostrar cómo usar el depurador en la IDE para identificar y corregir errores.
<br><br><br><br>Teoría (5 minutos):<br>
<br>Explicación sobre la clase FileReader: una clase que permite leer caracteres de un archivo.
<br>Introducción a la clase BufferedReader: una clase que se utiliza para leer texto de una entrada de caracteres, almacenando caracteres en un buffer para proporcionar una lectura más eficiente.
<br>Demostración (10 minutos):<br>
<br>Creación de un ejemplo práctico para mostrar cómo usar FileReader y BufferedReader para leer un archivo de texto.
<br>import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class LecturaArchivoTexto {
    public static void main(String[] args) {
        try {
            // Creación de un objeto FileReader para leer el archivo 'datos.txt'
            FileReader fileReader = new FileReader("datos.txt");

            // Envoltura del FileReader con un BufferedReader para una lectura más eficiente
            BufferedReader bufferedReader = new BufferedReader(fileReader);

            // Leer y mostrar cada línea del archivo hasta llegar al final (linea null)
            String linea;
            while ((linea = bufferedReader.readLine()) != null) {
                System.out.println(linea);
            }

            // Cerrar el BufferedReader para liberar recursos
            bufferedReader.close();
        } catch (IOException e) {
            System.err.println("Ocurrió un error al leer el archivo: " + e.getMessage());
        }
    }
}
<br><br><br>Teoría (5 minutos):<br>
<br>Explicación sobre la clase FileWriter: una clase que permite escribir caracteres a un archivo.
<br>Introducción a la clase BufferedWriter: una clase que proporciona una forma eficiente de escribir caracteres en un archivo, almacenando los caracteres en un buffer antes de escribirlos.
<br>Demostración (10 minutos):<br>
<br>Creación de un ejemplo práctico para mostrar cómo usar FileWriter y BufferedWriter para escribir en un archivo de texto.
<br>import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

public class EscrituraArchivoTexto {
    public static void main(String[] args) {
        try {
            // Creación de un objeto FileWriter para escribir en el archivo 'datos.txt'
            FileWriter fileWriter = new FileWriter("datos.txt");

            // Envoltura del FileWriter con un BufferedWriter para una escritura más eficiente
            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);

            // Escribir líneas de texto en el archivo
            bufferedWriter.write("Hola, bienvenidos al curso de Acceso a Datos.");
            bufferedWriter.newLine();
            bufferedWriter.write("Aprenderemos a trabajar con archivos en Java.");

            // Cerrar el BufferedWriter para liberar recursos y guardar los cambios en el archivo
            bufferedWriter.close();
        } catch (IOException e) {
            System.err.println("Ocurrió un error al escribir en el archivo: " + e.getMessage());
        }
    }
}
<br><br><br>Creación y ejecución de un proyecto pequeño (15 minutos):<br>
<br>Crear un pequeño proyecto que incorpore los conocimientos adquiridos sobre lectura y escritura de archivos en Java. Los estudiantes tendrán que crear una aplicación que sea capaz de escribir datos ingresados por el usuario en un archivo y luego leerlos y mostrarlos en consola.
<br>Aquí estaría bien mostrar cómo recibir input del usuario a través de la consola usando Scanner y luego escribir esos datos en un archivo y leerlos posteriormente.
<br>import java.io.*;
import java.util.Scanner;

public class EjemploPractico {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Por favor, introduce un texto para guardar en el archivo:");
        String textoUsuario = scanner.nextLine();

        try (FileWriter writer = new FileWriter("datosUsuario.txt")) {
            writer.write(textoUsuario);
        } catch (IOException e) {
            System.err.println("Error al escribir en el archivo: " + e.getMessage());
        }

        try (FileReader reader = new FileReader("datosUsuario.txt")) {
            int caracter;
            System.out.println("Texto guardado en el archivo:");
            while ((caracter = reader.read()) != -1) {
                System.out.print((char) caracter);
            }
            System.out.println();
        } catch (IOException e) {
            System.err.println("Error al leer el archivo: " + e.getMessage());
        }

        scanner.close();
    }
}
<br><br><br>Teoría (5 minutos):<br>
<br>FileInputStream: Una clase que permite leer bytes de un archivo.
<br>DataInputStream: Permite leer datos de tipos primitivos (como int, float, etc.) de una forma más cómoda y eficiente desde un InputStream (como un FileInputStream).
<br>Demostración (10 minutos):<br>
Creación de un archivo binario con algunos datos y luego utiliza FileInputStream y DataInputStream para leer y mostrar estos datos.<br>import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;

public class LecturaBinaria {
    public static void main(String[] args) {
        try {
            FileInputStream fileInputStream = new FileInputStream("datos.bin");
            DataInputStream dataInputStream = new DataInputStream(fileInputStream);

            // Leer y mostrar datos de tipos primitivos desde el archivo
            int edad = dataInputStream.readInt();
            float altura = dataInputStream.readFloat();
            boolean matriculado = dataInputStream.readBoolean();

            System.out.println("Edad: " + edad);
            System.out.println("Altura: " + altura);
            System.out.println("Matriculado: " + matriculado);

            dataInputStream.close();
        } catch (IOException e) {
            System.err.println("Error al leer el archivo: " + e.getMessage());
        }
    }
}
<br><br>Teoría (5 minutos):<br>
<br>FileOutputStream: Una clase que permite escribir bytes en un archivo.
<br>DataOutputStream: Facilita la escritura de datos de tipos primitivos en un OutputStream (como un FileOutputStream) de manera eficiente.
<br>Demostración (10 minutos):<br>
Crear un programa que escriba datos de tipos primitivos en un archivo binario utilizando FileOutputStream y DataOutputStream.<br>import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class EscrituraBinaria {
    public static void main(String[] args) {
        try {
            FileOutputStream fileOutputStream = new FileOutputStream("datos.bin");
            DataOutputStream dataOutputStream = new DataOutputStream(fileOutputStream);

            // Escribir datos de tipos primitivos en el archivo
            dataOutputStream.writeInt(25);
            dataOutputStream.writeFloat(1.75f);
            dataOutputStream.writeBoolean(true);

            dataOutputStream.close();
            System.out.println("Datos escritos exitosamente en el archivo.");
        } catch (IOException e) {
            System.err.println("Error al escribir en el archivo: " + e.getMessage());
        }
    }
}
<br><br>Crear un pequeño programa que permita al usuario ingresar datos (como edad, altura y estado de matrícula) a través de la consola, los guarde en un archivo binario y luego los lea y muestre desde ese archivo binario.<br>import java.io.*;
import java.util.Scanner;

public class EjemploPracticoBinario {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Introduce tu edad: ");
        int edad = scanner.nextInt();

        System.out.print("Introduce tu altura: ");
        float altura = scanner.nextFloat();

        System.out.print("¿Estás matriculado? (true/false): ");
        boolean matriculado = scanner.nextBoolean();

        try (DataOutputStream dos = new DataOutputStream(new FileOutputStream("datosUsuario.bin"))) {
            dos.writeInt(edad);
            dos.writeFloat(altura);
            dos.writeBoolean(matriculado);
        } catch (IOException e) {
            System.err.println("Error al escribir en el archivo: " + e.getMessage());
        }

        try (DataInputStream dis = new DataInputStream(new FileInputStream("datosUsuario.bin"))) {
            System.out.println("\nDatos guardados en el archivo:");
            System.out.println("Edad: " + dis.readInt());
            System.out.println("Altura: " + dis.readFloat());
            System.out.println("Matriculado: " + dis.readBoolean());
        } catch (IOException e) {
            System.err.println("Error al leer el archivo: " + e.getMessage());
        }

        scanner.close();
    }
}
<br>Ahora vamos a crear un programa donde se podrán añadir detalles de múltiples personas en un archivo binario y luego leerlos todos a la vez. La estructura del archivo será tal que cada "registro" en el archivo binario contenga los detalles de una persona. Vamos a crear métodos separados para facilitar la lectura y escritura de datos.<br>Aquí está el ejemplo con comentarios a continuación que explican cada parte del código:<br>import java.io.*;
import java.util.Scanner;

public class GestionDatosBinarios {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nMenú:");
            System.out.println("1. Añadir una persona");
            System.out.println("2. Mostrar todas las personas");
            System.out.println("3. Salir");
            System.out.print("Elige una opción: ");
            int opcion = scanner.nextInt();
            scanner.nextLine();  // Consumir el salto de línea

            if (opcion == 1) {
                System.out.print("Introduce el nombre: ");
                String nombre = scanner.nextLine();

                System.out.print("Introduce la edad: ");
                int edad = scanner.nextInt();

                System.out.print("Introduce la altura: ");
                float altura = scanner.nextFloat();

                scanner.nextLine();  // Consumir el salto de línea

                System.out.print("¿Está matriculado? (true/false): ");
                boolean matriculado = scanner.nextBoolean();

                scanner.nextLine();  // Consumir el salto de línea

                Persona persona = new Persona(nombre, edad, altura, matriculado);
                escribirPersona(persona);

            } else if (opcion == 2) {
                mostrarPersonas();
            } else {
                break;
            }
        }

        scanner.close();
    }

    public static void escribirPersona(Persona persona) {
        try (DataOutputStream dos = new DataOutputStream(new FileOutputStream("datosPersonas.bin", true))) {
            dos.writeUTF(persona.nombre);
            dos.writeInt(persona.edad);
            dos.writeFloat(persona.altura);
            dos.writeBoolean(persona.matriculado);
            System.out.println("Persona añadida exitosamente.");
        } catch (IOException e) {
            System.err.println("Error al escribir en el archivo: " + e.getMessage());
        }
    }

    public static void mostrarPersonas() {
        try (DataInputStream dis = new DataInputStream(new FileInputStream("datosPersonas.bin"))) {
            while (true) {
                String nombre = dis.readUTF();
                int edad = dis.readInt();
                float altura = dis.readFloat();
                boolean matriculado = dis.readBoolean();

                System.out.println("\nNombre: " + nombre);
                System.out.println("Edad: " + edad);
                System.out.println("Altura: " + altura);
                System.out.println("Matriculado: " + matriculado);
            }
        } catch (EOFException e) {
            // Fin del archivo alcanzado
        } catch (IOException e) {
            System.err.println("Error al leer el archivo: " + e.getMessage());
        }
    }
}

class Persona {
    String nombre;
    int edad;
    float altura;
    boolean matriculado;

    Persona(String nombre, int edad, float altura, boolean matriculado) {
        this.nombre = nombre;
        this.edad = edad;
        this.altura = altura;
        this.matriculado = matriculado;
    }
}
<br>En este programa:<br>
<br>Se crea una clase Persona para almacenar los detalles de una persona.
<br>El método escribirPersona toma un objeto de Persona y escribe sus detalles en un archivo binario.
<br>El método mostrarPersonas lee y muestra todos los detalles de todas las personas en el archivo binario.
<br>Usamos un bucle while (true) en el método main para mantener el programa en ejecución hasta que el usuario decida salir, y dentro del bucle, proporcionamos un menú para que el usuario pueda elegir entre añadir una nueva persona o mostrar todas las personas almacenadas en el archivo binario.
<br>Los métodos de escritura y lectura utilizan DataOutputStream y DataInputStream, respectivamente, para escribir y leer los detalles en/de un archivo binario, y usamos FileOutputStream con el flag true para permitir la escritura adicional en el archivo (en lugar de sobrescribir los datos existentes).<br><br><br><br>En Java, existen varias bibliotecas que facilitan el trabajo con archivos JSON y XML. Vamos a centrarnos en dos de las más populares: Jackson (para JSON) y JAXB (para XML).<br>
<br>Jackson

<br>Descripción: Una biblioteca popular para serializar objetos de Java a JSON y viceversa.
<br>Agregar a tu proyecto: Puedes agregar Jackson a tu proyecto usando Maven o Gradle. Aquí está el ejemplo usando Maven:
&lt;dependency&gt;
   &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
   &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;
   &lt;version&gt;2.12.3&lt;/version&gt;
&lt;/dependency&gt;




<br>JAXB (Java API for XML Binding)

<br>Descripción: Una biblioteca que facilita la conversión entre objetos Java y representaciones XML.
<br>Agregar a tu proyecto: Similar a Jackson, puedes agregar JAXB usando Maven o Gradle. Ejemplo usando Maven:
&lt;dependency&gt;
   &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt;
   &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt;
   &lt;version&gt;2.3.1&lt;/version&gt;
&lt;/dependency&gt;




<br><br>
<br>
Lectura y escritura de archivos JSON con Jackson

<br>Escritura: Para escribir un objeto a un archivo JSON, usamos la clase ObjectMapper y su método writeValue.
<br>Lectura: Para leer un archivo JSON en un objeto, también usamos la clase ObjectMapper pero esta vez con el método readValue.


<br>
Lectura y escritura de archivos XML con JAXB

<br>Escritura: Utilizamos la clase JAXBContext junto con Marshaller para escribir objetos a archivos XML.
<br>Lectura: Para leer un archivo XML en un objeto, utilizamos JAXBContext con Unmarshaller.


<br><br>Ejemplo con Jackson (JSON)<br>import com.fasterxml.jackson.databind.ObjectMapper;

public class JsonExample {
    public static void main(String[] args) {
        ObjectMapper mapper = new ObjectMapper();
        Persona persona = new Persona("Juan", 30, 1.8f, true);

        try {
            // Escribir JSON
            mapper.writeValue(new File("persona.json"), persona);

            // Leer JSON
            Persona personaLeida = mapper.readValue(new File("persona.json"), Persona.class);
            System.out.println("Persona leída desde JSON: " + personaLeida.nombre);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
<br>Ejemplo con JAXB (XML)<br>import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import java.io.File;

public class XmlExample {
    public static void main(String[] args) {
        try {
            JAXBContext context = JAXBContext.newInstance(Persona.class);
            Marshaller marshaller = context.createMarshaller();
            Unmarshaller unmarshaller = context.createUnmarshaller();

            Persona persona = new Persona("Maria", 25, 1.7f, false);

            // Escribir XML
            marshaller.marshal(persona, new File("persona.xml"));

            // Leer XML
            Persona personaLeida = (Persona) unmarshaller.unmarshal(new File("persona.xml"));
            System.out.println("Persona leída desde XML: " + personaLeida.nombre);

        } catch (JAXBException e) {
            e.printStackTrace();
        }
    }
}
<br>En ambos ejemplos, creamos una instancia de Persona y luego la escribimos en un archivo usando Jackson (para JSON) o JAXB (para XML). Posteriormente, leemos el archivo creado y mostramos el nombre de la persona leída en la consola.<br>A continuación, dos ejemplos más elaborados para trabajar con múltiples objetos Persona y almacenarlos en archivos JSON y XML. En estos ejemplos, crearemos una lista de objetos Persona y le permitiremos al usuario agregar nuevas personas a la lista antes de escribir toda la lista en un archivo. También podrán leer la lista completa de personas desde el archivo.<br><br>import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class JsonExample {

    public static void main(String[] args) {
        List&lt;Persona&gt; personas = new ArrayList&lt;&gt;();
        ObjectMapper mapper = new ObjectMapper();
        Scanner scanner = new Scanner(System.in);

        try {
            // Leer las personas existentes desde JSON
            File file = new File("personas.json");
            if (file.exists()) {
                personas = mapper.readValue(file, new TypeReference&lt;List&lt;Persona&gt;&gt;() {});
            }

            // Añadir una nueva persona a la lista
            System.out.print("Introduce el nombre: ");
            String nombre = scanner.nextLine();
            System.out.print("Introduce la edad: ");
            int edad = scanner.nextInt();
            System.out.print("Introduce la altura: ");
            float altura = scanner.nextFloat();
            System.out.print("¿Está matriculado? (true/false): ");
            boolean matriculado = scanner.nextBoolean();

            personas.add(new Persona(nombre, edad, altura, matriculado));

            // Escribir la lista de personas en JSON
            mapper.writeValue(file, personas);

            // Leer y mostrar todas las personas desde JSON
            personas = mapper.readValue(file, new TypeReference&lt;List&lt;Persona&gt;&gt;() {});
            for (Persona persona : personas) {
                System.out.println(persona);
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
<br><br>import javax.xml.bind.*;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class XmlExample {

    public static void main(String[] args) {
        List&lt;Persona&gt; personas = new ArrayList&lt;&gt;();
        Scanner scanner = new Scanner(System.in);

        try {
            JAXBContext context = JAXBContext.newInstance(PersonasWrapper.class);
            Marshaller marshaller = context.createMarshaller();
            Unmarshaller unmarshaller = context.createUnmarshaller();

            // Leer las personas existentes desde XML
            File file = new File("personas.xml");
            if (file.exists()) {
                PersonasWrapper wrapper = (PersonasWrapper) unmarshaller.unmarshal(file);
                personas = wrapper.getPersonas();
            }

            // Añadir una nueva persona a la lista
            System.out.print("Introduce el nombre: ");
            String nombre = scanner.nextLine();
            System.out.print("Introduce la edad: ");
            int edad = scanner.nextInt();
            System.out.print("Introduce la altura: ");
            float altura = scanner.nextFloat();
            System.out.print("¿Está matriculado? (true/false): ");
            boolean matriculado = scanner.nextBoolean();

            personas.add(new Persona(nombre, edad, altura, matriculado));

            // Escribir la lista de personas en XML
            PersonasWrapper wrapper = new PersonasWrapper();
            wrapper.setPersonas(personas);
            marshaller.marshal(wrapper, file);

            // Leer y mostrar todas las personas desde XML
            wrapper = (PersonasWrapper) unmarshaller.unmarshal(file);
            for (Persona persona : wrapper.getPersonas()) {
                System.out.println(persona);
            }

        } catch (JAXBException e) {
            e.printStackTrace();
        }
    }

    // Clase auxiliar para envolver la lista de personas en XML
    public static class PersonasWrapper {
        private List&lt;Persona&gt; personas;

        @XmlElement(name = "persona")
        public List&lt;Persona&gt; getPersonas() {
            return personas;
        }

        public void setPersonas(List&lt;Persona&gt; personas) {
            this.personas = personas;
        }
    }
}
<br><br>
<br>En ambos ejemplos, hemos incluido una parte donde el usuario puede introducir los detalles de una nueva persona para agregarla a la lista de personas.
<br>Se ha añadido una clase PersonasWrapper en el ejemplo de JAXB para ayudar con la serialización de una lista de objetos Persona.
<br>Se debe crear una clase Persona que tenga los campos nombre, edad, altura, y matriculado, junto con los correspondientes métodos getter y setter.
<br>La primera vez que se ejecute, no habrá ningún archivo para leer, así que se creará una nueva lista. En ejecuciones posteriores, se leerá la lista de personas desde el archivo antes de agregar una nueva persona a la lista.
<br>Después de agregar una nueva persona a la lista, se escribe la lista completa en el archivo antes de leerla nuevamente y mostrarla en la consola.
<br><br><br>En esta sección, se hablará sobre cómo manejar excepciones durante las operaciones de entrada/salida (I/O) en Java.<br>Teoría: (10 minutos)<br>####1. Importancia del Manejo de Excepciones: Discusión sobre por qué es crucial manejar las excepciones adecuadamente, especialmente en operaciones de I/O.<br>El manejo adecuado de excepciones, particularmente en operaciones de entrada/salida (I/O), es un componente vital en el desarrollo de aplicaciones robustas y confiables por varias razones:<br>
<br>
Prevención de Fallos Catastróficos: Las operaciones de I/O están inherentemente predispuestas a errores debido a varias razones (archivos que no se encuentran, problemas de red, permisos insuficientes, etc.). Un manejo de excepciones adecuado permite que la aplicación lide con estos problemas de una manera controlada, evitando fallos inesperados que pueden resultar en la pérdida de datos o en un cierre abrupto de la aplicación.

<br>
Mejor Experiencia del Usuario: Cuando ocurre un error, es posible informar al usuario sobre el problema de una manera más amigable y legible, en lugar de dejar que la aplicación se cierre o se quede en un estado indefinido.

<br>
Facilita la Depuración y el Mantenimiento: Manejar excepciones de forma explícita permite registrar información detallada sobre los problemas que ocurrieron, lo que facilita la identificación y resolución de bugs durante la fase de desarrollo y mantenimiento.

<br>
Recursos y Limpiado Ordenado: El manejo de excepciones proporciona una oportunidad para liberar recursos que fueron adquiridos antes de que ocurriera la excepción, evitando así posibles fugas de memoria y otros problemas relacionados con la gestión de recursos.

<br>
Seguridad: Las operaciones de I/O a menudo implican trabajar con datos externos, que pueden ser una fuente de vulnerabilidades de seguridad. Un manejo adecuado de las excepciones puede ayudar a prevenir ciertos tipos de ataques (por ejemplo, la manipulación de archivos).

<br>
Control de Flujo: Aunque las excepciones deben usarse para condiciones excepcionales (y no como una forma general de control de flujo), pueden ofrecer una manera de separar la lógica de error de la lógica normal, resultando en un código más limpio y mantenible.

<br><br>En Java, las operaciones de I/O suelen lanzar diversas excepciones que heredan de la clase madre IOException. Aquí está una explicación detallada de algunas de las clases de excepciones más comunes que podrías encontrar:<br><br>
<br>Descripción: Es la clase general de excepciones producidas por operaciones fallidas o interrumpidas de I/O. 
<br>Causas Comunes: Puede ser lanzada por varias razones, incluyendo fallos de sistema, operaciones de red fallidas, interrupciones de streams de I/O, etc.
<br>Cómo Manejarlo: Dependiendo de la naturaleza de tu aplicación, podrías manejar IOException registrando el error y mostrando un mensaje amigable al usuario.
<br><br>
<br>Descripción: Una subclase de IOException, lanzada cuando un intento de abrir el archivo denotado por una ruta especificada falla.
<br>Causas Comunes: El archivo no existe o no hay permisos suficientes para acceder al archivo.
<br>Cómo Manejarlo: Este tipo de excepción puede ser manejada proporcionando un mensaje detallado sobre la razón del fallo, y tal vez dando una oportunidad al usuario para especificar una nueva ruta de archivo.
<br><br>El bloque try-catch-finally es una construcción que permite manejar excepciones de una manera controlada y predecible. A continuación, describo cada uno de estos bloques y cómo utilizarlos:<br><br>
<br>Descripción: Este bloque contiene el código que puede lanzar una excepción. Es obligatorio que vaya seguido de al menos un bloque catch o un bloque finally.
<br>Uso: Envolvemos el código que puede lanzar una excepción dentro de un bloque try.
<br><br>
<br>Descripción: Este bloque contiene el código que se ejecutará si se lanza una excepción dentro del bloque try asociado. Puedes tener múltiples bloques catch para manejar diferentes tipos de excepciones.
<br>Uso: Usamos bloques catch para definir cómo manejar diferentes tipos de excepciones que pueden ser lanzadas dentro del bloque try.
<br><br>
<br>Descripción: Este bloque contiene código que se ejecutará independientemente de si una excepción fue lanzada o no. Es opcional pero, si está presente, siempre se ejecuta después de los bloques try/catch.
<br>Uso: Usamos bloques finally para liberar recursos que fueron adquiridos antes de la ejecución del bloque try, como cerrar conexiones a bases de datos o streams de archivos.
<br><br>import java.io.*;

public class Main {
    public static void main(String[] args) {
        File file = new File("path/to/file.txt");

        try {
            FileReader fileReader = new FileReader(file);
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            String line = bufferedReader.readLine();
            System.out.println(line);
        } catch (FileNotFoundException e) {
            System.err.println("Archivo no encontrado: " + e.getMessage());
        } catch (IOException e) {
            System.err.println("Error de I/O: " + e.getMessage());
        } finally {
            System.out.println("Este bloque 'finally' siempre se ejecuta.");
        }
    }
}
<br>En este ejemplo, el bloque try contiene código que puede lanzar excepciones FileNotFoundException o IOException. Estas excepciones son manejadas por los bloques catch correspondientes, y el bloque finally se ejecuta al final, independientemente de si se lanzó una excepción o no.<br>Práctica: (5 minutos)<br>
<br>Ejemplo Práctico: Creación de un ejemplo simple de código Java que demuestre el manejo de excepciones durante una operación de lectura/escritura de un archivo.
<br>import java.io.*;

public class ExceptionHandlingExample {
    public static void main(String[] args) {
        FileReader fr = null;

        try {
            // Intentar leer un archivo que no existe puede lanzar una FileNotFoundException
            fr = new FileReader("archivo_no_existente.txt");
        } catch (FileNotFoundException e) {
            // Capturar y manejar la FileNotFoundException
            System.out.println("Error: El archivo no pudo ser encontrado.");
            e.printStackTrace();
        } finally {
            // Cerrar recursos en el bloque finally
            if (fr != null) {
                try {
                    fr.close();
                } catch (IOException e) {
                    // Capturar y manejar IOException durante el cierre del FileReader
                    System.out.println("Error: No se pudo cerrar el archivo.");
                    e.printStackTrace();
                }
            }
        }
    }
}
<br><br>En esta sección, se hablará sobre algunas de las buenas prácticas que deben seguirse mientras se trabaja con operaciones de acceso a datos en Java.<br>Teoría: (10 minutos)<br>
<br>Cierre de Recursos: Discusión sobre la importancia de cerrar los recursos después de su uso para evitar fugas de memoria.
<br>Utilizar Try-with-Resources: Explicación de cómo utilizar la declaración try-with-resources en Java para gestionar recursos de forma más eficiente.
<br>Manipulación de Datos Sensibles: Charla sobre cómo manejar correctamente los datos sensibles durante las operaciones de acceso a datos.
<br>Práctica: (5 minutos)<br>
<br>Ejemplo Práctico: Creación de un ejemplo simple de código Java que demuestre el uso de try-with-resources.
<br>import java.io.*;

public class BestPracticesExample {
    public static void main(String[] args) {
        // Usando try-with-resources para gestionar recursos de forma eficiente
        try (FileReader fr = new FileReader("archivo_existente.txt"); 
             BufferedReader br = new BufferedReader(fr)) {

            String linea;
            while ((linea = br.readLine()) != null) {
                System.out.println(linea);
            }
        } catch (FileNotFoundException e) {
            System.out.println("Error: El archivo no pudo ser encontrado.");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println("Error: Se produjo un error de I/O.");
            e.printStackTrace();
        }
    }
}
<br>Esta sección proporciona una visión general de las buenas prácticas y del manejo de excepciones en el acceso a datos, proporcionando tanto conocimientos teóricos como prácticos a los estudiantes.<br><br><br>En esta sección, los estudiantes tendrán la oportunidad de consolidar todo lo aprendido en la sesión mediante el desarrollo de un pequeño proyecto práctico. Aquí es una sugerencia para el proyecto:<br>Proyecto Práctico: Sistema de Gestión de Datos Personales<br>
<br>Descripción del Proyecto: Desarrollar una pequeña aplicación en Java que permita al usuario ingresar, almacenar y recuperar detalles personales (como nombre, edad, dirección) en un archivo (puede ser texto, binario, JSON o XML).
<br>Requisitos:

<br>Crear una clase Persona que tenga los atributos necesarios (nombre, edad, dirección).
<br>Implementar métodos para leer y escribir datos en un archivo (utilizando las técnicas aprendidas en la clase).
<br>Manejar adecuadamente las excepciones que puedan ocurrir durante las operaciones de I/O.


<br><br>Enunciado: Como parte de un pequeño sistema de gestión bibliotecaria, su tarea es crear un programa en Java que permita al usuario registrar nuevos libros en un archivo de texto. Cada libro debe tener un título, autor y año de publicación. El programa debe ser capaz de realizar las siguientes operaciones:<br>   a. Añadir un nuevo libro al archivo.<br>   b. Listar todos los libros registrados en el archivo.<br>   c. Búsqueda de libros por autor o título.<br>Objetivo: Familiarizarse con las operaciones básicas de lectura y escritura de archivos de texto en Java, así como con el manejo adecuado de excepciones.<br><br><br>Enunciado: Como parte de una aplicación de gestión de empleados, debe desarrollar un sistema que permita almacenar y recuperar detalles de empleados (como nombre, edad, y puesto) en un archivo binario. El sistema deberá permitir:<br>   a. Registrar un nuevo empleado en el archivo binario.<br>   b. Listar todos los empleados almacenados en el archivo.<br>   c. Buscar empleados por nombre o puesto.<br>Objetivo: Comprender cómo trabajar con archivos binarios en Java, almacenando objetos complejos y recuperándolos con éxito del archivo.<br><br><br>Enunciado: Se le asigna la tarea de crear una aplicación de gestión de inventario que pueda almacenar y recuperar detalles de productos (como código de producto, nombre y precio) en archivos JSON y XML. La aplicación deberá tener las siguientes funcionalidades:<br>   a. Añadir un nuevo producto al inventario (almacenado en archivos JSON y XML).<br>   b. Visualizar la lista de todos los productos almacenados en los archivos.<br>   c. Buscar productos específicos por código o nombre.<br>Objetivo: Aprender a trabajar con bibliotecas externas en Java para crear y leer archivos JSON y XML, familiarizándose con el proceso de serialización y deserialización de objetos.<br><br><br>
<br>
**"Acceso a Datos": Libro de clase por Carlos Alberto Cortijo Bon.

<br>
"Java: The Complete Reference" por Herbert Schildt

<br>Un libro completo que abarca todos los aspectos de la programación en Java, incluido el acceso a datos.


<br>
"Clean Code: A Handbook of Agile Software Craftsmanship" por Robert C. Martin

<br>Un libro esencial que enseña las buenas prácticas de codificación, muy útil para escribir código más limpio y mantenible.


<br><br>
<br> Términos Clave: "Acceso a datos", "Archivos de Texto",  "Archivos Binarios", "JSON", "XML".
<br><br>
<br>
Documentación Oficial de Java: <a data-tooltip-position="top" aria-label="https://docs.oracle.com/javase/8/docs/" rel="noopener nofollow" class="external-link" href="https://docs.oracle.com/javase/8/docs/" target="_blank">Enlace a la documentación oficial de Java</a>

<br>Un recurso valioso para aprender más sobre las clases y métodos disponibles en Java para el acceso a datos.


<br>
Coursera (Programación en Java): <a data-tooltip-position="top" aria-label="https://www.coursera.org/" rel="noopener nofollow" class="external-link" href="https://www.coursera.org/" target="_blank">Cursos en Coursera</a>

<br>Plataforma con varios cursos de Java que cubren desde conceptos básicos hasta avanzados, incluido el acceso a datos.


<br>
Stack Overflow: <a data-tooltip-position="top" aria-label="https://stackoverflow.com/questions/tagged/java" rel="noopener nofollow" class="external-link" href="https://stackoverflow.com/questions/tagged/java" target="_blank">Stack Overflow - Java</a>

<br>Un foro de comunidad activa donde se pueden hacer preguntas específicas y obtener respuestas de expertos en la comunidad de Java.


]]></description><link>acceso-a-datos\acd-main\tema-1-archivos\tema1-archivos.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Tema 1 - Archivos/Tema1-Archivos.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[Justificación DAO. Alta Cohesión y bajo Acoplamiento.]]></title><description><![CDATA[ 
 <br>En el contexto de la programación orientada a objetos (POO) y desarrollo modular, "acoplamiento" y "cohesión" son conceptos clave para diseñar sistemas más mantenibles, escalables y comprensibles. Aquí está una breve descripción de cada uno:<br><br>
<br>
Definición: La cohesión se refiere a la medida en que las responsabilidades y funcionalidades de una clase o módulo están centradas en un único propósito claro. Un módulo cohesivo realiza un conjunto pequeño y bien definido de operaciones relacionadas entre sí.

<br>
Tipos de Cohesión: Puede clasificarse en varios niveles, desde la cohesión funcional (el nivel más alto, donde todas las funciones están directamente relacionadas con el objetivo principal del módulo) hasta la cohesión lógica (donde las funciones están relacionadas solo a través de una categorización lógica) o cohesión coincidente (el nivel más bajo, donde las funciones no tienen relación alguna).

<br>
Beneficios: Facilita la comprensión, mantenimiento y reutilización de código, además de favorecer la modularidad del sistema.

<br><br>
<br>
Definición: El acoplamiento es una indicación del nivel de dependencia entre módulos o clases. Un bajo acoplamiento indica que los módulos o clases son independientes entre sí, mientras que un alto acoplamiento señala una fuerte dependencia.

<br>
Tipos de Acoplamiento: Similar a la cohesión, el acoplamiento también puede clasificarse en varios niveles, desde el acoplamiento de datos (el nivel más bajo, donde los módulos comparten datos pero no están entrelazados) hasta el acoplamiento de control o el acoplamiento contenido (niveles más altos, donde un módulo controla el comportamiento de otro o está contenido dentro de otro).

<br>
Beneficios de un Bajo Acoplamiento: Facilita la modularidad, facilitando así el mantenimiento, la prueba y la reutilización del código. También permite que los módulos se desarrollen y evolucionen de forma independiente.

<br>Prácticas para Alcanzar Bajo Acoplamiento y Alta Cohesión:<br>
<br>
Encapsulación: Asegurar que cada módulo o clase encapsule correctamente sus datos y comportamientos internos.

<br>
Principio de Responsabilidad Única (SRP): Cada módulo o clase debe tener una única razón para cambiar, lo que significa que debe encargarse de una única responsabilidad.

<br>
Diseño de Interfaces Claras: Diseñar interfaces claras y bien definidas para cada módulo, permitiendo una comunicación más clara y desacoplada entre módulos.

<br>
Uso Adecuado de Patrones de Diseño: Utilizar patrones de diseño que promuevan la separación de preocupaciones y faciliten la alta cohesión y el bajo acoplamiento.

<br>Implementando estos conceptos y prácticas se construyen sistemas más robustos, flexibles y mantenibles.]]></description><link>acceso-a-datos\acd-main\tema-2-bases-de-datos-relacionales\jdbc\dao\justificación-dao.-alta-cohesión-y-bajo-acoplamiento..html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Tema 2 - Bases de Datos Relacionales/JDBC/DAO/Justificación DAO. Alta Cohesión y bajo Acoplamiento..md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[1. Introducción Capa Service]]></title><description><![CDATA[ 
 <br>Las "5 W" hacen referencia a las palabras clave en inglés que empiezan por la letra "W": "Who" (¿Quién?), "What" (¿Qué?), "When" (¿Cuándo?), "Where" (¿Dónde?) y "Why" (¿Por qué?). Estas preguntas se utilizan para abordar problemas o situaciones desde diferentes ángulos. Vamos a aplicarlas a la idea de una clase Service en el diseño de aplicaciones orientadas a objetos, especialmente en Java.<br>
<br>
¿Qué? (What?)

<br>
Descripción: Una clase Service en el contexto del diseño de aplicaciones orientadas a objetos, a menudo se refiere a un componente que encapsula una lógica de negocio específica o un conjunto de operaciones. No suele mantener estado y actúa como intermediario entre la lógica de presentación y la lógica de datos.

<br>
Ejemplo Java:
public class UserService {
    private UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public User findUserById(Long id) {
        return userRepository.findById(id);
    }
}




<br>
¿Por qué? (Why?)

<br>Motivación: Las clases Service proporcionan una capa de abstracción que separa la lógica de negocio de otras preocupaciones de la aplicación, como la interacción con bases de datos o la presentación de datos al usuario. Esto facilita la mantenibilidad, testabilidad y reutilización del código.


<br>
¿Quién? (Who?)

<br>
Interacción: Por lo general, las clases Service son utilizadas por controladores o clases de presentación/UI. También pueden ser invocadas por otros servicios, creando una cadena de llamadas para completar operaciones más complejas.

<br>
Ejemplo Java:
public class UserController {
    private UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    public void displayUser(Long id) {
        User user = userService.findUserById(id);
        System.out.println(user.toString());
    }
}




<br>
¿Cuándo? (When?)

<br>Uso: Las clases Service se invocan cuando es necesario realizar una operación relacionada con la lógica de negocio, como crear, leer, actualizar o eliminar recursos, o cuando se necesita realizar cálculos o transformaciones antes de presentar datos al usuario o guardarlos.


<br>
¿Dónde? (Where?)

<br>Ubicación: En el diseño típico de una aplicación Java basada en capas, las clases Service se encuentran en la capa de servicio, que se sitúa entre la capa de presentación (o controladores) y la capa de acceso a datos (repositorios o DAOs).


]]></description><link>acceso-a-datos\acd-main\tema-2-bases-de-datos-relacionales\jdbc\service\1.-introducción-capa-service.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Tema 2 - Bases de Datos Relacionales/JDBC/SERVICE/1. Introducción Capa Service.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[2. DAO + Service]]></title><description><![CDATA[ 
 <br>Se presentara a continuación una estructura simple basada en el patrón de diseño DAO (Data Access Object) junto con una capa de servicio para lograr cohesión y bajo acoplamiento. Esta estructura es bastante común en aplicaciones Java que no utilizan ORMs:<br>
<br>Modelo (Entidad):

<br>Representa el objeto de dominio.


<br>public class Alumno {
    private Long id;
    private String nombre;
    private String apellido;
    // ... getters, setters y posiblemente otros atributos y métodos.
}
<br>
<br>DAO (Data Access Object):

<br>Encapsula la lógica específica de acceso a datos. En este caso, para MySQL.


<br>public interface AlumnoDAO {
    Alumno findById(Long id);
    List&lt;Alumno&gt; findAll();
    void save(Alumno alumno);
    void update(Alumno alumno);
    void delete(Long id);
}

public class AlumnoDAOImpl implements AlumnoDAO {
    // Aquí iría la implementación usando JDBC para conectar con MySQL.
}
<br>
<br>Service (Servicio):

<br>Proporciona una interfaz a nivel de negocio. Es decir, si hay alguna lógica específica que deba realizarse antes de guardar, actualizar, etc., se manejaría aquí.


<br>public class AlumnoService {
    private AlumnoDAO alumnoDAO;

    public AlumnoService(AlumnoDAO alumnoDAO) {
        this.alumnoDAO = alumnoDAO;
    }

    public Alumno findAlumnoById(Long id) {
        return alumnoDAO.findById(id);
    }
    
    // ... otros métodos que invoquen al DAO
}
<br>
<br>Factory o Singleton (opcional):

<br>Para gestionar y reutilizar conexiones a la base de datos.


<br>public class ConnectionFactory {
    public static Connection getConnection() {
        // Retornar una conexión a MySQL
    }
}
<br>Con esta estructura:<br>
<br>Se mantiene cohesión ya que cada clase tiene una responsabilidad bien definida.
<br>Se minimiza el acoplamiento porque, por ejemplo, si decides cambiar la implementación de la base de datos, sólo necesitas modificar AlumnoDAOImpl y nada más.
<br>El uso de interfaces para el DAO también ayuda en la separación de responsabilidades y permite la posibilidad de implementaciones alternas en el futuro, si fuese necesario (por ejemplo, si quisieras tener una implementación que persista en memoria para pruebas unitarias).<br>Ten en cuenta que esta estructura es bastante simplificada y podría requerir ajustes específicos dependiendo de la complejidad y necesidades de tu aplicación. Por ejemplo, la gestión de conexiones puede hacerse más robusta con un pool de conexiones, o podrías querer agregar manejo de transacciones, etc.<br><br>Son dos patrones de diseño de software para gestionar la creación de objetos. En este caso los aplicaremos para la creación de objetos que gestionen la conexión a la base de datos:<br><br>El patrón Singleton garantiza que una clase tenga solo una instancia y proporciona un punto de acceso global a esa instancia. En el contexto de una conexión a la base de datos, el patrón Singleton podría usarse para asegurarse de que haya solo una conexión compartida.<br>import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DatabaseConnection {
    private static Connection connection;
    private static final String DB_URL = "jdbc:mysql://localhost:3306/miBaseDeDatos";
    private static final String USER = "usuario";
    private static final String PASS = "contraseña";

    private DatabaseConnection() {}

    public static Connection getConnection() {
        if (connection == null) {
            synchronized (DatabaseConnection.class) {
                if (connection == null) {
                    try {
                        connection = DriverManager.getConnection(DB_URL, USER, PASS);
                    } catch (SQLException e) {
                        throw new RuntimeException("Error al conectar a la base de datos", e);
                    }
                }
            }
        }
        return connection;
    }
}
<br>El método getConnection proporciona la conexión. Si la conexión no existe, la crea. El bloque synchronized garantiza que, en un entorno multihilo, solo un hilo pueda entrar en ese bloque a la vez, lo que previene la creación accidental de múltiples conexiones.<br><br>El patrón Factory es un método para crear objetos en una superclase, pero permite que las subclases alteren el tipo de objetos creados. En el contexto de conexiones a bases de datos, un Factory podría ser útil si deseas cambiar entre diferentes bases de datos o configuraciones de conexión.<br>import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class ConnectionFactory {
    private static final String DB_URL = "jdbc:mysql://localhost:3306/miBaseDeDatos";
    private static final String USER = "usuario";
    private static final String PASS = "contraseña";

    public static Connection createConnection() {
        Connection connection;
        try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (SQLException e) {
            throw new RuntimeException("Error al conectar a la base de datos", e);
        }
        return connection;
    }
}
<br>El método createConnection siempre proporciona una nueva conexión cuando se llama. Esto puede ser útil en aplicaciones que requieran múltiples conexiones a la base de datos en lugar de una única conexión compartida.<br>Cabe destacar que ambas aproximaciones son simples y, en un escenario real, podrías considerar usar un pool de conexiones para mejorar el rendimiento y la gestión de las conexiones.]]></description><link>acceso-a-datos\acd-main\tema-2-bases-de-datos-relacionales\jdbc\service\2.-dao-+-service.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Tema 2 - Bases de Datos Relacionales/JDBC/SERVICE/2. DAO + Service.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[3. Operaciones en capa Service]]></title><description><![CDATA[ 
 <br>La capa de servicio (clases Service) es a menudo el lugar donde reside la lógica de negocio de la aplicación. Aquí hay algunos ejemplos prácticos relacionados con la clase Alumno y operaciones comunes:<br>
<br>
Validaciones:

<br>Antes de guardar o actualizar un alumno, es posible que desees validar ciertos campos.

public void guardarAlumno(Alumno alumno) {
    if (alumno.getNombre() == null || alumno.getNombre().isEmpty()) {
        throw new BusinessException("El nombre del alumno no puede estar vacío.");
    }
    // Más validaciones...
    alumnoDAO.save(alumno);
}


<br>
Cálculos o Transformaciones:

<br>Por ejemplo, si el alumno tiene una fecha de nacimiento, podrías querer calcular su edad y añadirla como un campo derivado antes de guardarlo.

public void guardarAlumnoConEdad(Alumno alumno) {
    int edad = calcularEdadDesdeFechaNacimiento(alumno.getFechaNacimiento());
    alumno.setEdad(edad);
    alumnoDAO.save(alumno);
}


<br>
Interacción con otras Entidades:

<br>Supongamos que cada vez que un alumno se matricula, también necesitas actualizar un registro en otra entidad, como Clase o Curso.

public void matricularAlumnoEnCurso(Alumno alumno, Curso curso) {
    if (!curso.tieneCuposDisponibles()) {
        throw new BusinessException("No hay cupos disponibles en el curso.");
    }
    curso.addAlumno(alumno);
    alumnoDAO.save(alumno);
    cursoDAO.update(curso);
}


<br>
Manejo de Historial o Auditoría:

<br>Podrías querer guardar un registro de auditoría cada vez que un alumno se actualiza o elimina.

public void actualizarAlumno(Alumno alumno) {
    Alumno antiguo = alumnoDAO.findById(alumno.getId());
    alumnoDAO.update(alumno);
    registroAuditoriaService.guardarCambio("Alumno", antiguo, alumno);
}


<br>
Lógica Condicional:

<br>Si un alumno tiene ciertas características, es posible que desees realizar acciones específicas.

public void procesarGraduacion(Alumno alumno) {
    if (alumno.cumpleRequisitosGraduacion()) {
        alumno.setEstado(EstadoAlumno.GRADUADO);
        // Puedes enviar una notificación, por ejemplo
        notificacionService.enviarNotificacionGraduacion(alumno);
    }
    alumnoDAO.update(alumno);
}


<br>
Integraciones Externas:

<br>Al guardar o procesar un alumno, podrías querer comunicarte con un servicio externo.

public void guardarAlumnoYNotificar(Alumno alumno) {
    alumnoDAO.save(alumno);
    servicioExternoNotificaciones.enviarConfirmacionRegistro(alumno.getEmail());
}


<br>Estos son solo algunos ejemplos prácticos de las tareas que se pueden manejar en la capa de servicio en relación con la lógica de negocio. La idea es que la capa de servicio actúa como orquestador, garantizando que todas las operaciones relacionadas se realicen de manera coherente y segura. Por supuesto, cada aplicación y dominio tiene su propia lógica de negocio única, por lo que los detalles específicos pueden variar.]]></description><link>acceso-a-datos\acd-main\tema-2-bases-de-datos-relacionales\jdbc\service\3.-operaciones-en-capa-service.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Tema 2 - Bases de Datos Relacionales/JDBC/SERVICE/3. Operaciones en capa Service.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[0. Índice contenidos Framework Spring]]></title><description><![CDATA[ 
 <br><br><br>
<br>Sesión 1: Introducción a Spring

<br>Orígenes y filosofía de Spring
<br>Comparación con otros frameworks Java
<br>Ecosistema Spring: Spring Framework, Spring Boot, Spring Cloud, etc.


<br>Sesión 2: Configuración y Setup

<br>Instalación y configuración del entorno
<br>Creación de un proyecto básico con Spring Initializr
<br>Estructura de un proyecto Spring y convenciones


<br>Sesión 3: Inyección de Dependencias

<br>Conceptos de Inyección de Dependencias
<br>Uso de anotaciones básicas (@Component, @Autowired)
<br>Creación y gestión de Beans


<br><br>
<br>Sesión 1: Profundización en Spring Core

<br>El contenedor de Spring y el ciclo de vida de los beans
<br>Alcance de los beans y gestión de dependencias


<br>Sesión 2: Introducción a Spring MVC

<br>Arquitectura MVC y su implementación en Spring
<br>Creación de un controlador básico
<br>Mapeo de solicitudes y respuestas


<br>Sesión 3: Vistas y Thymeleaf

<br>Integración de Thymeleaf con Spring MVC
<br>Creación de vistas y plantillas
<br>Manejo de datos en la vista


<br><br>
<br>Sesión 1: Spring Data JPA

<br>Configuración de Spring Data JPA
<br>Creación de entidades y repositorios
<br>Operaciones CRUD básicas


<br>Sesión 2: Transacciones y Consultas

<br>Gestión de transacciones en Spring
<br>Creación y ejecución de consultas personalizadas
<br>Uso de Query Methods y @Query


<br>Sesión 3: Integración con Maven

<br>Repaso de Maven en el contexto de Spring
<br>Gestión de dependencias y plugins
<br>Buenas prácticas en la construcción de proyectos


<br><br>
<br>Sesión 1: Introducción a Spring Boot

<br>Conceptos y ventajas de Spring Boot
<br>Creación de una aplicación Spring Boot
<br>Autoconfiguración y propiedades externas


<br>Sesión 2: Desarrollo de Microservicios

<br>Principios de microservicios
<br>Creación de un microservicio simple con Spring Boot
<br>Comunicación entre microservicios


<br>Sesión 3: Spring Cloud y Servicios Distribuidos

<br>Introducción a Spring Cloud
<br>Configuración y descubrimiento de servicios
<br>Balanceo de carga y tolerancia a fallos


<br><br>
<br>Sesión 1: Spring Security

<br>Fundamentos de seguridad en aplicaciones web
<br>Configuración y uso de Spring Security
<br>Autenticación y autorización


<br>Sesión 2: Testing en Spring

<br>Principios de testing en Spring
<br>Uso de Spring Boot Test
<br>Creación de tests para repositorios y controladores


<br>Sesión 3: Integración y Pruebas de Fin a Fin

<br>Pruebas de integración en Spring
<br>Testing de microservicios
<br>Herramientas y estrategias para pruebas de fin a fin


<br><br>
<br>Sesión 1: Aspectos Avanzados de Spring

<br>Programación orientada a aspectos (AOP) en Spring
<br>Manejo de eventos y mensajería


<br>Sesión 2: Spring Reactive y WebFlux

<br>Introducción a la programación reactiva
<br>Spring WebFlux y su integración con Spring MVC


<br>Sesión 3: Proyecto Final

<br>Planificación y esquema del proyecto final
<br>Trabajo en clase y consultas
<br>Presentación de proyectos y retroalimentación


]]></description><link>acceso-a-datos\acd-main\tema-4-spring\0.-índice-contenidos-framework-spring.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Tema 4 - Spring/0. Índice contenidos Framework Spring.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[1. Clase Introducción al Framework Spring]]></title><description><![CDATA[ 
 <br><br><br><br>Spring fue creado para abordar la complejidad del desarrollo empresarial en Java. Su filosofía principal es el control de inversión (IoC), facilitando la gestión de dependencias y promoviendo un código más limpio y modular.<br><br>A diferencia de frameworks como Java EE, Spring ofrece una configuración más sencilla y una mayor flexibilidad. Su enfoque modular permite a los desarrolladores usar solo lo que necesitan, sin estar atados a un contenedor de aplicaciones pesado.<br><br>El ecosistema de Spring incluye:<br>
<br>Spring Framework: Núcleo para la inyección de dependencias y la configuración.
<br>Spring Boot: Simplifica la creación de aplicaciones independientes.
<br>Spring Cloud: Herramientas para sistemas distribuidos (ej., configuración centralizada, registro de servicios).
<br><br>El flujo de control en un programa que utiliza el framework Spring se maneja principalmente a través del contenedor de Spring (ApplicationContext). Este contenedor crea y gestiona objetos (beans), inyecta dependencias y permite la configuración declarativa del comportamiento del programa. Spring también ofrece varios módulos para tareas específicas como transacciones, seguridad, y acceso a datos. A través de estos módulos y del contenedor, Spring toma el control del flujo de la aplicación, permitiendo que el código del usuario se concentre en la lógica del negocio mientras el framework maneja aspectos transversales como la gestión de transacciones o la seguridad (esto lo lleva a cabo mediante el paradigma de la programación orientada a aspectos AOP).<br>El contenedor de Spring es el núcleo del framework Spring y es responsable de la creación, configuración y gestión de los beans (objetos que forman parte de nuestra aplicación). Los beans son objetos gestionados por el contenedor de Spring que forman la columna vertebral de tu aplicación y que están configurados en el archivo de configuración de Spring. Los beans se crean según las definiciones proporcionadas por ti en la configuración (Spring proporciona varias formas de configurar beans, incluyendo archivos de propiedades, anotaciones y XML), y el contenedor los inyecta donde sean necesarios, lo que permite una separación clara entre la configuración y la lógica del negocio. Esto promueve un código más limpio, modular y fácil de mantener.<br><br>Vamos a trabajar dos maneras complementarias de configuración, mediante el archivo application.properties y mediante clases de Java con la anotación @Configuration.<br>El archivo application.properties es sencillo y directo para configuraciones básicas, mientras que las clases de configuración ofrecen mayor flexibilidad y permiten una configuración programática más compleja.<br>
<br>Ejemplo archivo  application.properties:
<br>spring.datasource.url=jdbc:mysql://localhost:3306/mydb
spring.datasource.username=myuser
spring.datasource.password=mypassword
<br>
<br>Ejemplo de clase de Java con la anotación @Configuration llamada AppConfig en la que se va a combinar el uso de el application.properties mostrado anteriormente:
<br>@Configuration
public class AppConfig {

    @Value("${spring.datasource.url}")
    private String datasourceUrl;

    @Value("${spring.datasource.username}")
    private String datasourceUsername;

    @Value("${spring.datasource.password}")
    private String datasourcePassword;

    @Bean
    public DataSource dataSource() {
        DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setUrl(datasourceUrl);
        dataSource.setUsername(datasourceUsername);
        dataSource.setPassword(datasourcePassword);
        return dataSource;
    }
}
<br>En este ejemplo, AppConfig obtiene valores de propiedades y define un bean DataSource configurado con estos valores.<br>Los valores de las variables datasourceUrl, datasourceUsername y datasourcePassword provienen del archivo application.properties. La anotación @Value en Spring se utiliza para inyectar valores desde archivos de propiedades en campos de clases. Por lo tanto, cuando el contenedor de Spring inicializa AppConfig, busca las propiedades spring.datasource.url, spring.datasource.username y spring.datasource.password en el archivo application.properties, y luego inyecta estos valores en las variables correspondientes de la clase AppConfig.<br>Cuando el ApplicationContext (conjunto de objetos/clases de la aplicación gestionados) de Spring se carga/configura utilizando anotaciones se suele emplear una de las siguientes formas:<br>
<br>
Usando @Configuration: 

<br>
Esta anotación indica que una clase tiene métodos de configuración de beans, este es, se utilizan métodos anotados con @Bean dentro de clases anotadas con @Configuration.

<br>
Ejemplo:
@Configuration
public class AppConfig {
    @Bean
    public MiServicio miServicio() {
        return new MiServicioImpl();
    }
}




<br>
Usando @SpringBootApplication (en aplicaciones Spring Boot):

<br>Esta anotación es típica en aplicaciones Spring Boot y combina @Configuration, @EnableAutoConfiguration, y @ComponentScan.
<br>@EnableAutoConfiguration le dice a Spring Boot que inicie la autoconfiguración basada en las dependencias añadidas al proyecto.
<br>@ComponentScan permite a Spring buscar componentes (como @Controller, @Service, @Repository, etc.) en el paquete donde se encuentra la clase anotada y sus subpaquetes.
<br>Ejemplo:
@SpringBootApplication
public class MiAplicacion {
    public static void main(String[] args) {
        SpringApplication.run(MiAplicacion.class, args);
    }
}




<br><br>Cuando se utiliza anotación para configurar el ApplicationContext, el proceso es el siguiente:<br>
<br>
Inicio de la Aplicación:

<br>Al iniciar la aplicación, Spring crea una instancia de ApplicationContext, buscando clases anotadas con @Configuration o @SpringBootApplication.


<br>
Escaneo de Componentes:

<br>Spring escanea el proyecto en busca de clases anotadas con @Component, @Service, @Repository, @Controller, etc., y las registra como beans en el contexto.


<br>
Autoconfiguración (Spring Boot):

<br>En aplicaciones Spring Boot, la autoconfiguración intenta configurar automáticamente tu aplicación basándose en las dependencias del classpath.


<br>
Inyección de Dependencias:

<br>Spring inyecta dependencias donde sea necesario, utilizando @Autowired u otras anotaciones relacionadas.


<br>
Ejecución de la Aplicación:

<br>La aplicación está lista para ejecutarse, con todos los beans configurados y administrados por Spring.


<br>Este enfoque basado en anotaciones es más declarativo y reduce la necesidad de configuración explícita, aprovechando la capacidad de Spring para la autoconfiguración y el descubrimiento de componentes, lo que resulta especialmente útil en aplicaciones Spring Boot.<br><br>Existe también la posibilidad de configurar nuestra aplicación Spring mediante XML pero no la vamos a utilizar en clase.<br>El nombre estándar para el archivo de configuración XML en Spring es applicationContext.xml y normalmente se guarda en el directorio  src/main/resources.<br>En una aplicación Spring, típicamente se utiliza ApplicationContext para definir la configuración de Spring y administrar beans, en el caso de utilizar XML, por ejemplo:<br>ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
MiServicio miServicio = context.getBean(MiServicio.class);
<br>En este ejemplo, ApplicationContext se encarga de cargar la configuración de Spring desde un archivo XML y proporciona un mecanismo para acceder a los beans definidos en esa configuración.<br><br>
<br>
Tipos de Beans:

<br>Singleton Beans: Solo una instancia por contenedor Spring. Ejemplo: un servicio de configuración.
<br>Prototype Beans: Nueva instancia cada vez que se solicita. Ejemplo: objetos que mantienen estado.
<br>Request Beans: Una instancia por solicitud HTTP. Ejemplo: un bean que almacena datos de la solicitud.
<br>Session Beans: Una instancia por sesión HTTP. Ejemplo: un bean que almacena datos de la sesión del usuario.


<br>
Ciclo de vida:

<br>Instanciación: Spring crea instancias de beans.
<br>Población de Propiedades: Spring inyecta valores y dependencias.
<br>Configuración: Beans marcados con @Configuration se procesan para definir beans adicionales.
<br>Inicialización: Beans marcados con @Service, @Repository, etc., se inicializan y se inyectan en otros beans.
<br>Uso: Los beans están listos para ser utilizados.
<br>Destrucción: Al cerrar el contexto, los beans se destruyen.


<br>Las anotaciones @Configuration y @Bean permiten definir beans, mientras que @Service, @Repository, @Controller, etc., indican el papel de un bean. Los beans de configuración se procesan primero para registrar otros beans, luego Spring inicializa e inyecta los beans de servicio, repositorio, etc.<br><br><br>Spring Boot puede utilizarse con herramientas de construcción como Maven o Gradle.<br><br>Spring Initializr (<a rel="noopener nofollow" class="external-link" href="https://start.spring.io/" target="_blank">https://start.spring.io/</a>) es una herramienta web para la generación rápida de proyectos.<br><br>Un proyecto Spring típico tiene una estructura de paquetes bien definida, con entidades, repositorios, servicios y controladores.<br><br><br>La inyección de dependencias en Spring permite desacoplar la creación de objetos de su uso, facilitando la gestión de dependencias y la prueba de componentes.<br><br>
<br>@Component: Indica que una clase es un "Bean" de Spring.
<br>@Autowired: Permite la inyección automática de dependencias.
<br><br>Un Bean en Spring es un objeto gestionado por el contenedor de Spring. Los Beans se pueden configurar en archivos XML o mediante anotaciones.<br><br>Ejemplo de Código para Sesión 3: Inyección de Dependencias<br>Archivo MiServicio.java:<br>import org.springframework.stereotype.Component;

@Component
public class MiServicio {
    public String operacion() {
        return "ejecutando algún proceso...";
    }
}
<br>Archivo MiControlador.java:<br>import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;

@Controller
public class MiControlador {
    private final MiServicio miServicio;

    @Autowired
    public MiControlador(MiServicio miServicio) {
        this.miServicio = miServicio;
    }

    public void ejecutar() {
        System.out.println(miServicio.operacion());
    }
}
<br>Ejercicios<br>
<br>
Nivel Fácil: Crear un Bean simple con Spring y utilizar @Autowired para inyectarlo en otra clase.

<br>Solución: Utilizar el ejemplo de MiServicio y MiControlador, inyectando MiServicio en MiControlador.


<br>
Nivel Medio: Modificar la inyección de dependencias para utilizar el constructor en lugar de un campo directo.

<br>Solución: Ya implementado en MiControlador donde se inyecta MiServicio a través del constructor.


]]></description><link>acceso-a-datos\acd-main\tema-4-spring\1.-clase-introducción-al-framework-spring.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Tema 4 - Spring/1. Clase Introducción al Framework Spring.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[2 Clase Spring Core y Spring MVC]]></title><description><![CDATA[ 
 <br><br><br><br>El contenedor de Spring gestiona la creación, inicialización y destrucción de beans. El ciclo de vida de un bean incluye etapas como la instanciación, la inyección de dependencias, la inicialización y la destrucción.<br><br>Los beans pueden tener diferentes alcances (singleton, prototype, request, session). La elección del alcance afecta cómo y cuándo se crea e inyecta un bean.<br>Exploremos los diferentes alcances de los beans en Spring con ejemplos concretos de casos de uso y código sencillo para ilustrar cómo se aplican estas anotaciones.<br><br>El alcance singleton significa que una única instancia del bean (recuerda que un bean es simplemente un objeto con ciertas propiedades en jerga de Java) será creada y compartida en todo el contenedor de Spring. Este alcance es el más común y se utiliza por ejemplo para servicios que no mantienen estado. Recuerda que el estado es simplemente "datos", por ejemplo, para guardar datos de diferentes beans de tipo Coche no deberíamos utilizar singleton porque necesito muchos objetos cada uno con un estado diferente (marca, potencia, etc diferentes)). <br>Ejemplo:<br>@Service
public class ServicioSingleton {
    // Implementación del servicio
}
<br>Uso: Este alcance es ideal para servicios donde se realiza lógica de negocio sin mantener un estado específico del usuario, como un servicio de cálculo o un servicio de acceso a base de datos.<br><br>El alcance prototype crea una nueva instancia del bean cada vez que se inyecta o se recupera del contenedor. Este alcance se utiliza cuando se necesita una nueva instancia con estado independiente para cada uso.<br>Ejemplo:<br>@Component
@Scope("prototype")
public class BeanPrototype {
    // Implementación con estado específico
}
<br>Uso: Es útil cuando los beans mantienen un estado que no se debe compartir. Por ejemplo, si se está construyendo un objeto que acumula datos durante una operación y esos datos no deben ser compartidos entre diferentes solicitudes o hilos.<br><br>El alcance request crea una instancia del bean por cada solicitud HTTP. Es específico para aplicaciones web y se usa generalmente en componentes relacionados con la solicitud HTTP.<br>Ejemplo:<br>@Component
@Scope(value = WebApplicationContext.SCOPE_REQUEST, proxyMode = ScopedProxyMode.TARGET_CLASS)
public class BeanRequest {
    // Implementación relacionada con una solicitud HTTP
}
<br>Uso: Este alcance es apropiado para datos que son específicos de una solicitud HTTP particular, como los detalles del usuario autenticado o información específica de la solicitud.<br><br>El alcance session crea un bean por sesión HTTP. Al igual que request, es específico para aplicaciones web y se utiliza para datos que son específicos de una sesión de usuario.<br>Ejemplo:<br>@Component
@Scope(value = WebApplicationContext.SCOPE_SESSION, proxyMode = ScopedProxyMode.TARGET_CLASS)
public class BeanSession {
    // Implementación específica de la sesión
}
<br>Uso: Se usa para almacenar información específica de la sesión del usuario, como el carrito de compras en un sitio web de comercio electrónico o las preferencias del usuario.<br>Cada uno de estos alcances tiene su propio caso de uso y es importante elegir el adecuado según la naturaleza del bean y cómo se espera que se comporte en la aplicación. La elección incorrecta del alcance puede llevar a problemas de gestión de estado y concurrencia.<br>Cuando el ApplicationContext de Spring se carga utilizando anotaciones en lugar de una configuración basada en XML, se suele emplear una de las siguientes formas:<br>
<br>
Usando @Configuration: 

<br>Esta anotación indica que una clase tiene métodos de configuración de beans. En lugar de definir beans en un archivo XML, se utilizan métodos anotados con @Bean dentro de clases anotadas con @Configuration.
<br>Ejemplo:
@Configuration
public class AppConfig {
    @Bean
    public MiServicio miServicio() {
        return new MiServicioImpl();
    }
}




<br>
Usando @SpringBootApplication (en aplicaciones Spring Boot):

<br>Esta anotación es típica en aplicaciones Spring Boot y combina @Configuration, @EnableAutoConfiguration, y @ComponentScan.
<br>@EnableAutoConfiguration le dice a Spring Boot que inicie la autoconfiguración basada en las dependencias añadidas al proyecto.
<br>@ComponentScan permite a Spring buscar componentes (como @Controller, @Service, @Repository, etc.) en el paquete donde se encuentra la clase anotada y sus subpaquetes.
<br>Ejemplo:
@SpringBootApplication
public class MiAplicacion {
    public static void main(String[] args) {
        SpringApplication.run(MiAplicacion.class, args);
    }
}




<br><br>Cuando se utiliza anotación en lugar de XML para configurar el ApplicationContext, el proceso es el siguiente:<br>
<br>
Inicio de la Aplicación:

<br>Al iniciar la aplicación, Spring crea una instancia de ApplicationContext, buscando clases anotadas con @Configuration o @SpringBootApplication.


<br>
Escaneo de Componentes:

<br>Spring escanea el proyecto en busca de clases anotadas con @Component, @Service, @Repository, @Controller, etc., y las registra como beans en el contexto.


<br>
Autoconfiguración (Spring Boot):

<br>En aplicaciones Spring Boot, la autoconfiguración intenta configurar automáticamente tu aplicación basándose en las dependencias del classpath (y todas las dependencias del archivo pom.xml).


<br>
Inyección de Dependencias:

<br>Spring inyecta dependencias donde sea necesario, utilizando @Autowired u otras anotaciones relacionadas.


<br>
Ejecución de la Aplicación:

<br>La aplicación está lista para ejecutarse, con todos los beans configurados y administrados por Spring.


<br>Este enfoque basado en anotaciones es más declarativo y reduce la necesidad de configuración explícita, aprovechando la capacidad de Spring para la autoconfiguración y el descubrimiento de componentes, lo que resulta especialmente útil en aplicaciones Spring Boot.<br><br><br>Spring MVC implementa el patrón Modelo-Vista-Controlador, facilitando el desarrollo de aplicaciones web. El controlador maneja solicitudes, el modelo representa datos, y la vista genera la salida al usuario.<br><br>Un controlador en Spring MVC se define con la anotación @Controller. Puede manejar solicitudes HTTP mediante anotaciones como @RequestMapping.<br><br>El mapeo de solicitudes se realiza mediante anotaciones como @GetMapping o @PostMapping, definiendo cómo se atienden las solicitudes HTTP.<br><br><br>Thymeleaf es un motor de plantillas para aplicaciones web en Java. Se integra fácilmente con Spring MVC para generar vistas HTML dinámicas.<br><br>Con Thymeleaf, se crean plantillas HTML que Spring MVC puede procesar y presentar como vistas. Estas plantillas pueden contener datos dinámicos y lógica de presentación.<br><br>Los datos del modelo se pasan a la vista donde Thymeleaf los utiliza para renderizar contenido dinámico. Se puede manipular y presentar la información del modelo en la vista.<br><br>Ejemplo de Código para Sesión 2: Introducción a Spring MVC<br>Archivo MiControlador.java:<br>import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.ui.Model;

@Controller
public class MiControlador {

    @GetMapping("/saludo")
    public String saludo(Model model) {
        model.addAttribute("mensaje", "Hola Spring MVC");
        return "saludo";
    }
}
<br>Archivo saludo.html (usando Thymeleaf):<br>&lt;!DOCTYPE html&gt;
&lt;html xmlns:th="http://www.thymeleaf.org"&gt;
&lt;head&gt;
    &lt;title&gt;Saludo&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1 th:text="${mensaje}"&gt;&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
<br>Ejercicios<br>
<br>
Nivel Fácil: Crear un controlador con un método que retorne una vista simple.

<br>Solución: Utilizar el controlador MiControlador con el método saludo que retorna la vista saludo.


<br>
Nivel Medio: Enviar un objeto de modelo desde el controlador a la vista y mostrar sus propiedades con Thymeleaf.

<br>Solución: En el método saludo del controlador, agregar un objeto al modelo (ej., model.addAttribute("usuario", new Usuario("Juan"))). En la vista saludo.html, mostrar las propiedades del objeto usuario usando Thymeleaf.


]]></description><link>acceso-a-datos\acd-main\tema-4-spring\2-clase-spring-core-y-spring-mvc.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Tema 4 - Spring/2 Clase Spring Core y Spring MVC.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[2.1 Introducción Thymleaf]]></title><description><![CDATA[ 
 <br><br>Thymeleaf es un motor de plantillas para aplicaciones web Java, usado comúnmente con Spring MVC. Permite crear vistas HTML dinámicas, integrándose de forma elegante con los datos del modelo de Spring.<br><br>
<br>
Integración Natural con Spring MVC: Funciona sin problemas con el ecosistema Spring, permitiendo el enlace de datos del modelo a las vistas HTML.

<br>
Sintaxis Expresiva: Thymeleaf utiliza atributos especiales, prefijados con th:, para vincular datos y ejecutar lógica en las vistas.

<br>
Vista del Servidor: A diferencia de las tecnologías de frontend JavaScript, Thymeleaf genera el HTML en el servidor, lo que puede ser beneficioso para el SEO y la accesibilidad.

<br>
Paso de Información del Modelo a la Vista: Thymeleaf facilita mostrar y manipular datos del modelo en la vista, como listas, objetos, y variables.

<br>
Formularios y Validación: Soporta el enlace de datos de formularios, facilitando la recopilación y validación de entradas del usuario.

<br><br>Supongamos una entidad simple Usuario:<br>public class Usuario {
    private String nombre;
    private String email;
    // Constructor, getters y setters
}
<br>Vista con Tabla de Datos (usuarios.html):<br>&lt;!DOCTYPE html&gt;
&lt;html xmlns:th="http://www.thymeleaf.org"&gt;
&lt;head&gt;
    &lt;title&gt;Lista de Usuarios&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;table&gt;
        &lt;tr&gt;
            &lt;th&gt;Nombre&lt;/th&gt;
            &lt;th&gt;Email&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr th:each="usuario : ${usuarios}"&gt;
            &lt;td th:text="${usuario.nombre}"&gt;Nombre&lt;/td&gt;
            &lt;td th:text="${usuario.email}"&gt;Email&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
<br>Controlador para Mostrar Usuarios:<br>@Controller
public class UsuarioController {

    @GetMapping("/usuarios")
    public String listarUsuarios(Model model) {
        List&lt;Usuario&gt; usuarios = // obtener lista de usuarios
        model.addAttribute("usuarios", usuarios);
        return "usuarios";
    }
}
<br>Formulario para Añadir Usuario (formulario.html):<br>&lt;!DOCTYPE html&gt;
&lt;html xmlns:th="http://www.thymeleaf.org"&gt;
&lt;head&gt;
    &lt;title&gt;Añadir Usuario&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form th:action="@{/usuario/nuevo}" th:object="${usuario}" method="post"&gt;
        &lt;input type="text" th:field="*{nombre}" placeholder="Nombre"/&gt;
        &lt;input type="email" th:field="*{email}" placeholder="Email"/&gt;
        &lt;button type="submit"&gt;Enviar&lt;/button&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
<br>Controlador para Añadir Usuario:<br>@Controller
public class UsuarioController {

    @PostMapping("/usuario/nuevo")
    public String agregarUsuario(@ModelAttribute Usuario usuario) {
        // guardar usuario
        return "redirect:/usuarios";
    }

    @GetMapping("/usuario/formulario")
    public String formularioUsuario(Model model) {
        model.addAttribute("usuario", new Usuario());
        return "formulario";
    }
}
<br>Este ejemplo muestra cómo Thymeleaf se integra con Spring MVC para mostrar datos y gestionar formularios, permitiendo un flujo interactivo entre el usuario, la vista y el modelo.<br><br><a rel="noopener nofollow" class="external-link" href="https://www.youtube.com/watch?v=bVM6MX-dGJI" target="_blank">https://www.youtube.com/watch?v=bVM6MX-dGJI</a>]]></description><link>acceso-a-datos\acd-main\tema-4-spring\2.1-introducción-thymleaf.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Tema 4 - Spring/2.1 Introducción Thymleaf.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[3 Clase Acceso a Datos con Spring]]></title><description><![CDATA[ 
 <br><br><br><br>Spring Data JPA facilita la implementación de repositorios de datos basados en JPA. Requiere configuración en el archivo application.properties o application.yml, especificando la URL de la base de datos, el usuario, la contraseña y el dialecto de la base de datos.<br><br>Las entidades representan tablas de la base de datos. Se anotan con @Entity y se definen sus relaciones. Los repositorios son interfaces que extienden JpaRepository o CrudRepository, proporcionando métodos CRUD.<br><br>Los métodos básicos incluyen save(), findById(), findAll(), deleteById(), entre otros, permitiendo operaciones de creación, lectura, actualización y eliminación.<br><br><br>Spring maneja transacciones mediante la anotación @Transactional. Se puede aplicar a métodos o clases para asegurar la integridad de las operaciones de base de datos.<br><br>Se pueden definir consultas personalizadas en los repositorios utilizando el lenguaje JPQL (Java Persistence Query Language) o SQL nativo.<br><br>Los Query Methods son métodos en los repositorios cuyos nombres siguen una convención que Spring interpreta como consultas. @Query permite definir consultas JPQL o SQL directamente en los métodos del repositorio.<br><br><br>Maven es una herramienta de gestión y construcción de proyectos. En Spring, se utiliza para definir dependencias, configurar plugins y manejar el ciclo de vida del proyecto.<br><br>El archivo pom.xml se usa para gestionar las dependencias (como Spring Boot, Spring Data JPA, base de datos) y configurar plugins (como Spring Boot Maven Plugin).<br><br>Incluir manejo adecuado de versiones, organización de dependencias, y configuración de plugins para facilitar la construcción, prueba y despliegue del proyecto.<br><br>Ejemplos de Código<br>
<br>
Entidad Usuario.java:
@Entity
public class Usuario {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;
    private String nombre;
    private String email;
    // Getters, setters
}


<br>
Repositorio UsuarioRepository.java:
public interface UsuarioRepository extends JpaRepository&lt;Usuario, Long&gt; {
}


<br>
Consulta Personalizada en Repositorio:
public interface UsuarioRepository extends JpaRepository&lt;Usuario, Long&gt; {
    @Query("SELECT u FROM Usuario u WHERE u.nombre = ?1")
    List&lt;Usuario&gt; findByNombre(String nombre);
}


<br>
Archivo application.properties:
spring.datasource.url=jdbc:mysql://localhost:3306/miBaseDeDatos
spring.datasource.username=usuario
spring.datasource.password=contraseña
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect


<br>
Archivo pom.xml (sección de dependencias):
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;scope&gt;runtime&lt;/scope&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;


<br>Estos ejemplos proporcionan una base sólida para el desarrollo de aplicaciones con acceso a datos en Spring, desde la configuración inicial hasta la creación de entidades, repositorios y la gestión de transacciones.]]></description><link>acceso-a-datos\acd-main\tema-4-spring\3-clase-acceso-a-datos-con-spring.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Tema 4 - Spring/3 Clase Acceso a Datos con Spring.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[4 Clase Spring Boot y Microservicios]]></title><description><![CDATA[ 
 <br><br><br><br>Spring Boot es una extensión del framework Spring que simplifica la configuración y el despliegue de aplicaciones. Proporciona un entorno de desarrollo con una configuración mínima y capacidades de autoconfiguración.<br><br>Se puede utilizar Spring Initializr para generar un proyecto base de Spring Boot, que incluye todas las dependencias necesarias.<br><br>Spring Boot autoconfigura automáticamente componentes de la aplicación en función de las dependencias del proyecto. Las propiedades externas se pueden gestionar a través de archivos como application.properties o application.yml.<br>Ejemplo de Aplicación Spring Boot:<br>import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class MiAplicacion {
    public static void main(String[] args) {
        SpringApplication.run(MiAplicacion.class, args);
    }
}
<br>Archivo application.properties:<br>server.port=8081
<br><br><br>Los microservicios son un enfoque arquitectónico para desarrollar una aplicación como un conjunto de servicios pequeños y autónomos, cada uno ejecutándose en su propio proceso.<br><br>Se crea un servicio básico que puede funcionar de forma independiente o en conjunto con otros servicios.<br><br>Los microservicios se comunican entre sí a través de mecanismos como REST APIs, colas de mensajes, o brokers de eventos.<br>Ejemplo de Microservicio:<br>@RestController
public class SaludoController {
    @GetMapping("/saludo")
    public String saludo() {
        return "Hola desde el microservicio";
    }
}

<br><br><br>Spring Cloud proporciona herramientas para el desarrollo de aplicaciones en la nube, facilitando patrones comunes en sistemas distribuidos.<br><br>Incluye características como la configuración centralizada y el descubrimiento de servicios, permitiendo que los microservicios se registren y descubran dinámicamente.<br><br>Spring Cloud incluye soluciones para el balanceo de carga y estrategias para la tolerancia a fallos, como Circuit Breakers.<br><br>Ejercicios<br>
<br>
Nivel Fácil (Sesión 1): Crear una aplicación Spring Boot simple con un endpoint REST.

<br>Solución: Utilizar el ejemplo de MiAplicacion y añadir un controlador REST básico.


<br>
Nivel Medio (Sesión 2): Implementar un microservicio que consume otro microservicio mediante REST.

<br>Solución: Crear dos aplicaciones Spring Boot. Una con un endpoint REST y la otra que utiliza RestTemplate para consumir dicho servicio.


]]></description><link>acceso-a-datos\acd-main\tema-4-spring\4-clase-spring-boot-y-microservicios.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Tema 4 - Spring/4 Clase Spring Boot y Microservicios.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[5 Clase Seguridad y Testing en Spring]]></title><description><![CDATA[ 
 <br><br><br><br>La seguridad web abarca la autenticación (verificar la identidad del usuario) y la autorización (controlar el acceso a recursos).<br>Spring Security proporciona un marco para la seguridad de aplicaciones, incluyendo autenticación y autorización.<br>La autenticación se logra mediante proveedores de autenticación, mientras que la autorización se maneja mediante la asignación de roles y el control de acceso a URLs.<br>El Control de Acceso Basado en Roles (autenticación) y la Gestión de Permisos (autorización)  son aspectos esenciales de la autorización en aplicaciones web, y Spring Boot proporciona herramientas poderosas y flexibles para implementar estas funcionalidades. Aquí se muestra cómo aplicar estos conceptos específicamente en el contexto de Spring Boot y el Spring Security Framework.<br><br>En RBAC, los accesos se otorgan en función de los roles asignados a los usuarios. En Spring Boot, esto se gestiona típicamente con Spring Security:<br>
<br>
Definición de Roles: Los roles representan un conjunto de permisos. Por ejemplo, podrías tener roles como ADMIN, USER, MANAGER, etc.

<br>
Asignación de Roles a Usuarios: Cuando un usuario se autentica, se le asignan roles. Estos roles se pueden almacenar y gestionar en la base de datos.

<br>
Configuración de Spring Security:

<br>En el WebSecurityConfigurerAdapter, defines las reglas de seguridad, especificando qué roles tienen acceso a qué rutas o métodos en tu aplicación.
<br>Ejemplo de configuración de seguridad:


<br>@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
                .antMatchers("/", "/home").permitAll()
                .anyRequest().authenticated()
            .and()
            .formLogin()
                .loginPage("/login")
                .permitAll()
            .and()
            .logout()
                .permitAll();
    }
}
<br>
<br>Otro ejemplo con control por ROLES:<br>
java      @Override      protected void configure(HttpSecurity http) throws Exception {          http              .authorizeRequests()              .antMatchers("/admin/**").hasRole("ADMIN")              .antMatchers("/user/**").hasAnyRole("USER", "ADMIN")              .antMatchers("/").permitAll()              .and()              .formLogin();      }      <br>
Este código configura las rutas para que solo sean accesibles por usuarios con los roles específicos.
<br><br>Además de los roles, puedes gestionar permisos específicos para acciones más granulares:<br>
<br>
Permisos: Son autorizaciones más específicas que los roles. Por ejemplo, un rol USER podría tener permisos como READ_PROFILE, EDIT_PROFILE.

<br>
Spring Method Security: Puedes usar anotaciones de seguridad en los métodos para controlar el acceso basado en roles o permisos.

<br>
Ejemplo:
@PreAuthorize("hasRole('ADMIN')")
public void someAdminMethod() {
    // ...
}

@PreAuthorize("hasAuthority('READ_PROFILE')")
public void someUserMethod() {
    // ...
}


<br>
@PreAuthorize permite definir la seguridad a nivel de método antes de que se ejecute el método.



<br><br>
<br>
Configurar Spring Security: Añade Spring Security a tu proyecto de Spring Boot. Puedes hacerlo agregando la dependencia spring-boot-starter-security en tu archivo pom.xml o build.gradle.

<br>
Clase de Configuración de Seguridad: Crea una clase que extienda WebSecurityConfigurerAdapter para personalizar tu configuración de seguridad.

<br>
Servicio de Detalles de Usuario: Implementa UserDetailsService para cargar datos específicos del usuario (como roles) desde la base de datos.

<br>
Personalizar la Autenticación y Autorización: Utiliza AuthenticationManagerBuilder para definir cómo se autenticarán los usuarios (por ejemplo, con base de datos, LDAP, etc.) y configura las reglas de autorización en el método configure(HttpSecurity http).

<br>
Pruebas y Validación: Asegúrate de probar exhaustivamente la seguridad de tu aplicación, incluyendo la autenticación y la autorización, para verificar que los permisos y roles se manejan como se espera.

<br>Implementar RBAC y la gestión de permisos de manera efectiva en Spring Boot con Spring Security te permitirá tener un control detallado y seguro sobre quién puede acceder y realizar operaciones específicas en la aplicación.<br><br>Vamos a detallar cada uno de los puntos mencionados con ejemplos concretos, aplicados al contexto del sistema de reservas de un hotel en Spring Boot:<br><br><br>Imagina que tienes una tabla usuarios y una tabla roles. Los roles pueden ser ADMIN, USER, MANAGER, etc. Además, tendrías una tabla de unión usuarios_roles para representar la relación muchos-a-muchos entre usuarios y roles.<br>CREATE TABLE usuarios (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(100) NOT NULL,
    -- otros campos
);

CREATE TABLE roles (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(50) NOT NULL
);

CREATE TABLE usuarios_roles (
    usuario_id BIGINT,
    rol_id BIGINT,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id),
    FOREIGN KEY (rol_id) REFERENCES roles(id)
);
<br><br>Tendrías entidades Usuario y Rol en tu proyecto de Spring Boot.<br>@Entity
public class Usuario {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String username;
    private String password;

    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(
        name = "usuarios_roles",
        joinColumns = @JoinColumn(name = "usuario_id"),
        inverseJoinColumns = @JoinColumn(name = "rol_id")
    )
    private Set&lt;Rol&gt; roles;
    // Getters y setters
}

@Entity
public class Rol {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String nombre;
    // Getters y setters
}
<br><br>En Spring Boot, extiendes la clase WebSecurityConfigurerAdapter para configurar la seguridad:<br>@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Autowired
    private UserDetailsService userDetailsService;

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
            .antMatchers("/admin/**").hasRole("ADMIN")
            .antMatchers("/reservas/**").hasAnyRole("USER", "MANAGER")
            .antMatchers("/").permitAll()
            .and()
            .formLogin();
            // Configuración adicional
    }

    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
<br><br>Implementa UserDetailsService para cargar los usuarios y sus roles desde la base de datos:<br>@Service
public class UserDetailsServiceImpl implements UserDetailsService {

    @Autowired
    private UsuarioRepository usuarioRepository;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        Usuario usuario = usuarioRepository.findByUsername(username)
            .orElseThrow(() -&gt; new UsernameNotFoundException("Usuario no encontrado: " + username));

        Set&lt;GrantedAuthority&gt; grantedAuthorities = new HashSet&lt;&gt;();
        for (Rol rol : usuario.getRoles()) {
            grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_" + rol.getNombre()));
        }

        return new org.springframework.security.core.userdetails.User(usuario.getUsername(), usuario.getPassword(), grantedAuthorities);
    }
}
<br><br>Las pruebas de seguridad implican:<br>
<br>Verificar que los endpoints están protegidos según los roles.
<br>Comprobar que la autenticación funciona correctamente.
<br>Asegurar que los roles se asignan y aplican correctamente.
<br>Puedes usar Spring Boot Test para escribir pruebas que validen tu configuración de seguridad:<br>@SpringBootTest
@AutoConfigureMockMvc
public class SecurityTests {

    @Autowired
    private MockMvc mockMvc;

    // Escribe pruebas para verificar la seguridad
    // Por ejemplo, intentar acceder a rutas protegidas sin autenticación o con roles incorrectos
}
<br>Estos ejemplos proporcionan un punto de partida para la implementación de RBAC y la seguridad en general en una aplicación con Spring Boot. <br><br><br>El testing en Spring incluye pruebas unitarias y de integración, con el objetivo de verificar el correcto funcionamiento de componentes individuales y del sistema en conjunto.<br><br>Spring Boot Test proporciona herramientas para pruebas, incluyendo anotaciones como @SpringBootTest para pruebas de integración.<br><br>Los tests para repositorios pueden incluir operaciones CRUD, mientras que los tests para controladores pueden verificar respuestas HTTP y comportamientos de endpoints.<br>Ejemplo de Test para un Controlador:<br>@SpringBootTest
@AutoConfigureMockMvc
public class UsuarioControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Test
    public void testSaludo() throws Exception {
        this.mockMvc.perform(get("/saludo"))
            .andExpect(status().isOk())
            .andExpect(content().string(containsString("Hola")));
    }
}
<br><br><br>Las pruebas de integración validan que los distintos módulos de la aplicación funcionen correctamente en conjunto.<br><br>En un entorno de microservicios, las pruebas de integración implican verificar la comunicación y la colaboración entre los servicios.<br><br>Incluyen simulación de escenarios de usuario, verificación de flujos de trabajo completos y uso de herramientas como Selenium para pruebas de interfaces de usuario.<br><br>Ejercicios<br>
<br>
Nivel Fácil (Sesión 1): Configurar Spring Security para una aplicación simple, permitiendo acceso sin restricciones a una ruta específica.

<br>Solución: Implementar la clase SecurityConfig con la configuración adecuada para permitir el acceso a ciertas URLs.


<br>
Nivel Medio (Sesión 2): Escribir un test para un repositorio, comprobando la correcta ejecución de una operación CRUD.

<br>Solución: Utilizar @DataJpaTest para probar un repositorio, creando un test que guarde un objeto y luego lo recupere y verifique su existencia.


]]></description><link>acceso-a-datos\acd-main\tema-4-spring\5-clase-seguridad-y-testing-en-spring.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Tema 4 - Spring/5 Clase Seguridad y Testing en Spring.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[6 Clase Temas Avanzados y Proyecto Final]]></title><description><![CDATA[ 
 <br><br><br><br>
<br>Propósito: AOP en Spring se utiliza para encapsular aspectos transversales (como seguridad, transacciones, registro) de manera que estos aspectos se puedan aplicar de manera declarativa a múltiples componentes sin modificar su código fuente.
<br>Funcionamiento: AOP trabaja interceptando llamadas a métodos y aplicando "consejos" (advice) en ciertos puntos de ejecución (join points) especificados a través de "puntos de corte" (pointcuts).<br>
º
<br>La programación orientada a aspectos (AOP - Aspect Oriented Programming) es un paradigma de programación que intenta formalizar y representar de forma concisa los elementos que son transversales a todo el sistema. En los lenguajes orientados a objetos, la estructura del sistema se basa en la idea de clases y jerarquías de clases. La herencia permite modularizar el sistema, eliminando la necesidad de duplicar código. No obstante, siempre hay aspectos que son transversales a esta estructura: el ejemplo más clásico es el de control de permisos de ejecución de ciertos métodos en una clase:<br>public class MiObjetoDeNegocio { public void metodoDeNegocio1() throws SinPermisoException { chequeaPermisos(); //resto del código ...
}
public void metodoDeNegocio2() throws SinPermisoException { chequeaPermisos(); //resto del código ...
}
protected void chequeaPermisos() throws SinPermisoException { //chequear permisos de ejecucion
... }
}
<br>Como vemos, estructurando adecuadamente el programa se puede minimizar la repetición de código, pero es prácticamente imposible eliminarla. La situación se agravaría si además tuviéramos que controlar permisos en objetos de varias clases. El problema es que en un lenguaje orientado a objetos los aspectos transversales a la jerarquía de clases no son modularizables ni se pueden formular de manera concisa con las construcciones del lenguaje. La programación orientada a aspectos intenta formular conceptos y diseñar construcciones del lenguaje que permitan modelar estos aspectos transversales sin duplicación de código. En nuestro ejemplo, se necesitaría poder especificar de alguna manera concisa que antes de ejecutar ciertos métodos hay que llamar a cierto código.<br>En AOP, a los elementos que son transversales a la estructura del sistema y se pueden modularizar gracias a las construcciones que aporta el paradigma se les denomina aspectos (aspects). En el ejemplo anterior el control de permisos de ejecución, modularizado mediante AOP, sería un aspecto.<br>Un consejo (advice) es una acción que hay que ejecutar en determinado/s punto/s de un código, para conseguir implementar un aspecto. En nuestro ejemplo, la acción a ejecutar sería la llamada a chequeaPermisos(). El conjunto de puntos del código donde se debe ejecutar un advice se conoce como punto de corte o pointcut. En nuestro caso serían los métodos metodoDeNegocio1() y metodoDeNegocio2(). Nótese que aunque se hable de "punto de corte" en singular, en general no es un único punto del código.<br>En muchos frameworks de AOP (Spring incluido), el objeto que debe ejecutar esta acción se modela en la mayoría de casos como un interceptor: un objeto que recibe una llamada a un método propio antes de que se ejecute ese punto del código. Los interceptores se pueden encadenar, si deseamos realizar varias acciones en el mismo punto, como puede observarse en la siguiente figura.<br>“Pasted image 20240108184938.png” could not be found.<br>Cuando algún objeto llama a un método que forma parte del pointcut, el framework de AOP se las "arregla" para que en realidad se llame a un objeto proxy o intermediario, que tiene un método con el mismo nombre y signatura pero cuya ejecución lo que hace en realidad es redirigir la llamada por una cadena de interceptores hasta el método que se quería ejecutar.<br>En algunas ocasiones nos interesará usar un interceptor para interceptar las llamadas a todos los métodos de una clase. En otras solo nos interesará interceptar algunos métodos. En Spring, cuando deseamos interceptar las llamadas solo a algunos métodos debemos definir un advisor, que será una combinación de pointcut (dónde hay que aplicar AOP) más interceptor (qué hay que ejecutar).<br>Como ya se ha dicho, un punto de corte o pointcut es un punto de interés en el código antes, después o "alrededor" del cual queremos ejecutar algo (un advice). Un pointcut no puede ser cualquier línea arbitraria de código. <br><br>Es importante destacar que al definir un pointcut realmente no estamos todavía diciendo que vayamos a ejecutar nada, simplemente marcamos un "punto de interés". La combinación de pointcut + advice es la que realmente hace algo útil.<br>
Por ello, los ejemplos dados en este apartado por sí solos no tienen demasiado sentido, no hay que intentar probarlos tal cual, aunque aquí los explicaremos aislados para poder describir con cierto detalle su sintaxis antes de pasar a la de los advices.<br><br>Con los advices ya tenemos la pieza del puzzle que nos faltaba para que todo cobre sentido. Un advice es algo que hay que hacer en un cierto punto de corte, ya sea antes, después, o "alrededor" (antes y después) del punto. Los advices se especifican con una anotación con el pointcut y la definición del método Java a ejecutar (signatura y código del mismo). Como en Spring los puntos de corte deben ser ejecuciones de métodos los casos posibles son:<br>• Antes de la ejecución de un método (anotación @Before)<br>
• Después de la ejecución normal, es decir, si no se genera una excepción (anotación @AfterReturning)<br>
• Después de la ejecución con excepción/es (anotación @AfterThrowing) • Después de la ejecución, se hayan producido o no excepciones (anotación @After) • Antes y después de la ejecución (anotación @Around)<br><br>Un aspecto (aspect) es un conjunto de advices. Siguiendo la sintaxis de AspectJ, los aspectos se representan como clases Java, marcadas con la anotación @Aspect. En Spring,además, un aspecto debe ser un bean, por lo que tendremos que anotarlo como tal (@Component).<br><br>La Programación Orientada a Aspectos (AOP) se centra en los aspectos, que son responsabilidades transversales que afectan a múltiples partes de una aplicación. <br>Ejemplos comunes son la seguridad y el registro (logging).<br>
<br>What (Qué): AOP separa las responsabilidades transversales de la lógica principal.
<br>Why (Por qué): Para reducir el acoplamiento y mejorar la modularidad.
<br>Who (Quién): Desarrolladores que quieren mantener separadas las responsabilidades transversales.
<br>When (Cuándo): Se piensa durante la fase de diseño y desarrollo.
<br>Where (Dónde): En cualquier sistema donde se necesite separar las responsabilidades.
<br>AOP no es un subconjunto de POO, sino una técnica complementaria. Mientras que POO encapsula el comportamiento en objetos, AOP encapsula comportamientos comunes en aspectos y permite aplicarlos declarativamente a diferentes partes del código. <br><br>La anotación @Aspect en Spring se utiliza para definir una clase como un aspecto que puede contener advice (acciones tomadas por un aspecto en un punto particular del programa), pointcuts (puntos en la ejecución del programa donde un aspecto puede intervenir) e introductions (añadiendo métodos o campos a clases existentes).<br>Un ejemplo de cómo se podría implementar AOP en Spring para añadir transversalmente funcionalidad de registro (logging) a un método:<br>@Aspect
@Component
public class LoggingAspect {

    @Before("execution(* com.example.service.*.*(..))") // este es el pointcut
    public void logBefore(JoinPoint joinPoint) { // este es el advice
        System.out.println("Voy a ejecutar: " + joinPoint.getSignature().getName());
    }

    @After("execution(* com.example.service.*.*(..))") // este es el pointcut
    public void logAfter(JoinPoint joinPoint) {// este es el advice
        System.out.println("He ejecutado: " + joinPoint.getSignature().getName());
    }
}
<br>En este código:<br>
<br>La anotación @Aspect indica que LoggingAspect es un aspecto.
<br>La anotación @Before indica que el método logBefore debe ejecutarse antes de cualquier método en cualquier clase en el paquete com.example.service.
<br>La anotación @After indica que el método logAfter debe ejecutarse después de cualquier método en cualquier clase en el paquete com.example.service.
<br>JoinPoint proporciona información sobre el método que está siendo aconsejado por el aspecto.
<br>En el ejemplo mostrado, los pointcuts son expresados a través de las expresiones dentro de las anotaciones @Before y @After:<br>
<br>execution(* com.example.service.*.*(..)) para @Before: Este pointcut selecciona todos los métodos de cualquier clase dentro del paquete com.example.service para ser aconsejados antes de su ejecución.
<br>execution(* com.example.service.*.*(..)) para @After: Este pointcut selecciona todos los métodos de cualquier clase dentro del paquete com.example.service para ser aconsejados después de su ejecución.
<br>Ambos pointcuts son idénticos en este caso, pero podrían diferir para seleccionar diferentes métodos o momentos para aplicar el advice.<br>JoinPoint es una interfaz proporcionada por Spring AOP que representa un punto específico en la ejecución del programa, como la ejecución de un método. Un objeto JoinPoint proporciona información sobre el método que está siendo aconsejado, permitiendo acceder a su nombre, sus argumentos, y el objeto objetivo sobre el que se está ejecutando el método, entre otras cosas. En el ejemplo proporcionado, el JoinPoint se pasa como argumento a los métodos logBefore y logAfter para permitir el acceso a la información del método que está siendo aconsejado.<br><br>Introductions (o inter-type declarations) permiten añadir nuevos métodos o campos a clases existentes. Spring AOP soporta introductions en una manera limitada a través de una interfaz y una clase que implementa esa interfaz. Aquí hay un ejemplo simple:<br>public interface Counter {
    void increase();
    int getCount();
}

@Aspect
@Component
public class CounterAspect implements Counter {

    private int count;

    @DeclareParents(value = "com.example.service.*+", defaultImpl = CounterAspect.class)
    public static Counter counter;

    @Override
    public void increase() {
        count++;
    }

    @Override
    public int getCount() {
        return count;
    }
}
<br>En este ejemplo, @DeclareParents es usado para introducir la interfaz Counter a todas las clases en el paquete com.example.service. Ahora, todas esas clases tienen los métodos increase y getCount de la interfaz Counter, implementados por CounterAspect.<br>Un caso de uso sencillo en el que se aplica esto para ver como se hace:<br>@Service
public class UserService {

    public void createUser(String name) {
        // lógica para crear usuario
    }
}

// En alguna otra parte de tu código
@Autowired
private UserService userService;

public void someMethod() {
    userService.createUser("John Doe");
    userService.increase();  // Ahora se llama directamente en userService
    System.out.println("Método createUser llamado " + userService.getCount() + " veces");
}
<br>Ahora, con la introducción hecha previamente, puedes llamar directamente a userService.increase() y userService.getCount() en tu código.<br><br><br>La programación reactiva se centra en la creación de aplicaciones eficientes y no bloqueantes, especialmente útil en entornos de alto rendimiento y con muchas solicitudes simultáneas.<br><br>Spring WebFlux es una alternativa a Spring MVC para crear aplicaciones reactivas. Utiliza el proyecto Reactor para soportar programación reactiva.<br>Ejemplo de Controlador Reactivo:<br>@RestController
@RequestMapping("/usuarios")
public class UsuarioReactivoController {
    @GetMapping("/{id}")
    public Mono&lt;Usuario&gt; obtenerUsuario(@PathVariable String id) {
        // Obtener usuario de forma reactiva
    }
}
<br><br>
<br>Propósito: El manejo de eventos en Spring se utiliza para la comunicación entre diferentes partes de una aplicación de manera desacoplada. Los eventos pueden ser generados y consumidos por distintos componentes, permitiendo que reaccionen a acciones o cambios de estado sin estar fuertemente acoplados entre sí.
<br>Funcionamiento: Se basa en el patrón de diseño Observer. Los componentes de Spring pueden publicar eventos y otros componentes pueden escuchar y reaccionar a estos eventos.
<br>Ejemplo de Uso 1:<br>
Un componente de servicio podría publicar un evento cuando se completa una transacción, y un componente de auditoría podría escuchar ese evento y actuar en consecuencia.<br><br>public class TransaccionCompletaEvento extends ApplicationEvent {
    private String transaccionDetalle;

    public TransaccionCompletaEvento(Object source, String transaccionDetalle) {
        super(source);
        this.transaccionDetalle = transaccionDetalle;
    }

    public String getTransaccionDetalle() {
        return transaccionDetalle;
    }
}
<br><br>@Service
public class ServicioTransaccion {

    @Autowired
    private ApplicationEventPublisher publisher;

    public void ejecutarTransaccion() {
        // Lógica de la transacción...
        // Después de completar la transacción, publicar el evento
        publisher.publishEvent(new TransaccionCompletaEvento(this, "Transacción exitosa"));
    }
}
<br><br>@Component
public class AuditoriaListener implements ApplicationListener&lt;TransaccionCompletaEvento&gt; {

    @Override
    public void onApplicationEvent(TransaccionCompletaEvento evento) {
        System.out.println("Auditoría de transacción: " + evento.getTransaccionDetalle());
    }
}
<br><br>Para probar este ejemplo en un entorno no-web, puedes usar una aplicación Spring Boot con un método main, o crear una prueba de integración.<br><br>@SpringBootApplication
public class MiAplicacion {

    public static void main(String[] args) {
        ApplicationContext context = SpringApplication.run(MiAplicacion.class, args);
        ServicioTransaccion servicio = context.getBean(ServicioTransaccion.class);
        servicio.ejecutarTransaccion();
    }
}
<br><br>Para una prueba de integración, puedes usar @SpringBootTest para cargar el contexto de Spring y verificar si el evento se publica correctamente.<br>@SpringBootTest
public class TransaccionEventoTest {

    @Autowired
    private ServicioTransaccion servicioTransaccion;

    @Test
    public void testPublicarEventoTransaccion() {
        servicioTransaccion.ejecutarTransaccion();
        // Aquí puedes añadir aserciones o mocks para verificar el comportamiento esperado
    }
}
<br>En este ejemplo, ServicioTransaccion representa un componente de servicio que realiza alguna operación (como una transacción) y luego publica un evento, mientras que AuditoriaListener actúa como un componente de auditoría que escucha y maneja el evento publicado. La prueba de integración verifica que el flujo de eventos funcione como se espera.<br>Ejemplo de Uso 2:<br>
Ejemplo genérico sencillo de cómo implementar el manejo de eventos y mensajería en Spring. Vamos a crear un evento personalizado, publicarlo y luego manejarlo.<br><br>Primero, definimos un evento personalizado. Este evento puede llevar información relevante que se quiera compartir con los oyentes (listeners).<br>import org.springframework.context.ApplicationEvent;

public class MiEventoPersonalizado extends ApplicationEvent {
    private String mensaje;

    public MiEventoPersonalizado(Object source, String mensaje) {
        super(source);
        this.mensaje = mensaje;
    }

    public String getMensaje() {
        return mensaje;
    }
}
<br><br>A continuación, creamos un componente que publicará el evento. Esto se puede hacer inyectando ApplicationEventPublisher y utilizando su método publishEvent.<br>import org.springframework.context.ApplicationEventPublisher;
import org.springframework.context.ApplicationEventPublisherAware;
import org.springframework.stereotype.Component;

@Component
public class PublicadorDeEvento implements ApplicationEventPublisherAware {
    private ApplicationEventPublisher publisher;

    @Override
    public void setApplicationEventPublisher(ApplicationEventPublisher applicationEventPublisher) {
        this.publisher = applicationEventPublisher;
    }

    public void publicarEvento(final String mensaje) {
        MiEventoPersonalizado evento = new MiEventoPersonalizado(this, mensaje);
        publisher.publishEvent(evento);
    }
}
<br><br>Por último, creamos un @Component que actuará como oyente para nuestro evento personalizado.<br>import org.springframework.context.ApplicationListener;
import org.springframework.stereotype.Component;

@Component
public class ManejadorDeEvento implements ApplicationListener&lt;MiEventoPersonalizado&gt; {

    @Override
    public void onApplicationEvent(MiEventoPersonalizado evento) {
        System.out.println("Manejando mi evento personalizado: " + evento.getMensaje());
    }
}
<br><br>En el contexto de una aplicación Spring, se puede inyectar PublicadorDeEvento en cualquier otro componente (como un controlador) y utilizar el método publicarEvento para disparar el evento. El ManejadorDeEvento escuchará automáticamente estos eventos y ejecutará la lógica definida en onApplicationEvent.<br>@RestController
public class MiControlador {
    @Autowired
    private PublicadorDeEvento publicadorDeEvento;

    @GetMapping("/disparar-evento")
    public String dispararEvento() {
        publicadorDeEvento.publicarEvento("¡Hola, este es un evento personalizado!");
        return "Evento publicado";
    }
}
<br>Este ejemplo demuestra cómo los eventos personalizados pueden ser utilizados en Spring para comunicar información entre diferentes componentes de una manera desacoplada.<br><br><br>Los estudiantes deben planificar y diseñar una aplicación utilizando las habilidades y conocimientos adquiridos durante el curso.<br><br>Se dedica tiempo en clase para trabajar en el proyecto, con la oportunidad de realizar consultas y obtener retroalimentación.<br><br>Los proyectos finales se presentan al grupo, permitiendo compartir aprendizajes y recibir retroalimentación de compañeros y profesores.]]></description><link>acceso-a-datos\acd-main\tema-4-spring\6-clase-temas-avanzados-y-proyecto-final.html</link><guid isPermaLink="false">ACCESO-A-DATOS/ACD-main/Tema 4 - Spring/6 Clase Temas Avanzados y Proyecto Final.md</guid><pubDate>Tue, 16 Jan 2024 11:17:35 GMT</pubDate></item><item><title><![CDATA[<strong>Acceso a Bases de Datos NoSQL con MongoDB en Java</strong>]]></title><description><![CDATA[ 
 <br><br>MongoDB es una base de datos NoSQL orientada a documentos que permite almacenar datos en formato JSON-like (BSON), lo que facilita su escalabilidad y flexibilidad. En Java, el acceso a MongoDB se realiza mediante el controlador oficial MongoDB Java Driver o frameworks como Spring Data MongoDB.<br><br>Para conectarnos a MongoDB desde Java, es necesario agregar la dependencia en Maven:<br>&lt;dependency&gt;
    &lt;groupId&gt;org.mongodb&lt;/groupId&gt;
    &lt;artifactId&gt;mongodb-driver-sync&lt;/artifactId&gt;
    &lt;version&gt;4.4.1&lt;/version&gt;
&lt;/dependency&gt;
<br><br>El siguiente ejemplo muestra cómo establecer una conexión con MongoDB:<br>import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoDatabase;

public class ConexionMongo {
    public static void main(String[] args) {
        String uri = "mongodb://localhost:27017";
        MongoClient mongoClient = MongoClients.create(uri);
        MongoDatabase database = mongoClient.getDatabase("miBaseDeDatos");
        System.out.println("Conexión exitosa a la base de datos: " + database.getName());
    }
}
<br><br><br>import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import org.bson.Document;

public class InsertarDocumento {
    public static void main(String[] args) {
        MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
        MongoDatabase database = mongoClient.getDatabase("miBaseDeDatos");
        MongoCollection&lt;Document&gt; collection = database.getCollection("usuarios");

        Document documento = new Document("nombre", "Juan Pérez")
                .append("edad", 30)
                .append("email", "juan.perez@email.com");

        collection.insertOne(documento);
        System.out.println("Documento insertado correctamente");
    }
}
<br><br>import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import org.bson.Document;

public class LeerDocumentos {
    public static void main(String[] args) {
        MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
        MongoDatabase database = mongoClient.getDatabase("miBaseDeDatos");
        MongoCollection&lt;Document&gt; collection = database.getCollection("usuarios");

        FindIterable&lt;Document&gt; documentos = collection.find();
        for (Document doc : documentos) {
            System.out.println(doc.toJson());
        }
    }
}
<br><br>import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;

public class ActualizarDocumento {
    public static void main(String[] args) {
        MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
        MongoDatabase database = mongoClient.getDatabase("miBaseDeDatos");
        MongoCollection&lt;Document&gt; collection = database.getCollection("usuarios");

        collection.updateOne(Filters.eq("nombre", "Juan Pérez"), Updates.set("edad", 35));
        System.out.println("Documento actualizado correctamente");
    }
}
<br><br>import com.mongodb.client.model.Filters;

public class EliminarDocumento {
    public static void main(String[] args) {
        MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
        MongoDatabase database = mongoClient.getDatabase("miBaseDeDatos");
        MongoCollection&lt;Document&gt; collection = database.getCollection("usuarios");

        collection.deleteOne(Filters.eq("nombre", "Juan Pérez"));
        System.out.println("Documento eliminado correctamente");
    }
}
<br><br>Spring Data MongoDB simplifica el acceso a MongoDB mediante repositorios y anotaciones.<br><br>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;
    &lt;version&gt;2.7.1&lt;/version&gt;
&lt;/dependency&gt;
<br><br>spring.data.mongodb.uri=mongodb://localhost:27017/miBaseDeDatos
<br><br>import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Document(collection = "usuarios")
public class Usuario {
    @Id
    private String id;
    private String nombre;
    private int edad;
    private String email;
    
    // Getters y Setters
}
<br><br>import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface UsuarioRepository extends MongoRepository&lt;Usuario, String&gt; {
    Usuario findByNombre(String nombre);
}
]]></description><link>acceso-a-datos\acceso-a-bases-de-datos-nosql-con-mongodb.html</link><guid isPermaLink="false">ACCESO-A-DATOS/Acceso a Bases de Datos NoSQL con MongoDB.md</guid><pubDate>Thu, 20 Feb 2025 10:49:52 GMT</pubDate></item><item><title><![CDATA[<strong>Acceso a Bases de Datos Relacionales en Java</strong>]]></title><description><![CDATA[ 
 <br><br>El acceso a bases de datos relacionales en Java se realiza principalmente mediante JDBC (Java Database Connectivity), JPA (Java Persistence API) y frameworks como Hibernate y Spring Data JPA. Estas tecnologías permiten interactuar con bases de datos relacionales de manera eficiente y segura.<br><br>JDBC es una API estándar de Java para la conexión y manipulación de bases de datos relacionales.<br><br>
<br>Cargar el controlador JDBC
<br>Establecer una conexión con la base de datos
<br>Crear una sentencia SQL
<br>Ejecutar la consulta y procesar los resultados
<br>Cerrar la conexión
<br><br>import java.sql.*;

public class ConexionDB {
    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/miBaseDeDatos";
        String usuario = "root";
        String clave = "password";

        try (Connection conexion = DriverManager.getConnection(url, usuario, clave)) {
            System.out.println("Conexión exitosa");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
<br><br>JPA es una especificación para la gestión de persistencia de datos en Java. Se usa comúnmente con frameworks como Hibernate.<br><br>import jakarta.persistence.*;

@Entity
@Table(name = "usuarios")
public class Usuario {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String nombre;
    private String email;
    
    // Getters y Setters
}
<br><br>Hibernate es una implementación de JPA que simplifica la interacción con bases de datos mediante mapeo objeto-relacional (ORM).<br><br>&lt;hibernate-configuration&gt;
    &lt;session-factory&gt;
        &lt;property name="hibernate.connection.driver_class"&gt;com.mysql.cj.jdbc.Driver&lt;/property&gt;
        &lt;property name="hibernate.connection.url"&gt;jdbc:mysql://localhost:3306/miBaseDeDatos&lt;/property&gt;
        &lt;property name="hibernate.connection.username"&gt;root&lt;/property&gt;
        &lt;property name="hibernate.connection.password"&gt;password&lt;/property&gt;
        &lt;property name="hibernate.dialect"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;
        &lt;property name="hibernate.show_sql"&gt;true&lt;/property&gt;
    &lt;/session-factory&gt;
&lt;/hibernate-configuration&gt;
<br><br>Spring Data JPA simplifica aún más la gestión de datos al proporcionar repositorios con métodos CRUD automáticos.<br><br>import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface UsuarioRepository extends JpaRepository&lt;Usuario, Long&gt; {
    Usuario findByNombre(String nombre);
}
]]></description><link>acceso-a-datos\acceso-a-bases-de-datos-relacionales.html</link><guid isPermaLink="false">ACCESO-A-DATOS/Acceso a Bases de Datos Relacionales.md</guid><pubDate>Thu, 20 Feb 2025 10:45:22 GMT</pubDate></item><item><title><![CDATA[¿Qué es el acceso a datos?]]></title><description><![CDATA[ 
 <br><br>El acceso a datos se refiere a las técnicas y métodos que permiten a una aplicación interactuar con diversas fuentes de datos, como bases de datos, archivos de texto, archivos binarios, entre otros.<br><br><br>
<br><a data-href="Acceso a ficheros" href="\acceso-a-datos\acceso-a-ficheros.html" class="internal-link" target="_self" rel="noopener nofollow">Acceso a ficheros</a>
<br><br>
<br><a data-href="Acceso a Bases de Datos Relacionales" href="\acceso-a-datos\acceso-a-bases-de-datos-relacionales.html" class="internal-link" target="_self" rel="noopener nofollow">Acceso a Bases de Datos Relacionales</a>
<br><a data-href="Mapeo Objeto-Relacional  con Hibernate" href="\acceso-a-datos\mapeo-objeto-relacional-con-hibernate.html" class="internal-link" target="_self" rel="noopener nofollow">Mapeo Objeto-Relacional  con Hibernate</a>
<br><a data-href="Acceso a Bases de Datos NoSQL con MongoDB" href="\acceso-a-datos\acceso-a-bases-de-datos-nosql-con-mongodb.html" class="internal-link" target="_self" rel="noopener nofollow">Acceso a Bases de Datos NoSQL con MongoDB</a>
<br><a data-href="Creación de servicios web con Spring" href="\acceso-a-datos\creación-de-servicios-web-con-spring.html" class="internal-link" target="_self" rel="noopener nofollow">Creación de servicios web con Spring</a>
<br><a data-href="Despliegue de servicios web" href="\acceso-a-datos\despliegue-de-servicios-web.html" class="internal-link" target="_self" rel="noopener nofollow">Despliegue de servicios web</a>
<br><a data-href="Creación de una API" href="\acceso-a-datos\creación-de-una-api.html" class="internal-link" target="_self" rel="noopener nofollow">Creación de una API</a>
]]></description><link>acceso-a-datos\acceso-a-datos.html</link><guid isPermaLink="false">ACCESO-A-DATOS/Acceso a Datos.md</guid><pubDate>Thu, 20 Feb 2025 10:48:55 GMT</pubDate></item><item><title><![CDATA[Acceso a Ficheros]]></title><description><![CDATA[ 
 <br><br>La forma básica para acceder a un <a data-href="fichero" href="\fichero" class="internal-link" target="_self" rel="noopener nofollow">fichero</a> en Java es mediante la <a data-href="clase" href="\programacion-de-multimedia-y-dispositivos-moviles\clase.html" class="internal-link" target="_self" rel="noopener nofollow">clase</a> <a data-href="File" href="\File" class="internal-link" target="_self" rel="noopener nofollow">File</a>. Sin embargo, esta es la clase más básica; existen clases específicas para leer y escribir archivos de texto.<br><br>Java proporciona diferentes medios para interactuar con los datos:<br>
<br><a data-href="Stream" href="\acceso-a-datos\stream.html" class="internal-link" target="_self" rel="noopener nofollow">Stream</a>
<br><a data-href="Buffer" href="\acceso-a-datos\buffer.html" class="internal-link" target="_self" rel="noopener nofollow">Buffer</a>
<br><a data-href="Archivo" href="\acceso-a-datos\archivo.html" class="internal-link" target="_self" rel="noopener nofollow">Archivo</a>
<br><a data-href="Clases para Acceso a Datos" href="\acceso-a-datos\clases-para-acceso-a-datos.html" class="internal-link" target="_self" rel="noopener nofollow">Clases para Acceso a Datos</a>
<br>Java permite trabajar con tres tipos principales de archivos, además de directorios:<br>
<br>Ficheros binarios (.bin)
<br>Ficheros de texto (.txt)
<br>Ficheros estructurados (.json, .xml) - Son variantes de los archivos de texto y dependen de librerías externas.
<br><br><br>
<br>FileWriter
<br>BufferedWriter
<br><br>
<br>FileReader
<br>BufferedReader
<br><br><br>
<br>FileOutputStream
<br>DataOutputStream
<br><br>
<br>FileInputStream
<br>DataInputStream
<br>Para visualizar y comprender mejor, consulta <a data-tooltip-position="top" aria-label="Clases para trabajar con ficheros.canvas" data-href="Clases para trabajar con ficheros.canvas" href="\acceso-a-datos\clases-para-trabajar-con-ficheros.html" class="internal-link" target="_self" rel="noopener nofollow">Clases para trabajar con ficheros</a>.<br><br>
<br>FileReader es una subclase de InputStreamReader.
<br>StreamReader es más eficiente en el uso de recursos que FileReader.
<br>FileReader lee archivos en el formato del sistema, mientras que InputStreamReader permite cambiar el formato.
<br><br>Para verificar la existencia de un archivo, usamos la clase File:<br>File ruta = new File("./archivoTexto.txt");
<br>Esto permite localizar el archivo, pero no trabajar con él. Para eso, utilizamos clases que heredan de File, como FileWriter y FileReader:<br>FileReader leerArchivo = new FileReader("./archivoTexto.txt");
<br><br><br><br>El método read() puede generar errores, por lo que se recomienda el uso de try-catch. Además, es importante cerrar el recurso para evitar fugas de memoria:<br>try {
    FileReader fR = new FileReader("ruta/archivo.txt");
    int indice;
    while ((indice = fR.read()) != -1) {
        System.out.println((char) indice);
    }
    /* Cierre del recurso */
    fR.close();
} catch (IOException e) {
    e.printStackTrace();
} catch (Exception e) {
    System.err.println("Error: " + e.getMessage());
}
<br>Es fundamental cerrar el recurso para evitar que el programa se vea afectado por demasiados archivos abiertos. Para facilitar esto, Java permite el uso de try-with-resources:<br>try (FileReader fR = new FileReader("ruta/archivo.txt")) {
    int indice;
    while ((indice = fR.read()) != -1) {
        System.out.println((char) indice);
    }
} catch (IOException e) {
    e.printStackTrace();
} catch (Exception e) {
    System.err.println("Error: " + e.getMessage());
}
<br>Con esta estructura, el recurso se cerrará automáticamente al finalizar el bloque try.<br><br>El uso de Streams mejora la eficiencia y permite trabajar con métodos adicionales. Un ejemplo es:<br>try (InputStreamReader st = new FileReader(new File("archivo.txt"))) {
    st.read();
} catch (IOException e) {
    e.printStackTrace();
} catch (Exception e) {
    System.err.println("Error: " + e.getMessage());
}
<br>El uso de Streams nos permite combinar diferentes clases para optimizar la lectura y escritura de archivos en Java.]]></description><link>acceso-a-datos\acceso-a-ficheros.html</link><guid isPermaLink="false">ACCESO-A-DATOS/Acceso a ficheros.md</guid><pubDate>Thu, 20 Feb 2025 10:22:12 GMT</pubDate></item><item><title><![CDATA[<strong>¿Qué es un Archivo?</strong>]]></title><description><![CDATA[ 
 <br><br>Un archivo es una unidad de almacenamiento de datos que permite organizar información de manera estructurada en una computadora. Puede contener distintos tipos de contenido, como texto, imágenes, audio o datos binarios, y es utilizado para su posterior acceso, manipulación y procesamiento.<br><br>Los archivos pueden clasificarse en diversas categorías según su contenido y uso:<br>
<br>Archivos de Texto: Contienen datos en formato de texto plano o estructurado (Ej.: .txt, .csv, .json, .xml).
<br>Archivos Binarios: Almacenan datos en un formato no legible directamente por humanos (Ej.: .exe, .dat, .bin).
<br>Archivos Multimedia: Incluyen imágenes, audio y video (Ej.: .jpg, .png, .mp3, .mp4, .avi).
<br>Archivos Comprimidos: Reducen el tamaño de los datos para almacenamiento o transferencia (Ej.: .zip, .rar, .tar, .gz).
<br>Archivos de Configuración: Contienen parámetros y ajustes de programas o sistemas (Ej.: .ini, .cfg, .env).
<br>Archivos Ejecutables: Contienen código que puede ejecutarse en un sistema operativo (Ej.: .exe, .bat, .sh, .jar).
<br><br>
<br>Estructura: Pueden ser secuenciales, indexados o de acceso aleatorio.
<br>Persistencia: Mantienen los datos almacenados incluso después de apagar el sistema.
<br>Formato: Pueden estar estructurados en formato legible o binario.
<br>Extensión: Indica el tipo de contenido y con qué programas pueden abrirse.
<br>Permisos de Acceso: Pueden tener restricciones de lectura, escritura o ejecución.
<br>Tamaño: Depende de la cantidad de datos almacenados y del tipo de contenido.
<br>Integridad: Puede verificarse mediante sumas de verificación o algoritmos de seguridad.
<br><br>
<br>Creación: Generar un nuevo archivo en el sistema.
<br>Apertura: Acceder a su contenido para lectura o escritura.
<br>Lectura: Extraer información almacenada.
<br>Escritura: Modificar o agregar información.
<br>Cierre: Finalizar el acceso a un archivo.
<br>Eliminación: Borrar permanentemente un archivo del almacenamiento.
<br>Copiado y Movimiento: Transferir datos entre ubicaciones.
<br>Los archivos son fundamentales en el almacenamiento de datos y en la ejecución de programas dentro de un sistema operativo, proporcionando una forma estructurada de organizar la información de manera eficiente y accesible.]]></description><link>acceso-a-datos\archivo.html</link><guid isPermaLink="false">ACCESO-A-DATOS/Archivo.md</guid><pubDate>Thu, 20 Feb 2025 10:30:03 GMT</pubDate></item><item><title><![CDATA[<strong>¿Qué es un Buffer?</strong>]]></title><description><![CDATA[ 
 <br><br>Un buffer es una región de memoria temporal utilizada para almacenar datos mientras se transfieren entre diferentes partes de un sistema. Su propósito principal es optimizar el rendimiento del procesamiento de datos al reducir la latencia y mejorar la eficiencia en la comunicación entre dispositivos o procesos.<br>El buffer se emplea cuando la velocidad de lectura y escritura entre dos componentes no coincide. Puede ubicarse en la memoria RAM, en la memoria caché o incluso en el disco duro, dependiendo del contexto de uso.<br><br>
<br>Almacenamiento Temporal: Retiene datos antes de que sean procesados o transferidos.
<br>Optimización de Rendimiento: Reduce los tiempos de espera en la comunicación entre dispositivos.
<br>Administración Automática: El sistema gestiona su uso de manera dinámica.
<br>Prevención de Pérdida de Datos: Actúa como una reserva para evitar la sobrecarga de procesos rápidos sobre procesos más lentos.
<br><br>
<br>Streaming de Audio y Video: Almacena fragmentos de contenido para una reproducción continua sin interrupciones.
<br>Entrada y Salida de Datos: Optimiza la transferencia de información entre el procesador y dispositivos como discos duros, impresoras y redes.
<br>Procesamiento de Archivos: Mejora la eficiencia en la manipulación de grandes volúmenes de datos.
<br>Interacción con la Red: Reduce la latencia en la transmisión de datos en redes de comunicación.
]]></description><link>acceso-a-datos\buffer.html</link><guid isPermaLink="false">ACCESO-A-DATOS/Buffer.md</guid><pubDate>Thu, 20 Feb 2025 10:31:19 GMT</pubDate></item><item><title><![CDATA[Clases para Acceso a Datos]]></title><description><![CDATA[ 
 <br>El acceso a datos en Java se gestiona a través de diferentes clases y tecnologías que permiten la interacción con bases de datos, archivos y otras fuentes de información. Estas clases facilitan la lectura, escritura, manipulación y persistencia de datos en diversos formatos.<br><br><br>JDBC es una API que permite conectar aplicaciones Java con bases de datos relacionales. Las principales clases incluyen:<br>
<br>DriverManager: Gestiona los controladores de bases de datos.
<br>Connection: Representa una conexión con una base de datos.
<br>Statement: Permite ejecutar consultas SQL.
<br>PreparedStatement: Mejora el rendimiento y seguridad en consultas parametrizadas.
<br>ResultSet: Maneja los resultados de una consulta.
<br>Ejemplo de conexión a una base de datos:<br>try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/miDB", "usuario", "contraseña")) {
    Statement stmt = conn.createStatement();
    ResultSet rs = stmt.executeQuery("SELECT * FROM usuarios");
    while (rs.next()) {
        System.out.println("Usuario: " + rs.getString("nombre"));
    }
} catch (SQLException e) {
    e.printStackTrace();
}
<br><br>Hibernate es un framework ORM (Object-Relational Mapping) que facilita la manipulación de bases de datos mediante objetos Java.<br>Principales clases y anotaciones:<br>
<br>SessionFactory: Se encarga de gestionar sesiones.
<br>Session: Representa una sesión con la base de datos.
<br>@Entity: Define una clase como entidad de base de datos.
<br>@Table: Especifica la tabla de la base de datos.
<br>@Column: Define las columnas de la tabla.
<br>Ejemplo de una clase de entidad en Hibernate:<br>@Entity
@Table(name = "usuarios")
public class Usuario {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(name = "nombre")
    private String nombre;
}
<br><br>JPA es una especificación para el manejo de persistencia en Java. Hibernate es una de sus implementaciones más populares.<br>Principales interfaces:<br>
<br>EntityManager: Gestiona entidades en la base de datos.
<br>EntityTransaction: Controla transacciones.
<br>Query: Ejecuta consultas en la base de datos.
<br>Ejemplo de uso de JPA:<br>EntityManagerFactory emf = Persistence.createEntityManagerFactory("miUnidadPersistencia");
EntityManager em = emf.createEntityManager();
em.getTransaction().begin();

Usuario usuario = new Usuario();
usuario.setNombre("Juan Pérez");
em.persist(usuario);

em.getTransaction().commit();
em.close();
<br><br>Spring Data JPA simplifica el acceso a bases de datos mediante la abstracción de repositorios.<br>Principales componentes:<br>
<br>JpaRepository: Proporciona métodos CRUD automáticos.
<br>@Repository: Indica que una interfaz es un repositorio.
<br>Ejemplo de repositorio en Spring Data JPA:<br>@Repository
public interface UsuarioRepository extends JpaRepository&lt;Usuario, Long&gt; {
    List&lt;Usuario&gt; findByNombre(String nombre);
}
<br><br>Java también proporciona clases para acceder y manipular archivos como fuente de datos.<br>Principales clases:<br>
<br>File: Representa un archivo o directorio.
<br>FileReader / FileWriter: Lectura y escritura de archivos de texto.
<br>BufferedReader / BufferedWriter: Lectura y escritura eficiente con buffer.
<br>FileInputStream / FileOutputStream: Manejo de archivos binarios.
<br>Ejemplo de lectura de archivo:<br>try (BufferedReader br = new BufferedReader(new FileReader("archivo.txt"))) {
    String linea;
    while ((linea = br.readLine()) != null) {
        System.out.println(linea);
    }
} catch (IOException e) {
    e.printStackTrace();
}
]]></description><link>acceso-a-datos\clases-para-acceso-a-datos.html</link><guid isPermaLink="false">ACCESO-A-DATOS/Clases para Acceso a Datos.md</guid><pubDate>Thu, 20 Feb 2025 10:24:09 GMT</pubDate></item><item><title><![CDATA[<strong>Creación de Servicios Web con Spring</strong>]]></title><description><![CDATA[ 
 <br><br>Spring Boot es un framework de Java que permite crear servicios web de manera rápida y sencilla. Proporciona herramientas para el desarrollo de APIs RESTful, facilitando la integración con otras aplicaciones y sistemas.<br><br>Para crear un servicio web con Spring Boot, primero debemos configurar un proyecto en Spring Initializr o agregar las dependencias necesarias en Maven:<br>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
&lt;/dependency&gt;
<br><br>Un controlador REST es una clase que gestiona las solicitudes HTTP y devuelve respuestas en formato JSON o XML.<br><br>import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api")
public class UsuarioController {
    
    @GetMapping("/saludo")
    public String saludo() {
        return "¡Hola desde Spring Boot!";
    }
}
<br><br>Para manejar datos en la aplicación, definimos una entidad que represente los objetos que se almacenarán en la base de datos.<br>import javax.persistence.*;

@Entity
@Table(name = "usuarios")
public class Usuario {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String nombre;
    private String email;
    
    // Getters y Setters
}
<br><br>Spring Data JPA facilita la comunicación con la base de datos mediante interfaces de repositorio.<br>import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface UsuarioRepository extends JpaRepository&lt;Usuario, Long&gt; {
    Usuario findByNombre(String nombre);
}
<br><br>El servicio contiene la lógica de negocio de la aplicación y se comunica con el repositorio para realizar operaciones CRUD.<br>import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class UsuarioService {
    private final UsuarioRepository usuarioRepository;
    
    public UsuarioService(UsuarioRepository usuarioRepository) {
        this.usuarioRepository = usuarioRepository;
    }
    
    public List&lt;Usuario&gt; listarUsuarios() {
        return usuarioRepository.findAll();
    }
}
<br><br>El controlador se comunica con el servicio para exponer los datos a través de endpoints REST.<br>@RestController
@RequestMapping("/api/usuarios")
public class UsuarioController {
    private final UsuarioService usuarioService;
    
    public UsuarioController(UsuarioService usuarioService) {
        this.usuarioService = usuarioService;
    }
    
    @GetMapping
    public List&lt;Usuario&gt; listarUsuarios() {
        return usuarioService.listarUsuarios();
    }
}
<br><br>Para ejecutar la aplicación, utilizamos el método main en la clase principal:<br>import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class AplicacionSpring {
    public static void main(String[] args) {
        SpringApplication.run(AplicacionSpring.class, args);
    }
}
<br><br>Una vez en ejecución, podemos probar los endpoints usando Postman o el navegador.<br>Ejemplo de solicitud GET:<br>GET http://localhost:8080/api/usuarios
]]></description><link>acceso-a-datos\creación-de-servicios-web-con-spring.html</link><guid isPermaLink="false">ACCESO-A-DATOS/Creación de servicios web con Spring.md</guid><pubDate>Thu, 20 Feb 2025 10:51:27 GMT</pubDate></item><item><title><![CDATA[<strong>Creación de una API con Spring Boot</strong>]]></title><description><![CDATA[ 
 <br><br>Spring Boot es un framework de Java que facilita la creación de APIs RESTful de manera rápida y eficiente. Permite manejar solicitudes HTTP, trabajar con bases de datos y generar aplicaciones escalables.<br><br>Para iniciar un proyecto en Spring Boot, se puede utilizar Spring Initializr o agregar las dependencias necesarias en Maven:<br>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-h2&lt;/artifactId&gt;
&lt;/dependency&gt;
<br><br>Un controlador en Spring Boot gestiona las solicitudes HTTP y devuelve respuestas en formato JSON o XML.<br>import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/usuarios")
public class UsuarioController {
    private final UsuarioService usuarioService;
    
    public UsuarioController(UsuarioService usuarioService) {
        this.usuarioService = usuarioService;
    }
    
    @GetMapping
    public List&lt;Usuario&gt; listarUsuarios() {
        return usuarioService.listarUsuarios();
    }
    
    @PostMapping
    public Usuario crearUsuario(@RequestBody Usuario usuario) {
        return usuarioService.guardarUsuario(usuario);
    }
}
<br><br>La entidad representa la estructura de la tabla en la base de datos.<br>import javax.persistence.*;

@Entity
@Table(name = "usuarios")
public class Usuario {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String nombre;
    private String email;
    
    // Getters y Setters
}
<br><br>Un repositorio maneja las operaciones con la base de datos mediante JPA.<br>import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface UsuarioRepository extends JpaRepository&lt;Usuario, Long&gt; {}
<br><br>El servicio contiene la lógica de negocio para la API.<br>import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class UsuarioService {
    private final UsuarioRepository usuarioRepository;
    
    public UsuarioService(UsuarioRepository usuarioRepository) {
        this.usuarioRepository = usuarioRepository;
    }
    
    public List&lt;Usuario&gt; listarUsuarios() {
        return usuarioRepository.findAll();
    }
    
    public Usuario guardarUsuario(Usuario usuario) {
        return usuarioRepository.save(usuario);
    }
}
<br><br>Para usar una base de datos en memoria H2, agregar la siguiente configuración:<br>spring.datasource.url=jdbc:h2:mem:miDB
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
<br><br>Para ejecutar la API, utilizar el comando:<br>mvn spring-boot:run
<br><br>Con la API en ejecución, se pueden probar los endpoints con Postman o cURL.<br><br>curl -X GET http://localhost:8080/api/usuarios
<br><br>curl -X POST http://localhost:8080/api/usuarios \
     -H "Content-Type: application/json" \
     -d '{"nombre": "Juan Pérez", "email": "juan.perez@email.com"}'
]]></description><link>acceso-a-datos\creación-de-una-api.html</link><guid isPermaLink="false">ACCESO-A-DATOS/Creación de una API.md</guid><pubDate>Thu, 20 Feb 2025 10:57:57 GMT</pubDate></item><item><title><![CDATA[<strong>Despliegue de Servicios Web</strong>]]></title><description><![CDATA[ 
 <br><br>El despliegue de servicios web es el proceso de poner en producción una API o aplicación para que esté accesible a los usuarios. Se pueden utilizar diferentes estrategias y plataformas según las necesidades del proyecto.<br><br><br>
<br>Se ejecuta la aplicación en un servidor propio.
<br>Útil para entornos de desarrollo o pruebas.
<br>Se usa un servidor como Tomcat, WildFly o Jetty.
<br><br>
<br>Servicios como AWS, Google Cloud, Azure, Heroku o Railway permiten la publicación en la nube.
<br>Escalabilidad y disponibilidad garantizadas.
<br><br>
<br>Uso de Docker y Kubernetes para ejecutar servicios en entornos aislados.
<br>Facilita la portabilidad y la administración del servicio.
<br><br><br>Para empaquetar una aplicación Spring Boot en un archivo .jar ejecutable:<br>mvn clean package
<br>Esto generará un archivo en target/mi-aplicacion.jar.<br>Para ejecutarlo:<br>java -jar target/mi-aplicacion.jar
<br><br>Para cambiar el puerto de la aplicación, modificar application.properties:<br>server.port=8081
<br>Si se usan variables de entorno:<br>export SERVER_PORT=8081
<br><br>Si se desea desplegar en Apache Tomcat, se debe generar un .war en lugar de un .jar:<br>&lt;packaging&gt;war&lt;/packaging&gt;
<br>Luego, copiar el archivo generado en la carpeta webapps de Tomcat y reiniciar el servidor.<br><br><br>
<br>
Instalar Heroku CLI.

<br>
Iniciar sesión:
heroku login


<br>
Crear una aplicación:
heroku create mi-aplicacion


<br>
Subir el código:
git push heroku main


<br>
Escalar la aplicación:
heroku ps:scale web=1


<br><br>
<br>
Crear un Dockerfile:
FROM openjdk:17
COPY target/mi-aplicacion.jar app.jar
ENTRYPOINT ["java", "-jar", "app.jar"]


<br>
Construir la imagen:
docker build -t mi-aplicacion .


<br>
Ejecutar el contenedor:
docker run -p 8080:8080 mi-aplicacion


<br><br>Después del despliegue, es fundamental monitorizar y mantener el servicio:<br>
<br>Logs y errores: journalctl, docker logs o herramientas como ELK Stack.
<br>Salud del servicio: Uso de Spring Actuator con /actuator/health.
<br>Escalabilidad: Uso de Kubernetes o servicios en la nube para manejar cargas.
]]></description><link>acceso-a-datos\despliegue-de-servicios-web.html</link><guid isPermaLink="false">ACCESO-A-DATOS/Despliegue de servicios web.md</guid><pubDate>Thu, 20 Feb 2025 10:53:15 GMT</pubDate></item><item><title><![CDATA[<strong>Dirección Absoluta</strong>]]></title><description><![CDATA[ 
 <br><br>En informática, una dirección absoluta es una referencia única que permite localizar y acceder a un recurso específico dentro de un sistema. Esta dirección puede hacer referencia a una ubicación en memoria, un archivo dentro de un sistema de almacenamiento o un dispositivo en una red.<br><br>
<br>Unicidad: Identifica de manera única la ubicación del recurso.
<br>Rango Completo: Especifica la ruta completa desde el origen hasta el destino.
<br>Independencia de Contexto: No depende de la ubicación actual del usuario o del sistema para su interpretación.
<br>Uso en Distintos Entornos: Se aplica en sistemas de archivos, direcciones IP en redes y ubicaciones de memoria en programación.
<br><br>
<br>
Sistema de Archivos:

<br>Windows: C:\Usuarios\Documentos\archivo.txt
<br>Linux/macOS: /home/usuario/documentos/archivo.txt


<br>
Dirección de Memoria:

<br>0x7fff5678abcd en un programa en C.


<br>
Redes:

<br>Dirección IP: 192.168.1.1
<br>URL completa: https://www.ejemplo.com/index.html


<br>El uso de direcciones absolutas garantiza una localización precisa y evita ambigüedades al acceder a recursos en sistemas informáticos.]]></description><link>acceso-a-datos\dirección-absoluta.html</link><guid isPermaLink="false">ACCESO-A-DATOS/Dirección Absoluta.md</guid><pubDate>Thu, 20 Feb 2025 10:33:52 GMT</pubDate></item><item><title><![CDATA[<strong>Dirección de Base</strong>]]></title><description><![CDATA[ 
 <br><br><br>En ciencias de la computación, la dirección de base es una dirección de memoria utilizada como punto de referencia para calcular otras direcciones dentro de un sistema. Se emplea comúnmente en administración de memoria, segmentación y paginación en sistemas operativos.<br><br>La dirección absoluta se obtiene sumando un desplazamiento (offset) a la dirección de base:<br>Fórmula:<br>
[\text{Dirección absoluta} = \text{Dirección de base} + \text{Desplazamiento}]<br><br>Si una tabla de datos comienza en la dirección de memoria 1000 y se quiere acceder a la celda con desplazamiento 50, la dirección absoluta sería:<br>[<br>
1000 + 50 = 1050<br>
]<br><br>
<br>Administración de memoria: Usada en la segmentación de memoria.  
<br>Registros en ensamblador: Utilizada para referenciar datos en registros como BP (Base Pointer) en x86.  
<br>Sistemas operativos: Ayuda a la gestión de memoria virtual y real.  
<br><br><br>Aquí hay un ejemplo de cómo se usa la dirección de base en ensamblador:<br>MOV BX, 1000h   ; Dirección de base
ADD BX, 50h     ; Sumar desplazamiento
MOV AX, [BX]    ; Acceder a la dirección absoluta

]]></description><link>acceso-a-datos\dirección-de-base.html</link><guid isPermaLink="false">ACCESO-A-DATOS/Dirección de Base.md</guid><pubDate>Thu, 20 Feb 2025 10:34:27 GMT</pubDate></item><item><title><![CDATA[<strong>Mapeo Objeto-Relacional (ORM) con Hibernate</strong>]]></title><description><![CDATA[ 
 <br><br>El Mapeo Objeto-Relacional (ORM) es una técnica que permite la interacción entre una base de datos relacional y objetos de una aplicación orientada a objetos. Hibernate es un framework de Java que implementa JPA (Java Persistence API) y facilita el trabajo con bases de datos a través de la conversión automática de objetos Java en registros de una base de datos y viceversa.<br><br>Hibernate es un framework de persistencia de datos que simplifica el acceso a bases de datos mediante un enfoque orientado a objetos, eliminando la necesidad de escribir consultas SQL manualmente en la mayoría de los casos.<br><br>
<br>Independencia de la base de datos gracias al uso de dialectos específicos.
<br>Gestión automática de transacciones.
<br>Manejo eficiente de la caché para optimizar el rendimiento.
<br>Evita la repetición de código SQL manual.
<br>Soporte para herencia, asociaciones y consultas avanzadas.
<br><br>Para usar Hibernate, es necesario incluir la dependencia en el archivo pom.xml (para proyectos Maven):<br>&lt;dependency&gt;
    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
    &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;
    &lt;version&gt;6.0.0.Final&lt;/version&gt;
&lt;/dependency&gt;
<br>Luego, se debe configurar el archivo hibernate.cfg.xml:<br>&lt;hibernate-configuration&gt;
    &lt;session-factory&gt;
        &lt;property name="hibernate.connection.driver_class"&gt;com.mysql.cj.jdbc.Driver&lt;/property&gt;
        &lt;property name="hibernate.connection.url"&gt;jdbc:mysql://localhost:3306/miBaseDeDatos&lt;/property&gt;
        &lt;property name="hibernate.connection.username"&gt;root&lt;/property&gt;
        &lt;property name="hibernate.connection.password"&gt;password&lt;/property&gt;
        &lt;property name="hibernate.dialect"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;
        &lt;property name="hibernate.show_sql"&gt;true&lt;/property&gt;
    &lt;/session-factory&gt;
&lt;/hibernate-configuration&gt;
<br><br>En Hibernate, una clase se mapea a una tabla de base de datos mediante anotaciones JPA.<br><br>import jakarta.persistence.*;

@Entity
@Table(name = "usuarios")
public class Usuario {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(name = "nombre", nullable = false)
    private String nombre;
    
    @Column(name = "email", unique = true)
    private String email;
    
    // Getters y Setters
}
<br><br>Para interactuar con la base de datos, Hibernate utiliza la SessionFactory y Session.<br><br>import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

public class Main {
    public static void main(String[] args) {
        SessionFactory factory = new Configuration().configure("hibernate.cfg.xml").buildSessionFactory();
        Session session = factory.openSession();
        
        Transaction transaction = session.beginTransaction();
        Usuario usuario = new Usuario();
        usuario.setNombre("Juan Pérez");
        usuario.setEmail("juan.perez@email.com");
        
        session.save(usuario);
        transaction.commit();
        session.close();
    }
}
<br><br>Hibernate proporciona el Hibernate Query Language (HQL) para realizar consultas de manera más eficiente que con SQL nativo.<br><br>List&lt;Usuario&gt; usuarios = session.createQuery("FROM Usuario", Usuario.class).list();
usuarios.forEach(u -&gt; System.out.println(u.getNombre()));
<br>También se puede usar la Criteria API para consultas más dinámicas.<br><br>CriteriaBuilder cb = session.getCriteriaBuilder();
CriteriaQuery&lt;Usuario&gt; query = cb.createQuery(Usuario.class);
Root&lt;Usuario&gt; root = query.from(Usuario.class);
query.select(root).where(cb.equal(root.get("nombre"), "Juan Pérez"));

List&lt;Usuario&gt; resultados = session.createQuery(query).getResultList();
]]></description><link>acceso-a-datos\mapeo-objeto-relacional-con-hibernate.html</link><guid isPermaLink="false">ACCESO-A-DATOS/Mapeo Objeto-Relacional  con Hibernate.md</guid><pubDate>Thu, 20 Feb 2025 10:47:49 GMT</pubDate></item><item><title><![CDATA[<strong>¿Qué es un Objeto?</strong>]]></title><description><![CDATA[ 
 <br><br>En programación orientada a objetos (OOP), un objeto es una instancia de una clase que representa una entidad con características y comportamientos específicos. Un objeto encapsula datos y métodos que operan sobre esos datos, permitiendo la modularidad y reutilización del código.<br><br>
<br>Estado: Representa la información o datos del objeto, almacenados en atributos o propiedades.
<br>Comportamiento: Define las acciones que puede realizar el objeto a través de métodos o funciones.
<br>Identidad: Cada objeto es único en memoria, incluso si tiene los mismos atributos que otro.
<br>Encapsulación: Protege los datos internos y controla su acceso mediante modificadores de visibilidad.
<br><br>class Coche {
    String marca;
    int velocidad;
    
    void acelerar() {
        velocidad += 10;
    }
    
    void frenar() {
        velocidad -= 10;
    }
}

public class Main {
    public static void main(String[] args) {
        Coche miCoche = new Coche(); // Creación de un objeto
        miCoche.marca = "Toyota";
        miCoche.velocidad = 0;
        
        miCoche.acelerar();
        System.out.println("Velocidad: " + miCoche.velocidad);
    }
}
<br><br>
<br>Reutilización del Código: Permite crear múltiples instancias sin duplicar código.
<br>Modularidad: Divide un programa en componentes independientes.
<br>Mantenibilidad: Facilita la corrección y actualización del código.
<br>Escalabilidad: Permite construir sistemas complejos con estructuras organizadas.
<br>Los objetos son la base de la programación orientada a objetos y permiten modelar el mundo real de manera efectiva en el desarrollo de software.]]></description><link>acceso-a-datos\objeto.html</link><guid isPermaLink="false">ACCESO-A-DATOS/Objeto.md</guid><pubDate>Thu, 20 Feb 2025 10:35:36 GMT</pubDate></item><item><title><![CDATA[<strong>¿Qué es un Offset?</strong>]]></title><description><![CDATA[ 
 <br><br>El offset es un valor que indica el número de posiciones de memoria que deben sumarse a una <a data-href="Dirección de Base" href="\acceso-a-datos\dirección-de-base.html" class="internal-link" target="_self" rel="noopener nofollow">Dirección de Base</a> para obtener la <a data-href="Dirección Absoluta" href="\acceso-a-datos\dirección-absoluta.html" class="internal-link" target="_self" rel="noopener nofollow">Dirección Absoluta</a>. Se utiliza en múltiples áreas de la informática, especialmente en gestión de memoria, estructuras de datos y manipulación de archivos.<br><br>
<br>Relativo: Su valor depende de una dirección base, es decir, no es una dirección fija.
<br>Desplazamiento: Representa la distancia en bytes desde la dirección base.
<br>Uso en Memoria: Se utiliza en arquitecturas de memoria segmentada y en estructuras como arrays.
<br>Interpretación en Archivos: En lectura y escritura de archivos, el offset permite desplazarse a una posición específica dentro del contenido.
<br><br>#include &lt;stdio.h&gt;

int main() {
    int array[] = {10, 20, 30, 40, 50};
    int *ptr = array; // Dirección base
    
    printf("Valor en posición 2 usando offset: %d\n", *(ptr + 2)); // Desplazamiento de 2 posiciones
    return 0;
}
<br><br>
<br>Gestión de Memoria: Determina ubicaciones en memoria segmentada.
<br>Manipulación de Archivos: Permite desplazarse a posiciones específicas dentro de un archivo.
<br>Estructuras de Datos: Facilita el acceso eficiente a elementos en arrays y estructuras.
<br>Gráficos y Representación de Datos: Se emplea en imágenes y buffers para direccionar píxeles o elementos gráficos.
]]></description><link>acceso-a-datos\offset.html</link><guid isPermaLink="false">ACCESO-A-DATOS/Offset.md</guid><pubDate>Thu, 20 Feb 2025 10:39:58 GMT</pubDate></item><item><title><![CDATA[<strong>Framework en el Desarrollo Back-End</strong>]]></title><description><![CDATA[ 
 <br><br>Un framework plantea un nuevo esquema para organizar las clases y estructurar el desarrollo de aplicaciones. Puede estar orientado a diferentes propósitos, pero generalmente se utiliza en el desarrollo back-end para mejorar la modularidad, reutilización de código y mantenimiento del software.<br><br>La inyección de dependencias es un concepto clave en los frameworks modernos, permitiendo desacoplar componentes y facilitar la gestión de dependencias.<br><br>El control de inversión (IoC) es un principio que delega la gestión del flujo de control a un contenedor, en lugar de que las clases controlen directamente sus dependencias.<br><br>El Application Context en frameworks como Spring proporciona una forma centralizada de gestionar beans, configuraciones y dependencias dentro de la aplicación.<br><br><br>Spring ofrece varias herramientas para el desarrollo en Java:<br>
<br>Spring Framework: Un conjunto de bibliotecas que facilitan la inyección de dependencias, transacciones, seguridad y más.
<br>Spring Boot: Proporciona una configuración automática y simplificada para desarrollar aplicaciones con Spring.
<br>Spring API: Conjunto de herramientas para la creación y consumo de APIs REST con Spring.
]]></description><link>acceso-a-datos\spring-framework.html</link><guid isPermaLink="false">ACCESO-A-DATOS/Spring Framework.md</guid><pubDate>Fri, 14 Feb 2025 21:33:00 GMT</pubDate></item><item><title><![CDATA[<strong>Stream en Computación</strong>]]></title><description><![CDATA[ 
 <br><br><br>Un Stream es un flujo continuo de datos utilizado para la entrada (input) y salida (output) en un sistema. Permite procesar información de manera eficiente sin necesidad de cargarla completamente en memoria.<br><br>Los streams pueden clasificarse en dos grandes categorías:<br>
<br>
Streams de Entrada (Input Stream)  

<br>Permiten leer datos desde una fuente (teclado, archivos, red, etc.).
<br>Ejemplo en Java: FileInputStream, BufferedReader, InputStreamReader.


<br>
Streams de Salida (Output Stream)  

<br>Permiten escribir datos en un destino (consola, archivos, red, etc.).
<br>Ejemplo en Java: FileOutputStream, BufferedWriter, OutputStreamWriter.


<br><br>import java.io.*;

public class LeerArchivo {
    public static void main(String[] args) {
        try (FileInputStream fis = new FileInputStream("archivo.txt")) {
            int caracter;
            while ((caracter = fis.read()) != -1) {
                System.out.print((char) caracter);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
<br><br>
<br>Permiten manejar grandes volúmenes de datos sin consumir mucha memoria.  
<br>Facilitan la comunicación entre diferentes fuentes de datos (archivos, redes, memoria).  
<br>Mejoran la eficiencia en operaciones de lectura/escritura.  
]]></description><link>acceso-a-datos\stream.html</link><guid isPermaLink="false">ACCESO-A-DATOS/Stream.md</guid><pubDate>Fri, 14 Feb 2025 21:34:25 GMT</pubDate></item><item><title><![CDATA[<strong>Botones en Bootstrap</strong>]]></title><description><![CDATA[ 
 <br><br>Bootstrap proporciona una variedad de estilos y tamaños para los botones, permitiendo una personalización rápida y sencilla.<br><br><br>Los botones en Bootstrap se crean utilizando la clase .btn junto con una clase de color:<br>&lt;button class="btn btn-primary"&gt;Primario&lt;/button&gt;
&lt;button class="btn btn-secondary"&gt;Secundario&lt;/button&gt;
&lt;button class="btn btn-success"&gt;Éxito&lt;/button&gt;
&lt;button class="btn btn-danger"&gt;Peligro&lt;/button&gt;
&lt;button class="btn btn-warning"&gt;Advertencia&lt;/button&gt;
&lt;button class="btn btn-info"&gt;Información&lt;/button&gt;
&lt;button class="btn btn-light"&gt;Claro&lt;/button&gt;
&lt;button class="btn btn-dark"&gt;Oscuro&lt;/button&gt;
<br><br><br>Los botones pueden ajustarse en tamaño usando las siguientes clases:<br>
<br>.btn-lg → Botón grande
<br>.btn-sm → Botón pequeño
<br>Ejemplo:<br>&lt;button class="btn btn-primary btn-lg"&gt;Botón Grande&lt;/button&gt;
&lt;button class="btn btn-secondary btn-sm"&gt;Botón Pequeño&lt;/button&gt;
<br><br><br>Para que un botón ocupe todo el ancho disponible, se usa .w-100:<br>&lt;button class="btn btn-primary w-100"&gt;Botón de Ancho Completo&lt;/button&gt;
<br><br><br>Bootstrap permite botones con solo bordes usando .btn-outline-*:<br>&lt;button class="btn btn-outline-primary"&gt;Borde Primario&lt;/button&gt;
&lt;button class="btn btn-outline-success"&gt;Borde Éxito&lt;/button&gt;
&lt;button class="btn btn-outline-danger"&gt;Borde Peligro&lt;/button&gt;
<br><br><br>Para deshabilitar un botón se usa el atributo disabled o la clase .disabled:<br>&lt;button class="btn btn-primary" disabled&gt;Deshabilitado&lt;/button&gt;
&lt;a class="btn btn-secondary disabled" tabindex="-1" aria-disabled="true"&gt;Enlace Deshabilitado&lt;/a&gt;
<br><br><br>Para agregar un icono a un botón, se pueden usar íconos de Bootstrap Icons:<br>&lt;button class="btn btn-primary"&gt;
  &lt;i class="bi bi-plus-circle"&gt;&lt;/i&gt; Agregar
&lt;/button&gt;
<br><br><br>Los botones pueden agruparse horizontalmente con .btn-group:<br>&lt;div class="btn-group" role="group"&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Izquierda&lt;/button&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Centro&lt;/button&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Derecha&lt;/button&gt;
&lt;/div&gt;
<br>Para agruparlos verticalmente:<br>&lt;div class="btn-group-vertical" role="group"&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 1&lt;/button&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 2&lt;/button&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 3&lt;/button&gt;
&lt;/div&gt;
<br><br>Con estas opciones, puedes personalizar botones en Bootstrap según tus necesidades y mejorar la experiencia de usuario.# Botones en Bootstrap<br>Bootstrap proporciona una variedad de estilos y tamaños para los botones, permitiendo una personalización rápida y sencilla.<br><br><br>Los botones en Bootstrap se crean utilizando la clase .btn junto con una clase de color:<br>&lt;button class="btn btn-primary"&gt;Primario&lt;/button&gt;
&lt;button class="btn btn-secondary"&gt;Secundario&lt;/button&gt;
&lt;button class="btn btn-success"&gt;Éxito&lt;/button&gt;
&lt;button class="btn btn-danger"&gt;Peligro&lt;/button&gt;
&lt;button class="btn btn-warning"&gt;Advertencia&lt;/button&gt;
&lt;button class="btn btn-info"&gt;Información&lt;/button&gt;
&lt;button class="btn btn-light"&gt;Claro&lt;/button&gt;
&lt;button class="btn btn-dark"&gt;Oscuro&lt;/button&gt;
<br><br><br>Los botones pueden ajustarse en tamaño usando las siguientes clases:<br>
<br>.btn-lg → Botón grande
<br>.btn-sm → Botón pequeño
<br>Ejemplo:<br>&lt;button class="btn btn-primary btn-lg"&gt;Botón Grande&lt;/button&gt;
&lt;button class="btn btn-secondary btn-sm"&gt;Botón Pequeño&lt;/button&gt;
<br><br><br>Para que un botón ocupe todo el ancho disponible, se usa .w-100:<br>&lt;button class="btn btn-primary w-100"&gt;Botón de Ancho Completo&lt;/button&gt;
<br><br><br>Bootstrap permite botones con solo bordes usando .btn-outline-*:<br>&lt;button class="btn btn-outline-primary"&gt;Borde Primario&lt;/button&gt;
&lt;button class="btn btn-outline-success"&gt;Borde Éxito&lt;/button&gt;
&lt;button class="btn btn-outline-danger"&gt;Borde Peligro&lt;/button&gt;
<br><br><br>Para deshabilitar un botón se usa el atributo disabled o la clase .disabled:<br>&lt;button class="btn btn-primary" disabled&gt;Deshabilitado&lt;/button&gt;
&lt;a class="btn btn-secondary disabled" tabindex="-1" aria-disabled="true"&gt;Enlace Deshabilitado&lt;/a&gt;
<br><br><br>Para agregar un icono a un botón, se pueden usar íconos de Bootstrap Icons:<br>&lt;button class="btn btn-primary"&gt;
  &lt;i class="bi bi-plus-circle"&gt;&lt;/i&gt; Agregar
&lt;/button&gt;
<br><br><br>Los botones pueden agruparse horizontalmente con .btn-group:<br>&lt;div class="btn-group" role="group"&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Izquierda&lt;/button&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Centro&lt;/button&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Derecha&lt;/button&gt;
&lt;/div&gt;
<br>Para agruparlos verticalmente:<br>&lt;div class="btn-group-vertical" role="group"&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 1&lt;/button&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 2&lt;/button&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 3&lt;/button&gt;
&lt;/div&gt;
<br><br>Con estas opciones, puedes personalizar botones en Bootstrap según tus necesidades y mejorar la experiencia de usuario.# Botones en Bootstrap<br>Bootstrap proporciona una variedad de estilos y tamaños para los botones, permitiendo una personalización rápida y sencilla.<br><br><br>Los botones en Bootstrap se crean utilizando la clase .btn junto con una clase de color:<br>&lt;button class="btn btn-primary"&gt;Primario&lt;/button&gt;
&lt;button class="btn btn-secondary"&gt;Secundario&lt;/button&gt;
&lt;button class="btn btn-success"&gt;Éxito&lt;/button&gt;
&lt;button class="btn btn-danger"&gt;Peligro&lt;/button&gt;
&lt;button class="btn btn-warning"&gt;Advertencia&lt;/button&gt;
&lt;button class="btn btn-info"&gt;Información&lt;/button&gt;
&lt;button class="btn btn-light"&gt;Claro&lt;/button&gt;
&lt;button class="btn btn-dark"&gt;Oscuro&lt;/button&gt;
<br><br><br>Los botones pueden ajustarse en tamaño usando las siguientes clases:<br>
<br>.btn-lg → Botón grande
<br>.btn-sm → Botón pequeño
<br>Ejemplo:<br>&lt;button class="btn btn-primary btn-lg"&gt;Botón Grande&lt;/button&gt;
&lt;button class="btn btn-secondary btn-sm"&gt;Botón Pequeño&lt;/button&gt;
<br><br><br>Para que un botón ocupe todo el ancho disponible, se usa .w-100:<br>&lt;button class="btn btn-primary w-100"&gt;Botón de Ancho Completo&lt;/button&gt;
<br><br><br>Bootstrap permite botones con solo bordes usando .btn-outline-*:<br>&lt;button class="btn btn-outline-primary"&gt;Borde Primario&lt;/button&gt;
&lt;button class="btn btn-outline-success"&gt;Borde Éxito&lt;/button&gt;
&lt;button class="btn btn-outline-danger"&gt;Borde Peligro&lt;/button&gt;
<br><br><br>Para deshabilitar un botón se usa el atributo disabled o la clase .disabled:<br>&lt;button class="btn btn-primary" disabled&gt;Deshabilitado&lt;/button&gt;
&lt;a class="btn btn-secondary disabled" tabindex="-1" aria-disabled="true"&gt;Enlace Deshabilitado&lt;/a&gt;
<br><br><br>Para agregar un icono a un botón, se pueden usar íconos de Bootstrap Icons:<br>&lt;button class="btn btn-primary"&gt;
  &lt;i class="bi bi-plus-circle"&gt;&lt;/i&gt; Agregar
&lt;/button&gt;
<br><br><br>Los botones pueden agruparse horizontalmente con .btn-group:<br>&lt;div class="btn-group" role="group"&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Izquierda&lt;/button&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Centro&lt;/button&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Derecha&lt;/button&gt;
&lt;/div&gt;
<br>Para agruparlos verticalmente:<br>&lt;div class="btn-group-vertical" role="group"&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 1&lt;/button&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 2&lt;/button&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 3&lt;/button&gt;
&lt;/div&gt;
<br><br>Con estas opciones, puedes personalizar botones en Bootstrap según tus necesidades y mejorar la experiencia de usuario.# Botones en Bootstrap<br>Bootstrap proporciona una variedad de estilos y tamaños para los botones, permitiendo una personalización rápida y sencilla.<br><br><br>Los botones en Bootstrap se crean utilizando la clase .btn junto con una clase de color:<br>&lt;button class="btn btn-primary"&gt;Primario&lt;/button&gt;
&lt;button class="btn btn-secondary"&gt;Secundario&lt;/button&gt;
&lt;button class="btn btn-success"&gt;Éxito&lt;/button&gt;
&lt;button class="btn btn-danger"&gt;Peligro&lt;/button&gt;
&lt;button class="btn btn-warning"&gt;Advertencia&lt;/button&gt;
&lt;button class="btn btn-info"&gt;Información&lt;/button&gt;
&lt;button class="btn btn-light"&gt;Claro&lt;/button&gt;
&lt;button class="btn btn-dark"&gt;Oscuro&lt;/button&gt;
<br><br><br>Los botones pueden ajustarse en tamaño usando las siguientes clases:<br>
<br>.btn-lg → Botón grande
<br>.btn-sm → Botón pequeño
<br>Ejemplo:<br>&lt;button class="btn btn-primary btn-lg"&gt;Botón Grande&lt;/button&gt;
&lt;button class="btn btn-secondary btn-sm"&gt;Botón Pequeño&lt;/button&gt;
<br><br><br>Para que un botón ocupe todo el ancho disponible, se usa .w-100:<br>&lt;button class="btn btn-primary w-100"&gt;Botón de Ancho Completo&lt;/button&gt;
<br><br><br>Bootstrap permite botones con solo bordes usando .btn-outline-*:<br>&lt;button class="btn btn-outline-primary"&gt;Borde Primario&lt;/button&gt;
&lt;button class="btn btn-outline-success"&gt;Borde Éxito&lt;/button&gt;
&lt;button class="btn btn-outline-danger"&gt;Borde Peligro&lt;/button&gt;
<br><br><br>Para deshabilitar un botón se usa el atributo disabled o la clase .disabled:<br>&lt;button class="btn btn-primary" disabled&gt;Deshabilitado&lt;/button&gt;
&lt;a class="btn btn-secondary disabled" tabindex="-1" aria-disabled="true"&gt;Enlace Deshabilitado&lt;/a&gt;
<br><br><br>Para agregar un icono a un botón, se pueden usar íconos de Bootstrap Icons:<br>&lt;button class="btn btn-primary"&gt;
  &lt;i class="bi bi-plus-circle"&gt;&lt;/i&gt; Agregar
&lt;/button&gt;
<br><br><br>Los botones pueden agruparse horizontalmente con .btn-group:<br>&lt;div class="btn-group" role="group"&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Izquierda&lt;/button&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Centro&lt;/button&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Derecha&lt;/button&gt;
&lt;/div&gt;
<br>Para agruparlos verticalmente:<br>&lt;div class="btn-group-vertical" role="group"&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 1&lt;/button&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 2&lt;/button&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 3&lt;/button&gt;
&lt;/div&gt;
<br><br>Con estas opciones, puedes personalizar botones en Bootstrap según tus necesidades y mejorar la experiencia de usuario.# Botones en Bootstrap<br>Bootstrap proporciona una variedad de estilos y tamaños para los botones, permitiendo una personalización rápida y sencilla.<br><br><br>Los botones en Bootstrap se crean utilizando la clase .btn junto con una clase de color:<br>&lt;button class="btn btn-primary"&gt;Primario&lt;/button&gt;
&lt;button class="btn btn-secondary"&gt;Secundario&lt;/button&gt;
&lt;button class="btn btn-success"&gt;Éxito&lt;/button&gt;
&lt;button class="btn btn-danger"&gt;Peligro&lt;/button&gt;
&lt;button class="btn btn-warning"&gt;Advertencia&lt;/button&gt;
&lt;button class="btn btn-info"&gt;Información&lt;/button&gt;
&lt;button class="btn btn-light"&gt;Claro&lt;/button&gt;
&lt;button class="btn btn-dark"&gt;Oscuro&lt;/button&gt;
<br><br><br>Los botones pueden ajustarse en tamaño usando las siguientes clases:<br>
<br>.btn-lg → Botón grande
<br>.btn-sm → Botón pequeño
<br>Ejemplo:<br>&lt;button class="btn btn-primary btn-lg"&gt;Botón Grande&lt;/button&gt;
&lt;button class="btn btn-secondary btn-sm"&gt;Botón Pequeño&lt;/button&gt;
<br><br><br>Para que un botón ocupe todo el ancho disponible, se usa .w-100:<br>&lt;button class="btn btn-primary w-100"&gt;Botón de Ancho Completo&lt;/button&gt;
<br><br><br>Bootstrap permite botones con solo bordes usando .btn-outline-*:<br>&lt;button class="btn btn-outline-primary"&gt;Borde Primario&lt;/button&gt;
&lt;button class="btn btn-outline-success"&gt;Borde Éxito&lt;/button&gt;
&lt;button class="btn btn-outline-danger"&gt;Borde Peligro&lt;/button&gt;
<br><br><br>Para deshabilitar un botón se usa el atributo disabled o la clase .disabled:<br>&lt;button class="btn btn-primary" disabled&gt;Deshabilitado&lt;/button&gt;
&lt;a class="btn btn-secondary disabled" tabindex="-1" aria-disabled="true"&gt;Enlace Deshabilitado&lt;/a&gt;
<br><br><br>Para agregar un icono a un botón, se pueden usar íconos de Bootstrap Icons:<br>&lt;button class="btn btn-primary"&gt;
  &lt;i class="bi bi-plus-circle"&gt;&lt;/i&gt; Agregar
&lt;/button&gt;
<br><br><br>Los botones pueden agruparse horizontalmente con .btn-group:<br>&lt;div class="btn-group" role="group"&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Izquierda&lt;/button&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Centro&lt;/button&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Derecha&lt;/button&gt;
&lt;/div&gt;
<br>Para agruparlos verticalmente:<br>&lt;div class="btn-group-vertical" role="group"&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 1&lt;/button&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 2&lt;/button&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 3&lt;/button&gt;
&lt;/div&gt;
<br><br>Con estas opciones, puedes personalizar botones en Bootstrap según tus necesidades y mejorar la experiencia de usuario.# Botones en Bootstrap<br>Bootstrap proporciona una variedad de estilos y tamaños para los botones, permitiendo una personalización rápida y sencilla.<br><br><br>Los botones en Bootstrap se crean utilizando la clase .btn junto con una clase de color:<br>&lt;button class="btn btn-primary"&gt;Primario&lt;/button&gt;
&lt;button class="btn btn-secondary"&gt;Secundario&lt;/button&gt;
&lt;button class="btn btn-success"&gt;Éxito&lt;/button&gt;
&lt;button class="btn btn-danger"&gt;Peligro&lt;/button&gt;
&lt;button class="btn btn-warning"&gt;Advertencia&lt;/button&gt;
&lt;button class="btn btn-info"&gt;Información&lt;/button&gt;
&lt;button class="btn btn-light"&gt;Claro&lt;/button&gt;
&lt;button class="btn btn-dark"&gt;Oscuro&lt;/button&gt;
<br><br><br>Los botones pueden ajustarse en tamaño usando las siguientes clases:<br>
<br>.btn-lg → Botón grande
<br>.btn-sm → Botón pequeño
<br>Ejemplo:<br>&lt;button class="btn btn-primary btn-lg"&gt;Botón Grande&lt;/button&gt;
&lt;button class="btn btn-secondary btn-sm"&gt;Botón Pequeño&lt;/button&gt;
<br><br><br>Para que un botón ocupe todo el ancho disponible, se usa .w-100:<br>&lt;button class="btn btn-primary w-100"&gt;Botón de Ancho Completo&lt;/button&gt;
<br><br><br>Bootstrap permite botones con solo bordes usando .btn-outline-*:<br>&lt;button class="btn btn-outline-primary"&gt;Borde Primario&lt;/button&gt;
&lt;button class="btn btn-outline-success"&gt;Borde Éxito&lt;/button&gt;
&lt;button class="btn btn-outline-danger"&gt;Borde Peligro&lt;/button&gt;
<br><br><br>Para deshabilitar un botón se usa el atributo disabled o la clase .disabled:<br>&lt;button class="btn btn-primary" disabled&gt;Deshabilitado&lt;/button&gt;
&lt;a class="btn btn-secondary disabled" tabindex="-1" aria-disabled="true"&gt;Enlace Deshabilitado&lt;/a&gt;
<br><br><br>Para agregar un icono a un botón, se pueden usar íconos de Bootstrap Icons:<br>&lt;button class="btn btn-primary"&gt;
  &lt;i class="bi bi-plus-circle"&gt;&lt;/i&gt; Agregar
&lt;/button&gt;
<br><br><br>Los botones pueden agruparse horizontalmente con .btn-group:<br>&lt;div class="btn-group" role="group"&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Izquierda&lt;/button&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Centro&lt;/button&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Derecha&lt;/button&gt;
&lt;/div&gt;
<br>Para agruparlos verticalmente:<br>&lt;div class="btn-group-vertical" role="group"&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 1&lt;/button&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 2&lt;/button&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 3&lt;/button&gt;
&lt;/div&gt;
<br><br>Con estas opciones, puedes personalizar botones en Bootstrap según tus necesidades y mejorar la experiencia de usuario.# Botones en Bootstrap<br>Bootstrap proporciona una variedad de estilos y tamaños para los botones, permitiendo una personalización rápida y sencilla.<br><br><br>Los botones en Bootstrap se crean utilizando la clase .btn junto con una clase de color:<br>&lt;button class="btn btn-primary"&gt;Primario&lt;/button&gt;
&lt;button class="btn btn-secondary"&gt;Secundario&lt;/button&gt;
&lt;button class="btn btn-success"&gt;Éxito&lt;/button&gt;
&lt;button class="btn btn-danger"&gt;Peligro&lt;/button&gt;
&lt;button class="btn btn-warning"&gt;Advertencia&lt;/button&gt;
&lt;button class="btn btn-info"&gt;Información&lt;/button&gt;
&lt;button class="btn btn-light"&gt;Claro&lt;/button&gt;
&lt;button class="btn btn-dark"&gt;Oscuro&lt;/button&gt;
<br><br><br>Los botones pueden ajustarse en tamaño usando las siguientes clases:<br>
<br>.btn-lg → Botón grande
<br>.btn-sm → Botón pequeño
<br>Ejemplo:<br>&lt;button class="btn btn-primary btn-lg"&gt;Botón Grande&lt;/button&gt;
&lt;button class="btn btn-secondary btn-sm"&gt;Botón Pequeño&lt;/button&gt;
<br><br><br>Para que un botón ocupe todo el ancho disponible, se usa .w-100:<br>&lt;button class="btn btn-primary w-100"&gt;Botón de Ancho Completo&lt;/button&gt;
<br><br><br>Bootstrap permite botones con solo bordes usando .btn-outline-*:<br>&lt;button class="btn btn-outline-primary"&gt;Borde Primario&lt;/button&gt;
&lt;button class="btn btn-outline-success"&gt;Borde Éxito&lt;/button&gt;
&lt;button class="btn btn-outline-danger"&gt;Borde Peligro&lt;/button&gt;
<br><br><br>Para deshabilitar un botón se usa el atributo disabled o la clase .disabled:<br>&lt;button class="btn btn-primary" disabled&gt;Deshabilitado&lt;/button&gt;
&lt;a class="btn btn-secondary disabled" tabindex="-1" aria-disabled="true"&gt;Enlace Deshabilitado&lt;/a&gt;
<br><br><br>Para agregar un icono a un botón, se pueden usar íconos de Bootstrap Icons:<br>&lt;button class="btn btn-primary"&gt;
  &lt;i class="bi bi-plus-circle"&gt;&lt;/i&gt; Agregar
&lt;/button&gt;
<br><br><br>Los botones pueden agruparse horizontalmente con .btn-group:<br>&lt;div class="btn-group" role="group"&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Izquierda&lt;/button&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Centro&lt;/button&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Derecha&lt;/button&gt;
&lt;/div&gt;
<br>Para agruparlos verticalmente:<br>&lt;div class="btn-group-vertical" role="group"&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 1&lt;/button&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 2&lt;/button&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 3&lt;/button&gt;
&lt;/div&gt;
<br><br>Con estas opciones, puedes personalizar botones en Bootstrap según tus necesidades y mejorar la experiencia de usuario.# Botones en Bootstrap<br>Bootstrap proporciona una variedad de estilos y tamaños para los botones, permitiendo una personalización rápida y sencilla.<br><br><br>Los botones en Bootstrap se crean utilizando la clase .btn junto con una clase de color:<br>&lt;button class="btn btn-primary"&gt;Primario&lt;/button&gt;
&lt;button class="btn btn-secondary"&gt;Secundario&lt;/button&gt;
&lt;button class="btn btn-success"&gt;Éxito&lt;/button&gt;
&lt;button class="btn btn-danger"&gt;Peligro&lt;/button&gt;
&lt;button class="btn btn-warning"&gt;Advertencia&lt;/button&gt;
&lt;button class="btn btn-info"&gt;Información&lt;/button&gt;
&lt;button class="btn btn-light"&gt;Claro&lt;/button&gt;
&lt;button class="btn btn-dark"&gt;Oscuro&lt;/button&gt;
<br><br><br>Los botones pueden ajustarse en tamaño usando las siguientes clases:<br>
<br>.btn-lg → Botón grande
<br>.btn-sm → Botón pequeño
<br>Ejemplo:<br>&lt;button class="btn btn-primary btn-lg"&gt;Botón Grande&lt;/button&gt;
&lt;button class="btn btn-secondary btn-sm"&gt;Botón Pequeño&lt;/button&gt;
<br><br><br>Para que un botón ocupe todo el ancho disponible, se usa .w-100:<br>&lt;button class="btn btn-primary w-100"&gt;Botón de Ancho Completo&lt;/button&gt;
<br><br><br>Bootstrap permite botones con solo bordes usando .btn-outline-*:<br>&lt;button class="btn btn-outline-primary"&gt;Borde Primario&lt;/button&gt;
&lt;button class="btn btn-outline-success"&gt;Borde Éxito&lt;/button&gt;
&lt;button class="btn btn-outline-danger"&gt;Borde Peligro&lt;/button&gt;
<br><br><br>Para deshabilitar un botón se usa el atributo disabled o la clase .disabled:<br>&lt;button class="btn btn-primary" disabled&gt;Deshabilitado&lt;/button&gt;
&lt;a class="btn btn-secondary disabled" tabindex="-1" aria-disabled="true"&gt;Enlace Deshabilitado&lt;/a&gt;
<br><br><br>Para agregar un icono a un botón, se pueden usar íconos de Bootstrap Icons:<br>&lt;button class="btn btn-primary"&gt;
  &lt;i class="bi bi-plus-circle"&gt;&lt;/i&gt; Agregar
&lt;/button&gt;
<br><br><br>Los botones pueden agruparse horizontalmente con .btn-group:<br>&lt;div class="btn-group" role="group"&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Izquierda&lt;/button&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Centro&lt;/button&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Derecha&lt;/button&gt;
&lt;/div&gt;
<br>Para agruparlos verticalmente:<br>&lt;div class="btn-group-vertical" role="group"&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 1&lt;/button&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 2&lt;/button&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 3&lt;/button&gt;
&lt;/div&gt;
<br><br>Con estas opciones, puedes personalizar botones en Bootstrap según tus necesidades y mejorar la experiencia de usuario.# Botones en Bootstrap<br>Bootstrap proporciona una variedad de estilos y tamaños para los botones, permitiendo una personalización rápida y sencilla.<br><br><br>Los botones en Bootstrap se crean utilizando la clase .btn junto con una clase de color:<br>&lt;button class="btn btn-primary"&gt;Primario&lt;/button&gt;
&lt;button class="btn btn-secondary"&gt;Secundario&lt;/button&gt;
&lt;button class="btn btn-success"&gt;Éxito&lt;/button&gt;
&lt;button class="btn btn-danger"&gt;Peligro&lt;/button&gt;
&lt;button class="btn btn-warning"&gt;Advertencia&lt;/button&gt;
&lt;button class="btn btn-info"&gt;Información&lt;/button&gt;
&lt;button class="btn btn-light"&gt;Claro&lt;/button&gt;
&lt;button class="btn btn-dark"&gt;Oscuro&lt;/button&gt;
<br><br><br>Los botones pueden ajustarse en tamaño usando las siguientes clases:<br>
<br>.btn-lg → Botón grande
<br>.btn-sm → Botón pequeño
<br>Ejemplo:<br>&lt;button class="btn btn-primary btn-lg"&gt;Botón Grande&lt;/button&gt;
&lt;button class="btn btn-secondary btn-sm"&gt;Botón Pequeño&lt;/button&gt;
<br><br><br>Para que un botón ocupe todo el ancho disponible, se usa .w-100:<br>&lt;button class="btn btn-primary w-100"&gt;Botón de Ancho Completo&lt;/button&gt;
<br><br><br>Bootstrap permite botones con solo bordes usando .btn-outline-*:<br>&lt;button class="btn btn-outline-primary"&gt;Borde Primario&lt;/button&gt;
&lt;button class="btn btn-outline-success"&gt;Borde Éxito&lt;/button&gt;
&lt;button class="btn btn-outline-danger"&gt;Borde Peligro&lt;/button&gt;
<br><br><br>Para deshabilitar un botón se usa el atributo disabled o la clase .disabled:<br>&lt;button class="btn btn-primary" disabled&gt;Deshabilitado&lt;/button&gt;
&lt;a class="btn btn-secondary disabled" tabindex="-1" aria-disabled="true"&gt;Enlace Deshabilitado&lt;/a&gt;
<br><br><br>Para agregar un icono a un botón, se pueden usar íconos de Bootstrap Icons:<br>&lt;button class="btn btn-primary"&gt;
  &lt;i class="bi bi-plus-circle"&gt;&lt;/i&gt; Agregar
&lt;/button&gt;
<br><br><br>Los botones pueden agruparse horizontalmente con .btn-group:<br>&lt;div class="btn-group" role="group"&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Izquierda&lt;/button&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Centro&lt;/button&gt;
  &lt;button type="button" class="btn btn-primary"&gt;Derecha&lt;/button&gt;
&lt;/div&gt;
<br>Para agruparlos verticalmente:<br>&lt;div class="btn-group-vertical" role="group"&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 1&lt;/button&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 2&lt;/button&gt;
  &lt;button type="button" class="btn btn-secondary"&gt;Opción 3&lt;/button&gt;
&lt;/div&gt;
]]></description><link>boostrap-curso\botones.html</link><guid isPermaLink="false">BOOSTRAP - Curso/Botones.md</guid><pubDate>Thu, 20 Feb 2025 10:19:08 GMT</pubDate></item><item><title><![CDATA[<strong>Formularios en Bootstrap</strong>]]></title><description><![CDATA[ 
 <br><br>Bootstrap ofrece una serie de clases para mejorar la apariencia y usabilidad de los formularios.<br><br>
<br>.form-control → Aplica estilos a los campos de entrada.
<br>.form-group → Agrupa etiquetas y entradas.
<br>.form-check → Para checkboxes y radio buttons.
<br>.form-select → Estiliza los menús desplegables.
<br>.input-group → Agrupa elementos dentro de un input, como iconos o botones.
<br>.form-label → Aplica estilos a las etiquetas de los formularios.
<br><br>&lt;form&gt;
  &lt;div class="mb-3"&gt;
    &lt;label for="email" class="form-label"&gt;Correo Electrónico&lt;/label&gt;
    &lt;input type="email" class="form-control" id="email" placeholder="ejemplo@correo.com"&gt;
  &lt;/div&gt;
  &lt;button type="submit" class="btn btn-primary"&gt;Enviar&lt;/button&gt;
&lt;/form&gt;
<br><br><br>Bootstrap permite modificar el tamaño de los campos de entrada con las clases:<br>
<br>.form-control-lg → Input grande.
<br>.form-control-sm → Input pequeño.
<br>Ejemplo:<br>&lt;input type="text" class="form-control form-control-lg" placeholder="Input grande"&gt;
&lt;input type="text" class="form-control form-control-sm" placeholder="Input pequeño"&gt;
<br><br><br>Los checkboxes y radio buttons pueden estilizarse usando .form-check.<br>Ejemplo:<br>&lt;div class="form-check"&gt;
  &lt;input class="form-check-input" type="checkbox" id="check1"&gt;
  &lt;label class="form-check-label" for="check1"&gt;Aceptar términos&lt;/label&gt;
&lt;/div&gt;
<br>Para radio buttons:<br>&lt;div class="form-check"&gt;
  &lt;input class="form-check-input" type="radio" name="opcion" id="radio1"&gt;
  &lt;label class="form-check-label" for="radio1"&gt;Opción 1&lt;/label&gt;
&lt;/div&gt;
<br><br><br>Para aplicar estilos a un menú desplegable:<br>&lt;select class="form-select"&gt;
  &lt;option&gt;Opción 1&lt;/option&gt;
  &lt;option&gt;Opción 2&lt;/option&gt;
  &lt;option&gt;Opción 3&lt;/option&gt;
&lt;/select&gt;
<br><br><br>Para agrupar elementos dentro de un campo de entrada:<br>&lt;div class="input-group mb-3"&gt;
  &lt;span class="input-group-text"&gt;@&lt;/span&gt;
  &lt;input type="text" class="form-control" placeholder="Usuario"&gt;
&lt;/div&gt;
<br><br><br>Bootstrap permite aplicar estilos de validación a los formularios.<br>&lt;form class="needs-validation" novalidate&gt;
  &lt;div class="mb-3"&gt;
    &lt;label for="validationCustom01" class="form-label"&gt;Nombre&lt;/label&gt;
    &lt;input type="text" class="form-control is-valid" id="validationCustom01" required&gt;
    &lt;div class="valid-feedback"&gt;
      ¡Se ve bien!
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;button class="btn btn-primary" type="submit"&gt;Enviar&lt;/button&gt;
&lt;/form&gt;
<br>
<br>.is-valid → Aplica estilos de validación positiva.
<br>.is-invalid → Aplica estilos de validación negativa.
<br><br><br>Para enviar o resetear formularios:<br>&lt;button type="submit" class="btn btn-primary"&gt;Enviar&lt;/button&gt;
&lt;button type="reset" class="btn btn-secondary"&gt;Resetear&lt;/button&gt;
<br><br>Con estas clases y configuraciones, Bootstrap facilita la creación de formularios accesibles, estéticos y funcionales.]]></description><link>boostrap-curso\formulario.html</link><guid isPermaLink="false">BOOSTRAP - Curso/Formulario.md</guid><pubDate>Thu, 20 Feb 2025 10:16:09 GMT</pubDate></item><item><title><![CDATA[<strong>Bootstrap Grid y Flexbox</strong>]]></title><description><![CDATA[ 
 <br><br><br>Las clases utilizadas en la grid de Bootstrap son las siguientes:<br>
<br>.row → Define una fila en la grid.
<br>.col → Define una columna dentro de una fila.
<br>.col-{tamaño}- → Permite adaptar el diseño a diferentes tamaños de pantalla.

<br>.col-sm-
<br>.col-md-
<br>.col-lg-
<br>.col-xl-
<br>.col-xxl-


<br><br>Los breakpoints son puntos en los que se aplican diferentes estilos según el tamaño de la pantalla:<br>
<br>xs: Extra pequeño (implícito en .col sin modificador)
<br>sm: Pequeño
<br>md: Mediano
<br>lg: Grande
<br>xl: Extra grande
<br>xxl: Muy grande
<br>Cuando se usa .col sin especificar un tamaño, por defecto se aplica a xs. Para definir un tamaño específico:<br>&lt;div class="col-sm"&gt;...&lt;/div&gt;
&lt;div class="col-md"&gt;...&lt;/div&gt;
<br><br><br>Un contenedor en Bootstrap gestiona el ancho del contenido y se basa en un sistema de 12 columnas.<br><br>
<br>.container → Ancho fijo adaptable al tamaño de la pantalla.
<br>.container-fluid → Ocupa el 100% del ancho disponible.
<br><br>
<br>.container-sm
<br>.container-md
<br>.container-lg
<br>.container-xl
<br>.container-xxl
<br>Estos funcionan de manera similar a las columnas (.col-sm, .col-md…), permitiendo definir un ancho que cambia según el breakpoint.<br>Para centrar texto dentro de un contenedor, usamos .text-center.<br><br><br>Bootstrap proporciona diversos componentes reutilizables con estilos predefinidos y opciones de personalización.<br><a data-tooltip-position="top" aria-label="https://getbootstrap.com/docs/5.3/components/accordion/" rel="noopener nofollow" class="external-link" href="https://getbootstrap.com/docs/5.3/components/accordion/" target="_blank">Ver documentación de componentes - Bootstrap v5.3</a><br><br><br>Bootstrap ofrece una librería de íconos SVG optimizados para su uso en proyectos web.<br><a data-tooltip-position="top" aria-label="https://icons.getbootstrap.com/" rel="noopener nofollow" class="external-link" href="https://icons.getbootstrap.com/" target="_blank">Ver documentación de íconos - Bootstrap</a><br><br><br>Bootstrap utiliza Flexbox para distribuir y alinear elementos de manera flexible.<br><br>
<br>.d-flex → Habilita el uso de Flexbox en un contenedor.
<br><br><br>Define la dirección principal de los elementos dentro del contenedor.<br>Valores posibles:<br>
<br>row (por defecto)
<br>row-reverse
<br>column
<br>column-reverse
<br><br><br>Controla la distribución de los elementos en el eje principal.<br>Valores:<br>
<br>flex-start
<br>flex-end
<br>center
<br>space-between
<br>space-around
<br>space-evenly
<br>Clases equivalentes en Bootstrap:<br>
<br>.justify-content-start
<br>.justify-content-end
<br>.justify-content-center
<br>.justify-content-between
<br>.justify-content-around
<br>.justify-content-evenly
<br><br><br>Define la alineación de los elementos en el eje secundario.<br>Valores:<br>
<br>flex-start
<br>flex-end
<br>center
<br>baseline
<br>stretch (ocupan todo el eje secundario)
<br>Clases en Bootstrap:<br>
<br>.align-items-start
<br>.align-items-end
<br>.align-items-center
<br>.align-items-baseline
<br>.align-items-stretch
<br><br><br>Determina si los elementos deben ajustarse a nuevas filas o columnas cuando el espacio es insuficiente.<br>Valores:<br>
<br>nowrap (por defecto)
<br>wrap
<br>wrap-reverse
<br>Clases en Bootstrap:<br>
<br>.flex-nowrap
<br>.flex-wrap
<br>.flex-wrap-reverse
<br><br><br>Bootstrap permite probar diferentes configuraciones en tiempo real, aplicando clases para ver cómo afectan la disposición y el diseño de los elementos en pantalla.]]></description><link>boostrap-curso\grid-y-flexbox.html</link><guid isPermaLink="false">BOOSTRAP - Curso/Grid y Flexbox.md</guid><pubDate>Thu, 20 Feb 2025 10:11:34 GMT</pubDate></item><item><title><![CDATA[<strong>Modales en Bootstrap</strong>]]></title><description><![CDATA[ 
 <br><br>Los modales en Bootstrap son cuadros de diálogo emergentes que se pueden usar para mostrar información adicional sin necesidad de cambiar de página.<br><br><br>Un modal en Bootstrap se compone de tres partes principales:<br>
<br>Encabezado (.modal-header) → Contiene el título y el botón de cierre.
<br>Cuerpo (.modal-body) → Contiene el contenido principal.
<br>Pie (.modal-footer) → Contiene botones de acción.
<br><br>&lt;!-- Botón para activar el modal --&gt;
&lt;button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#miModal"&gt;
  Abrir Modal
&lt;/button&gt;

&lt;!-- Estructura del Modal --&gt;
&lt;div class="modal fade" id="miModal" tabindex="-1" aria-labelledby="miModalLabel" aria-hidden="true"&gt;
  &lt;div class="modal-dialog"&gt;
    &lt;div class="modal-content"&gt;
      &lt;div class="modal-header"&gt;
        &lt;h5 class="modal-title" id="miModalLabel"&gt;Título del Modal&lt;/h5&gt;
        &lt;button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"&gt;&lt;/button&gt;
      &lt;/div&gt;
      &lt;div class="modal-body"&gt;
        Contenido del modal aquí.
      &lt;/div&gt;
      &lt;div class="modal-footer"&gt;
        &lt;button type="button" class="btn btn-secondary" data-bs-dismiss="modal"&gt;Cerrar&lt;/button&gt;
        &lt;button type="button" class="btn btn-primary"&gt;Guardar cambios&lt;/button&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
<br><br><br><br>Para centrar el modal verticalmente, se usa .modal-dialog-centered:<br>&lt;div class="modal-dialog modal-dialog-centered"&gt;
  &lt;div class="modal-content"&gt;
    &lt;!-- Contenido del modal --&gt;
  &lt;/div&gt;
&lt;/div&gt;
<br><br>Si el contenido del modal es extenso, se puede hacer scroll dentro del cuerpo usando .modal-dialog-scrollable:<br>&lt;div class="modal-dialog modal-dialog-scrollable"&gt;
  &lt;div class="modal-content"&gt;
    &lt;!-- Contenido del modal --&gt;
  &lt;/div&gt;
&lt;/div&gt;
<br><br><br>Bootstrap permite modificar el tamaño del modal con las siguientes clases:<br>
<br>.modal-sm → Modal pequeño.
<br>.modal-lg → Modal grande.
<br>.modal-xl → Modal extra grande.
<br>Ejemplo:<br>&lt;div class="modal-dialog modal-lg"&gt;
  &lt;div class="modal-content"&gt;
    &lt;!-- Contenido del modal --&gt;
  &lt;/div&gt;
&lt;/div&gt;
<br><br><br>Bootstrap permite escuchar eventos cuando un modal se abre o se cierra.<br>Ejemplo en JavaScript:<br>let miModal = document.getElementById('miModal');
miModal.addEventListener('shown.bs.modal', function () {
  console.log('El modal se ha abierto');
});
<br><br><br>Los modales pueden cerrarse de manera automática después de un tiempo usando JavaScript:<br>setTimeout(function() {
  let modal = new bootstrap.Modal(document.getElementById('miModal'));
  modal.hide();
}, 5000); // Se cierra después de 5 segundos
<br><br>Con estas configuraciones, los modales en Bootstrap pueden adaptarse a diferentes necesidades y mejorar la experiencia de usuario.]]></description><link>boostrap-curso\modals.html</link><guid isPermaLink="false">BOOSTRAP - Curso/Modals.md</guid><pubDate>Thu, 20 Feb 2025 10:17:36 GMT</pubDate></item><item><title><![CDATA[Accesos a datos de un tensor]]></title><description><![CDATA[ 
 <br>Para acceder a un tensor creado por el módulo de <a data-href="tf" href="\curso-tenseflow\tf.html" class="internal-link" target="_self" rel="noopener nofollow">tf</a>, tenemos el método:<br>
<br>.data(): Este devuelve una promesa, por lo que debemos usar los métodos de asincronía de JavaScript para obtener los datos.  
<br><br>const val = [];

for (let i = 0; i &lt; 30; i++) {
    val[i] = Math.random() * 100; // Genera valores aleatorios entre 0 y 100
}

const tens = tf.tensor3d(val, [5, 3, 2], "int32"); // Un tensor inmutable que no cambia
tens.print();

console.log(tens.data()); // Devuelve una promesa. El método `.data()` devuelve los datos.

// Si es una promesa, debemos manejarla con asincronía o `then` porque tarda un tiempo en resolver los datos.
tens
    .data()
    .then(res =&gt; console.log(res)); // Ahora devuelve todos los datos y podemos operar con ellos.

// También podemos obtener los datos de forma síncrona con `.dataSync()`
console.log(
    tens.dataSync() // Método sencillo que devuelve los datos de manera inmediata.
);

// Para acceder a un solo valor dentro del tensor:
tens
    .data()
    .then(res =&gt; console.log(res[2]));

]]></description><link>curso-tenseflow\accesos-a-datos-de-un-tensor.html</link><guid isPermaLink="false">Curso - Tenseflow/Accesos a datos de un tensor.md</guid><pubDate>Fri, 14 Feb 2025 21:49:34 GMT</pubDate></item><item><title><![CDATA[Ejecutar proyecto TS]]></title><description><![CDATA[ 
 <br>Debemos tener Node y el instalador yarn<br>O podemos usar Python como el lenguaje mas potente<br>En Google tenemos un ejecutor de código llamado colab en este podemos colocar código de python o otros lenguajes]]></description><link>curso-tenseflow\ejecutar-proyecto-ts.html</link><guid isPermaLink="false">Curso - Tenseflow/Ejecutar proyecto TS.md</guid><pubDate>Fri, 14 Feb 2025 22:00:02 GMT</pubDate></item><item><title><![CDATA[Exportacion de modelos]]></title><description><![CDATA[ 
 <br>En <a data-href="tf" href="\curso-tenseflow\tf.html" class="internal-link" target="_self" rel="noopener nofollow">tf</a> se puede exportar el modelo de nuestra red neuronal para poder usarla en otros sitios como web o móviles usando otras versiones tensorflow]]></description><link>curso-tenseflow\exportacion-de-modelos.html</link><guid isPermaLink="false">Curso - Tenseflow/Exportacion de modelos.md</guid><pubDate>Mon, 22 Jan 2024 08:20:08 GMT</pubDate></item><item><title><![CDATA[Funciones de Activacion]]></title><description><![CDATA[ 
 <br>Son funciones que se usan en nuestro redes neuronales que permiten trabajar con  diferentes <a data-href="Tipos de problemas" href="\curso-tenseflow\tipos-de-problemas.html" class="internal-link" target="_self" rel="noopener nofollow">Tipos de problemas</a><br>Por lo que no se limitan solo a los típicos problemas de  lineales permitiendo resolver problemas mas complejos, ejemplo función ReLU:<br>Es un tipo de función que todo numero positivo graficado da ese mismo numero pero si es numero negativo siempre es 0:<br><img alt="FuncionRELU.png" src="\curso-tenseflow\funcionrelu.png">]]></description><link>curso-tenseflow\funciones-de-activacion.html</link><guid isPermaLink="false">Curso - Tenseflow/Funciones de Activacion.md</guid><pubDate>Fri, 14 Feb 2025 12:57:27 GMT</pubDate><enclosure url="curso-tenseflow\funcionrelu.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;curso-tenseflow\funcionrelu.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Identificador Imagenes]]></title><description><![CDATA[ 
 <br>Primero para poder  saber los ejemplos debemos tener la resoluion de l apantalla si usamos 28 x 28 = 72]]></description><link>curso-tenseflow\identificador-imagenes.html</link><guid isPermaLink="false">Curso - Tenseflow/Identificador Imagenes.md</guid><pubDate>Wed, 20 Dec 2023 11:38:04 GMT</pubDate></item><item><title><![CDATA[Layers]]></title><description><![CDATA[ 
 <br>Son capas que trabajan diferentes partes de nuestro datos para conseguir patrones<br><a data-tooltip-position="top" aria-label="https://playground.tensorflow.org/#activation=tanh&amp;batchSize=10&amp;dataset=circle&amp;regDataset=reg-plane&amp;learningRate=0.03&amp;regularizationRate=0&amp;noise=0&amp;networkShape=4,2&amp;seed=0.76436&amp;showTestData=false&amp;discretize=false&amp;percTrainData=50&amp;x=true&amp;y=true&amp;xTimesY=false&amp;xSquared=false&amp;ySquared=false&amp;cosX=false&amp;sinX=false&amp;cosY=false&amp;sinY=false&amp;collectStats=false&amp;problem=classification&amp;initZero=false&amp;hideText=false" rel="noopener nofollow" class="external-link" href="https://playground.tensorflow.org/#activation=tanh&amp;batchSize=10&amp;dataset=circle&amp;regDataset=reg-plane&amp;learningRate=0.03&amp;regularizationRate=0&amp;noise=0&amp;networkShape=4,2&amp;seed=0.76436&amp;showTestData=false&amp;discretize=false&amp;percTrainData=50&amp;x=true&amp;y=true&amp;xTimesY=false&amp;xSquared=false&amp;ySquared=false&amp;cosX=false&amp;sinX=false&amp;cosY=false&amp;sinY=false&amp;collectStats=false&amp;problem=classification&amp;initZero=false&amp;hideText=false" target="_blank">A Neural Network Playground (tensorflow.org)</a><br>Tenemos dos partes la entrada y salida<br>Al tratar en capas creamos nuestros modelos con cierta cantidad de valores de entrada<br>Por detrás tenemos diferentes números de redes neuronales para poder trabajar con los datos cada capa, y<br>
la ultima de salida que son los valores que devuelve<br>Ejemplo en código de entrada:<br>const modelo = tf.sequencial();//Declaramos neustro modelo        

//Entrada de 4 nodos con 2 entradas(inputs) y activacion sigmod
const oculta = tf.layers.dense({
	units:4,
	inputShape:[2],
	activation:"sigmod"
});

modelo.add(oculta);//agregamos la entrada a nuestro modelo
<br>Código de salida:<br>//Salida
const salida = tf.layers.dense({
	units:1,
	inputShape:[4],//por defecto entiende que son 4 de salida.
	activation:'sigmid'
});

modelo.add(salida);//agregamos la salida a nuestro modelo
<br>Con esto tenemos agregado todo a nuestro modelo con 2 input y cuatro de salida, pero hace falta un optimizar para poder ayudar el desempeño de nuestro modelo:<br>//Optimizador
const sgdOpciones = tf.train.sgd(0.1);

modelo.compile({
	optimizer:sgdOpciones,
	loss:tf.losses.meanSquaredError
});
<br>Hay mas opciones de nosotros usamos sgd y le pasamos a nuestro modelo una funcion de perdida<br>Quedando con todo el codigo asi:<br>const modelo = tf.sequencial();//Declaramos neustro modelo        

//Entrada de 4 nodos con 2 entradas(inputs) y activacion sigmod
const oculta = tf.layers.dense({
	units:4,
	inputShape:[2],
	activation:"sigmod"
});

modelo.add(oculta);//agregamos la entrada a nuestro modeloç

//Salida
const salida = tf.layers.dense({
	units:1,
	inputShape:[4],//por defecto entiende que son 4 de salida.
	activation:'sigmid'
});

modelo.add(salida);//agregamos la salida a nuestro modelo

//Optimizador
const sgdOpciones = tf.train.sgd(0.1);

modelo.compile({
	optimizer:sgdOpciones,
	loss:tf.losses.meanSquaredError
});

<br>Pero esto no es suficiente ya que no le pasamos datos para que muestre algo, usando <a data-href="Tensores" href="\curso-tenseflow\tensores.html" class="internal-link" target="_self" rel="noopener nofollow">Tensores</a>  pasamos datos de entrada y datos que no estan completos peor basandose en el primer tensor puede sacar el segundo tensor:<br>//Cracion de datos que conocemos:
const x1 = tf.tensor2d([
	[0,0],
	[0.2,0.2],
	[0.4,0.4]
]);

//Cracion de datos que NO conocemos:
const x2 = tf.tensor2d([
	[0.1],
	[0.3],
	[0.5]
]);

async function  intento(){
	for(i = 0; i &lt; 500;i++){
		const respuesta = await modelo.fit(x1,x2,{shuffle:true,epochs:100});
		console.log(respuesta);
		console.log(respuesta.history.loss[0]);//Lo perdido siempre debe ser lo mas cercano a 0 y por eso se debria aumentar el numero de repeticiones
	}
}

intento()
.then(() =&gt;{
	const salida = modelo.predict(x1);
	salida.print();
});
]]></description><link>curso-tenseflow\layers.html</link><guid isPermaLink="false">Curso - Tenseflow/Layers.md</guid><pubDate>Sat, 09 Dec 2023 15:22:05 GMT</pubDate></item><item><title><![CDATA[Multiplicar tensores]]></title><description><![CDATA[ 
 <br>Para multiplciar <a data-href="Tensores" href="\curso-tenseflow\tensores.html" class="internal-link" target="_self" rel="noopener nofollow">Tensores</a> debemos usar el modulo <a data-href="tf" href="\curso-tenseflow\tf.html" class="internal-link" target="_self" rel="noopener nofollow">tf</a>  y su meodo.matMul(tensores).<br>//Multiplicar tensores:
const a = tf.tensor2d([[1,2,-3],[4,0,-2]]);
const b = tf.tensor2d([[3,1],[2,4],[-1,5]]);

 tf.matMul(a,b).print();//ab
]]></description><link>curso-tenseflow\multiplicar-tensores.html</link><guid isPermaLink="false">Curso - Tenseflow/Multiplicar tensores.md</guid><pubDate>Thu, 07 Dec 2023 22:32:31 GMT</pubDate></item><item><title><![CDATA[Perceptrones]]></title><description><![CDATA[ 
 <br>Son un nodo o unidad básica que cuenta con entradas y este devuelve un resultado dentro del mismo tenemos  un valor llamado sesgo que es comparado con los valores de entrada que cada uno tiene su peso(grado de importancia en el  modelo)<br>Tambien llamados Neuronas<br>Estas se puede relacionar con otras de dos formas<img alt="Estructura-Red-neuronal-Densa-Cuenta-con-la-primera-capa-de-entrada-dos-capas-ocultas.png" src="\curso-tenseflow\estructura-red-neuronal-densa-cuenta-con-la-primera-capa-de-entrada-dos-capas-ocultas.png"><br>Red neoronal densa con 3 entradas y una salida<br>
<img alt="neural-net.png" src="\curso-tenseflow\neural-net.png"><br>
Red neuronal simple<br>Ejemplo de red neuronal simple:<br>
import tensorflow as tf
import numpy as np

celsius = np.array([-40,-10,0,8,15,22,38],dtype=float)#datos en una 1 diemnsion para entrebnar red
fahrenheint = np.array([-40,14,32,46,59,72,100],dtype=float)

capa = tf.keras.layers.Dense(units=1,input_shape=[1])#capa densa de un nodo
modelo = tf.keras.Sequential([capa])#le pasamos la cpa como configuramos y de manera secuencial

modelo.compile(
    optimizer = tf.keras.optimizers.Adam(0.1),#capacidad de cambio de 0.1
    loss='mean_squared_error'#la perdida no debe ser mayor esta es la funcion de perdida
)

print("Comenzando")
historial = modelo.fit(celsius,fahrenheint,epochs=1000,verbose=False)#entrenamos modelo despues compilar
print("Entrenado")

import matplotlib.pyplot as plt
#lo vemos en grafica su entrenamiento
plt.xlabel('# Epoca')
plt.ylabel('Magnitud perdida')
plt.plot(historial.history["loss"])

print("Hagamos una prediccion!")
resultado = modelo.predict([100.0])#prueba
print("El resultado es " + str(resultado) + "fahreint")

print("Variables internas del modelo")
print(capa.get_weights())
<br>Esto seria un ejemplo básico de una red nerounal basica  <br>Ahora si usamos mas capas generalmente hace el proceso de nrtenamiento mas rapido pero no necesariamente es siempre asi en ejemplo anteroior se calcula solo con los valores de fareheint y y celsius como ya lo sabemos que muetesre o saque su propio algoritmo para poedr calcularlo]]></description><link>curso-tenseflow\perceptrones.html</link><guid isPermaLink="false">Curso - Tenseflow/Perceptrones.md</guid><pubDate>Fri, 14 Feb 2025 12:57:45 GMT</pubDate><enclosure url="curso-tenseflow\estructura-red-neuronal-densa-cuenta-con-la-primera-capa-de-entrada-dos-capas-ocultas.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;curso-tenseflow\estructura-red-neuronal-densa-cuenta-con-la-primera-capa-de-entrada-dos-capas-ocultas.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Redes neoruronales]]></title><description><![CDATA[ 
 <br>Son un conjunto de <a data-href="Perceptrones" href="\curso-tenseflow\perceptrones.html" class="internal-link" target="_self" rel="noopener nofollow">Perceptrones</a> mucho mas complejo para poder predecir o sacar algo]]></description><link>curso-tenseflow\redes-neoruronales.html</link><guid isPermaLink="false">Curso - Tenseflow/Redes neoruronales.md</guid><pubDate>Mon, 18 Dec 2023 22:06:35 GMT</pubDate></item><item><title><![CDATA[Redes Neuronales Convulsionales]]></title><description><![CDATA[ 
 <br>Las cactarcaters son importantísimos debido a que puede haber diferentes características que nosotros no conocemos<br>Mientras que las redes convulsionales extrane patrones aplicacondos mas redes noeuronales, trabanjando con caracteristias diferentes]]></description><link>curso-tenseflow\redes-neuronales-convulsionales.html</link><guid isPermaLink="false">Curso - Tenseflow/Redes Neuronales Convulsionales.md</guid><pubDate>Sun, 07 Apr 2024 22:43:11 GMT</pubDate></item><item><title><![CDATA[Tensores]]></title><description><![CDATA[ 
 <br>Es una forma matamatica para poder ubicar ya sea cualquier vector , escalar o matriz en cualquier cordenada, y espeficicamente tenseflow usa tensores:<br>El metodo <a data-href="tf" href="\curso-tenseflow\tf.html" class="internal-link" target="_self" rel="noopener nofollow">tf</a> pero debemos linkearlo ya sea con mdn (descarga las carpetas cada vez que se carga la pagina)   o descargarcon npm]]></description><link>curso-tenseflow\tensores.html</link><guid isPermaLink="false">Curso - Tenseflow/Tensores.md</guid><pubDate>Thu, 07 Dec 2023 18:16:12 GMT</pubDate></item><item><title><![CDATA[Tensorflow]]></title><description><![CDATA[ 
 <br>TensorFlow es un marco de trabajo de código abierto desarrollado por Google Brain que permite la creación, entrenamiento e implementación de modelos de aprendizaje automático y redes neuronales. Fue lanzado en 2015 y se ha convertido en una de las herramientas más populares en el campo de la inteligencia artificial y el aprendizaje profundo.<br><br>
<br>
Computación basada en grafos

<br>Representa los cálculos como grafos de datos, lo que facilita la optimización y la distribución en múltiples dispositivos.


<br>
Compatibilidad con CPU y GPU

<br>TensorFlow permite la ejecución eficiente en CPUs y GPUs, y también en TPUs (Tensor Processing Units), optimizando el rendimiento en modelos complejos.


<br>
TensorFlow 2.x

<br>Introduce una API más intuitiva y sencilla basada en Keras, mejorando la usabilidad y reduciendo la complejidad de desarrollo de modelos.


<br>
Soporte para modelos de IA

<br>Permite desarrollar modelos para tareas de clasificación, detección de objetos, procesamiento de lenguaje natural (NLP), entre otros.


<br>
TensorFlow Lite

<br>Versión optimizada para dispositivos móviles y embebidos, permitiendo ejecutar modelos en entornos con recursos limitados.


<br>
TensorFlow.js

<br>Permite la ejecución de modelos de machine learning en navegadores web utilizando JavaScript.


<br>
Distribución y escalabilidad

<br>Compatible con entornos distribuidos para entrenar modelos en grandes volúmenes de datos.


<br><br>TensorFlow se basa en una arquitectura modular con los siguientes componentes clave:<br>
<br>Tensors: Estructuras de datos multidimensionales similares a matrices.
<br>Graphs: Representación de los flujos de datos y operaciones matemáticas.
<br>Session (en versiones anteriores): Ejecuta operaciones en un grafo.
<br>Eager Execution: Permite la ejecución inmediata de operaciones sin necesidad de definir grafos previamente.
<br>Keras API: Proporciona una interfaz de alto nivel para construir y entrenar modelos de manera sencilla.
<br><br>
<br>Flexibilidad: Compatible con diversas plataformas y dispositivos.
<br>Optimizado para producción: Escalable y eficiente en entornos empresariales.
<br>Comunidad activa: Soporte de una gran comunidad de desarrolladores y recursos educativos.
<br>Ecosistema completo: Desde la investigación hasta la implementación en producción.
<br>Indice:<br>
<br><a data-href="Tensores" href="\curso-tenseflow\tensores.html" class="internal-link" target="_self" rel="noopener nofollow">Tensores</a>
<br><a data-href="tf" href="\curso-tenseflow\tf.html" class="internal-link" target="_self" rel="noopener nofollow">tf</a>
<br><a data-href="Accesos a datos de un tensor" href="\curso-tenseflow\accesos-a-datos-de-un-tensor.html" class="internal-link" target="_self" rel="noopener nofollow">Accesos a datos de un tensor</a>
<br><a data-href="Layers" href="\curso-tenseflow\layers.html" class="internal-link" target="_self" rel="noopener nofollow">Layers</a>
<br><a data-href="Perceptrones" href="\curso-tenseflow\perceptrones.html" class="internal-link" target="_self" rel="noopener nofollow">Perceptrones</a>
<br><a data-href="Redes neoruronales" href="\curso-tenseflow\redes-neoruronales.html" class="internal-link" target="_self" rel="noopener nofollow">Redes neoruronales</a>
<br><a data-href="Redes Neuronales Convulsionales" href="\curso-tenseflow\redes-neuronales-convulsionales.html" class="internal-link" target="_self" rel="noopener nofollow">Redes Neuronales Convulsionales</a>
<br><a data-href="Tipos de problemas" href="\curso-tenseflow\tipos-de-problemas.html" class="internal-link" target="_self" rel="noopener nofollow">Tipos de problemas</a>
<br><a data-href="Tipos de Redes Neorunales" href="\curso-tenseflow\tipos-de-redes-neorunales.html" class="internal-link" target="_self" rel="noopener nofollow">Tipos de Redes Neorunales</a>
<br><a data-href="Variables - Imutables" href="\curso-tenseflow\variables-imutables.html" class="internal-link" target="_self" rel="noopener nofollow">Variables - Imutables</a>
<br><a data-href="Multiplicar tensores" href="\curso-tenseflow\multiplicar-tensores.html" class="internal-link" target="_self" rel="noopener nofollow">Multiplicar tensores</a>
<br><a data-href="Uso de memoria" href="\curso-tenseflow\uso-de-memoria.html" class="internal-link" target="_self" rel="noopener nofollow">Uso de memoria</a>
<br><a data-href="Funciones de Activacion" href="\curso-tenseflow\funciones-de-activacion.html" class="internal-link" target="_self" rel="noopener nofollow">Funciones de Activacion</a>
<br><a data-href="Identificador Imagenes" href="\curso-tenseflow\identificador-imagenes.html" class="internal-link" target="_self" rel="noopener nofollow">Identificador Imagenes</a>
<br><a data-href="Exportacion de modelos" href="\curso-tenseflow\exportacion-de-modelos.html" class="internal-link" target="_self" rel="noopener nofollow">Exportacion de modelos</a>
]]></description><link>curso-tenseflow\tensorflow.html</link><guid isPermaLink="false">Curso - Tenseflow/Tensorflow.md</guid><pubDate>Sat, 01 Mar 2025 09:55:26 GMT</pubDate></item><item><title><![CDATA[tf]]></title><description><![CDATA[ 
 <br>Objecto de tenseflow que cuenta con varios metodos pero los que veremos son:<br>
<br>.tensor: Es la manera que tenemos para trabajar con <a data-href="Tensores" href="\curso-tenseflow\tensores.html" class="internal-link" target="_self" rel="noopener nofollow">Tensores</a>, el primer argumento es para pasar los datos y dependiendo de cuantas arrays pasamos es nuestra matriz debe ser de la misma dimensión o misma cantidad de elementos si no este fallarra, después tenemos form  o el argumento que le da nuestra forma a nuestro tensor le indicamos o forzamos a nuestros datos a que se muestren de una forma, y el ultimo argumento toma el tipo de dato que queremos guardar pero no son los usados en JS, por ejemplo el valor de entero seria "int32".
<br><br>//tensor(shape es la dimension denuestro array, typo de array)

        tf.tensor([1,2,3,4]).print() // tensor peude recibir valores, formula y tipo;

        console.log(tf.tensor([1,2,3,4])); //muestra lo que tienen dentro del tensor

  

        tf.tensor([[1,2],[3,4]]).print();//tensor de dos dimensiones

        console.log(tf.tensor([[1,2],[2,2]]));//dos diemnsiones

  
  

        tf.tensor([[1.5,2],[2,2]],null,"int32").print();

        console.log(tf.tensor([[1.5,2],[1,2]],null,"int32"));

  

	     tf.tensor([1,2,3,4],[2,2]).print();//El segundo argumento le da la forma que deseamos si colocamos null se pondra por defecto

        //tf.tensor([[1,2,3,4,5],[2,2]]) Error ya que le mencionamos en el segundo arrray que es una matriz de 2 x 2 y hay 3 x 2


<br>
<br>.scalar: Es un numero del 1 al infinito. Solo trabajan con un valor:
<br>console.log(tf.scalar(3.14));//Se puede usar tambien tensor pero para mas leible se usa scalar para un solo valor
console.log(tf.tensor(3.14));//Hace lo lo mismo pero mala practica.
<br><br>Debemos colocar la dimension con la que trabjamao cuando usamos tensores para que sea ñas legible y saber con cual dimension  trabajamos:<br>//tensores y sus dimensiones:

  

        //Si usamos un tensor de una dimension especifica solo sirve para esa dimension el limite es 6

        tf.tensor1d([1.5,2]).print();

        tf.tensor2d([[1.5,2],[1,5]]).print();

        tf.tensor3d([

            [

                [1,5],[1,5]

            ],

            [

                [1,5],[1,5]

            ],

            [

                [1,5],[1,5]

            ]

        ]).print();

        tf.tensor4d([

            [

                [

                    [1,5]

                ]

            ],

            [

                [

                    [1,5]

                ]

            ]

        ]).print();

  

        //Otro ejemplo de 3D

  

        const val = [];

        for(i = 0;i&lt;30;i++){

            val[i] = Math.random(0,100);

        }

  

        tf.tensor3d(val,[5,3,2]).print();
<br>El maximo es de 6 dimensiones]]></description><link>curso-tenseflow\tf.html</link><guid isPermaLink="false">Curso - Tenseflow/tf.md</guid><pubDate>Thu, 07 Dec 2023 18:56:51 GMT</pubDate></item><item><title><![CDATA[Tipos de problemas]]></title><description><![CDATA[ 
 <br>Debemos conocer el tipo de problema que tratamos para poder saber como hacer nuestro modelo de red neuronal<br><br>Primero tenemos los problemas de regresión que son problemas que cuando la red neuronal lo resuelve lo esperado es un numero. Ver el ejemplo de <a data-href="Perceptrones" href="\curso-tenseflow\perceptrones.html" class="internal-link" target="_self" rel="noopener nofollow">Perceptrones</a> y ahí se ve en el ejemplo de calcula de Celsius a farheint siempre será un numero. Otro ejemplo seria el precio de una casa ya que este por muchos factores subjetivos que tenga devolverá un valor , el precio estimado de la casa.<br><br>Tipo de problema que no devuelve un valor numerico sino una posible opcion de varias, un ejemplo de eso es la capacidad de ver una imagen y decir de que tipo es o que elementos la conforman]]></description><link>curso-tenseflow\tipos-de-problemas.html</link><guid isPermaLink="false">Curso - Tenseflow/Tipos de problemas.md</guid><pubDate>Fri, 14 Feb 2025 12:57:58 GMT</pubDate></item><item><title><![CDATA[Tipos de Redes Neorunales]]></title><description><![CDATA[ 
 <br>Una <a data-href="Redes neoruronales" href="\curso-tenseflow\redes-neoruronales.html" class="internal-link" target="_self" rel="noopener nofollow">Redes neoruronales</a> son un cojucto de <a data-href="Perceptrones" href="\curso-tenseflow\perceptrones.html" class="internal-link" target="_self" rel="noopener nofollow">Perceptrones</a> que tienen salida y entrada<br>Nosotros debemos ententer los tipos de redes para poder saber como poder solucionar nuestro  problema de la manera mas eficiente posible]]></description><link>curso-tenseflow\tipos-de-redes-neorunales.html</link><guid isPermaLink="false">Curso - Tenseflow/Tipos de Redes Neorunales.md</guid><pubDate>Tue, 19 Dec 2023 22:50:46 GMT</pubDate></item><item><title><![CDATA[Uso de memoria]]></title><description><![CDATA[ 
 <br>Debemos ser muy cuidadosos con esto ya que el uso de un navegador como Google Chrome consume mucha memoria ram y ya teseflow usa web gl que consume mas  nuestra IA esto puede colapsar la memoria de nuestro cliente.<br>web gl usa tensoflow<br>Por eso se creo una funciones (<a data-href="tf" href="\curso-tenseflow\tf.html" class="internal-link" target="_self" rel="noopener nofollow">tf</a>)para poder manejar la memoria o los tensores:<br>
<br>tf.memory().numTensors: Muestra el numero de <a data-href="Tensores" href="\curso-tenseflow\tensores.html" class="internal-link" target="_self" rel="noopener nofollow">Tensores</a> que se usan en nuestro programa
<br>.dispose(): Detienen un tensor de tipo inmutable de tipo variable no funciona
<br>.tidy(): todos los tensores hecho dentro de este se ejecutan el método dispose() automáticamente.
<br>Código de ejemplo de uso con una librería externa:<br>//Ejemplo de uso de memoria usando  p5 .js

    function  draw(){

        const val = [];

        for(i = 0;i&lt;30;i++){

            val[i] = Math.random(1,100) * 100;

        }

  

        const tens = tf.tensor3d(val,[5,3,2],"int32");

        //tens.print();

  

        //const x = tf.variable(tf.tensor([1,2,3]));

        //x.print();

        //x.assign(tf.tensor([4,5,6]));

        //x.dispose();//No funcioan con tensores variables

        //x.print();

  

        const a = tf.tensor2d([[1,2,-3],[4,0,-2]]);

        const b = tf.tensor2d([[3,1],[2,4],[-1,5]]);

        const mul = tf.matMul(a,b);

  

        tens.dispose();

        a.dispose();//detiene el tensor

        b.dispose();

        mul.dispose();

  

        //otra forma es usando tidy

  

        tf.tidy(() =&gt;{

            const c = tf.tensor2d([[1,2,-3],[4,0,-2]]);

            const d = tf.tensor2d([[3,1],[2,4],[-1,5]]);

            const mul2 = tf.matMul(c,d);

            //Se hace automatico el dispose dentro del mismo

        })

        console.log(tf.memory().numTensors);

    }
]]></description><link>curso-tenseflow\uso-de-memoria.html</link><guid isPermaLink="false">Curso - Tenseflow/Uso de memoria.md</guid><pubDate>Fri, 14 Feb 2025 12:58:21 GMT</pubDate></item><item><title><![CDATA[Variables - Imutables]]></title><description><![CDATA[ 
 <br>Podemos usar <a data-href="tf" href="\curso-tenseflow\tf.html" class="internal-link" target="_self" rel="noopener nofollow">tf</a>  para crear tensores por defecto una vez asignado estos no cambian de valor en nuestro codigo<br>Pero tambien tenemos una variante que es costosa en cuanto recrusos lo mejor es que sea fija pero se puede usar:<br>const tens = tf.tensor3d(val,[5,3,2],"int32"); //un tensor inmutable que no cambia

 ens.print();

//Tensor variable o que se puede cambiar el valor del tensor en la ejecucion del codigo

const x = tf.variable(tf.tensor([1,2,3]));//Usamos .variable
x.assign(tf.tensor([4,5,6]));

//Es mas costoso en cuanto recursos los vaiable

x.print();
]]></description><link>curso-tenseflow\variables-imutables.html</link><guid isPermaLink="false">Curso - Tenseflow/Variables - Imutables.md</guid><pubDate>Thu, 07 Dec 2023 22:24:51 GMT</pubDate></item><item><title><![CDATA[Activity]]></title><description><![CDATA[ 
 <br>Es el intermediario entre la parte lógica y la pantalla que ve el usuario, por cada activty tenemos un xml con su diseño<br><br>Usamos Intent, seguramente allá otra forma la mas básica es con la clase Intent()<br>Toma dos valores como parámetro:<br>
1- El primero es el contexto, ósea al activity con el que vamos a trabajar si se coloca this es en contexto actual de la activyty si se coloca la ruta absoluta de otra activty es otro activty<br>
2- El segundo parámetro es el activyty que deseamos abrir en pantalla<br>Pero esto solo lo crea debemos llamar a una función llamada startActibvty(Content):<br>
val btnStart = findViewById&lt;AppCompatButton&gt;(R.id.btnStart)  
val etName = findViewById&lt;AppCompatEditText&gt;(R.id.etName)  
  
  
  
  
btnStart.setOnClickListener(){  
    val name = etName.text.toString()  
  
    if(name.isNotEmpty()){  
        val intent = Intent(this,ResultActivity::class.java)  
        startActivity(intent)  
    }  
  
}


//Codigo de la primera app para ver a detalle

<br>Entonces aunque pasemos intento este no mostrara nada en pantalla al menos que le pasemos un valor<br>
//Primer Activyty Main

package com.example.estudioandroid.firstapp  
  
import android.content.Intent  
import androidx.appcompat.app.AppCompatActivity  
import android.os.Bundle  
import android.util.Log  
import androidx.appcompat.widget.AppCompatButton  
import androidx.appcompat.widget.AppCompatEditText  
import com.example.estudioandroid.R  
  
class FirstAppActivity : AppCompatActivity() {  
    override fun onCreate(savedInstanceState: Bundle?) {  
        super.onCreate(savedInstanceState)  
        setContentView(R.layout.activity_first_app)  
        val btnStart = findViewById&lt;AppCompatButton&gt;(R.id.btnStart)  
        val etName = findViewById&lt;AppCompatEditText&gt;(R.id.etName)  
  
  
  
  
        btnStart.setOnClickListener(){  
            val name = etName.text.toString()  
  
            if(name.isNotEmpty()){  
                val intent = Intent(this,ResultActivity::class.java)  
  
                intent.putExtra("EXTRANAME",name)  //Le pasamos name con la llave EXTRANAME
                startActivity(intent)  
            }  
  
        }  
    }  
}
<br>En el segundo activyt podemos acceder al "EXTRANAME" solo con las llaves [posicion] o dicnedo en tipo d dato que debemos recibir pero incluso con esto fallaria ya que no sabemos de ante mano si lo que le pasamos no es null.<br>Entonces usamos:<br>
//Segundo activity:

package com.example.estudioandroid.firstapp  
  
import androidx.appcompat.app.AppCompatActivity  
import android.os.Bundle  
import android.widget.TextView  
import com.example.estudioandroid.R  
  
class ResultActivity : AppCompatActivity() {  
    override fun onCreate(savedInstanceState: Bundle?) {  
        super.onCreate(savedInstanceState)  
        setContentView(R.layout.activity_result)  
        val tvResult = findViewById&lt;TextView&gt;(R.id.tvResult)  
        val name:String = intent.extras?.getString("EXTRANAME").orEmpty()  //Accedemos a su valor
  
  
    }  
}
<br>Siempre es recomcable crear diferentes funciones para todo lo que hagamos ademas tambien es bueno hacer una funcion que inice todo los componetnet y otras que eschuce los listeners<br><br>Se hace con ConxtCompart.getColor(referencia de color) Primero ya deberia tener el color en el xml de colors<br>Ademas despues de obtener el color se busca el componente y luego se le pasa el color:<br>
//Ejemplo completo en el proyecto de IMC aplicaicon

viewMale = findViewById&lt;CardView&gt;(R.id.viewMale)//Buscamos el compontent a cambiar


viewMale.setOnClickListener{//listener que ejecuta cuando se clickea compente
	viewMale.setCardBackgroundColor(//cambia el color
		R.color.back_componen_selectedt//Referencia de color cargado en xml de colors
	)

}


<br><br>Para el compontente de tipo <a data-href="RangeSlider" href="\RangeSlider" class="internal-link" target="_self" rel="noopener nofollow">RangeSlider</a>  usamos el listener:<br>
<br>addOnChangeListener{-,value,-} (averiguar ams de ele en futuro): el values el valor edl rango que cambia.
<br>setOnClickListener{}: Se usa cualndo se clickea ese componete
<br>onBackPressed(): metodode deprecado ya no se usa pero se usa para volver a la pantalla anterior o activity
<br><br>Tenemos una funcion basica llamada <a data-href="FindViewByID" href="\curso_android_studio\findviewbyid.html" class="internal-link" target="_self" rel="noopener nofollow">FindViewByID</a> pero esta ya esta deprecada ahora se usa <a data-href="bind.idCoompete" href="\bind.idCoompete" class="internal-link" target="_self" rel="noopener nofollow">bind.idCoompete</a> que depende de una dependicna para poder funcina pero es mucho mas sencillo y como se usa ahora<br>Esta te permite entrar en cualquier componete que tenga un id en nuestro xml en el activtyt(<a data-href="TextView" href="\TextView" class="internal-link" target="_self" rel="noopener nofollow">TextView</a>,<a data-href="AppCompatButton" href="\curso_android_studio\appcompatbutton.html" class="internal-link" target="_self" rel="noopener nofollow">AppCompatButton</a>,etc)<br>La forma de entrar a nuestro xml que contiene las string que usamos en nuestro activtuy (explicado en <a data-href="EstructuraDeUnProyecto" href="\curso_android_studio\estructuradeunproyecto.html" class="internal-link" target="_self" rel="noopener nofollow">EstructuraDeUnProyecto</a>) es con el metodo:<br>
getString(R.string.nombreDeString)//Entonces podemos accede a nuestro xml para poder usarla

//Se puede uar para cmbiar el valor de nuestro textview
tvIbm.text = getString(R.string.error)//Se puede usar para msotrar un error

<br><br>Pues depesue entendeor lo basico hay que mejorar y sar a depndencia ademas de que empezar a cargar <a data-href="Listas" href="\programacion-de-multimedia-y-dispositivos-moviles\listas.html" class="internal-link" target="_self" rel="noopener nofollow">Listas</a>  usando <a data-href="Recicly View" href="\programacion-de-multimedia-y-dispositivos-moviles\recicly-view.html" class="internal-link" target="_self" rel="noopener nofollow">Recicly View</a>]]></description><link>curso_android_studio\activity.html</link><guid isPermaLink="false">Curso_android_studio/Activity.md</guid><pubDate>Thu, 13 Feb 2025 11:11:33 GMT</pubDate></item><item><title><![CDATA[Android Manifest]]></title><description><![CDATA[ 
 <br>Le indica la estructura de nuestra aplicación y los componentes que estos tienen]]></description><link>curso_android_studio\android-manifest.html</link><guid isPermaLink="false">Curso_android_studio/Android Manifest.md</guid><pubDate>Sun, 05 Nov 2023 15:32:06 GMT</pubDate></item><item><title><![CDATA[AppCompatButton]]></title><description><![CDATA[ 
 <br>Tipo de botón que cuenta con las mismas propiedades que <a data-href="TextView" href="\TextView" class="internal-link" target="_self" rel="noopener nofollow">TextView</a>]]></description><link>curso_android_studio\appcompatbutton.html</link><guid isPermaLink="false">Curso_android_studio/AppCompatButton.md</guid><pubDate>Thu, 13 Feb 2025 11:06:12 GMT</pubDate></item><item><title><![CDATA[AppCompatEditText]]></title><description><![CDATA[ 
 <br>Componte parecido a <a data-href="editText" href="\curso_android_studio\edittext.html" class="internal-link" target="_self" rel="noopener nofollow">editText</a>, cuenta con las mismas propiedades ]]></description><link>curso_android_studio\appcompatedittext.html</link><guid isPermaLink="false">Curso_android_studio/AppCompatEditText.md</guid><pubDate>Mon, 06 Nov 2023 11:14:59 GMT</pubDate></item><item><title><![CDATA[Arrays]]></title><description><![CDATA[ 
 <br>Las arrays son secuencias de datos, sabiendo las <a data-href="PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Curso_android_studio/Variables Kotlin" href="\PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES\Curso_android_studio\Variables Kotlin" class="internal-link" target="_self" rel="noopener nofollow">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Curso_android_studio/Variables Kotlin</a> , <a data-href="Variables Alfanumericas" href="\Variables Alfanumericas" class="internal-link" target="_self" rel="noopener nofollow">Variables Alfanumericas</a><br>
y <a data-href="Nulabilidad kotlin" href="\curso_android_studio\nulabilidad-kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Nulabilidad kotlin</a><br>
var nameString:String = "pepe"
var nameString2:String = "pepe"
var nameString3:String = "pepe"
var nameString4:String = "pepe"

println(nameString)

//No sirve repetir para eso existen los arrays

val weekDays = arrayOf("Lunes","Martes","Miercoles","VJueves","Viernes","Sabado" ,"Domingo")

println(weekDays[0])//Comienza 0 el indice 0-6

//Asiganmos un nueo valor:

weekDays[0] = "Hola"
println(weekDays[0])


println(weekDays.size) //Menciona el tamaño 7 empezando desde 1

if(weekDays.size &gt;= 8){
	println(weekDays[7])
}else{
	println("NO hay mas valores en el array")
}



<br>Para poder recorrer un array usamos bucles:<br>for(position in weekDays.indices){
	println("Hoy es " + weekDays[position])
}


for((position,value) in weekDays.withIndex()){
	println("La posición $position, contiene $value")
}
<br>Muestra el ultimo for:<br>La posición 0, contiene Lunes<br>
La posición 1, contiene Martes<br>
La posición 2, contiene Miércoles<br>
La posición 3, contiene Jueves<br>
La posición 4, contiene Viernes<br>
La posición 5, contiene Sábado<br>
La posición 6, contiene Domingo<br>Si solo nos interesa el valor:<br>
for(weekDay in weekDays){
	println("Ahora es $weekDay")
}

<br>Los arrays son muy buenos pero tiene muchas restricciones que no permiten mucha flexibildiad por eso se crearon las <a data-href="Listas kotlin" href="\curso_android_studio\listas-kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Listas kotlin</a>]]></description><link>curso_android_studio\arrays.html</link><guid isPermaLink="false">Curso_android_studio/Arrays.md</guid><pubDate>Sun, 02 Mar 2025 10:15:42 GMT</pubDate></item><item><title><![CDATA[Booleanos]]></title><description><![CDATA[ 
 <br><a data-href="PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Curso_android_studio/Variables Kotlin" href="\PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES\Curso_android_studio\Variables Kotlin" class="internal-link" target="_self" rel="noopener nofollow">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Curso_android_studio/Variables Kotlin</a> solo pueden ser true o false:<br>
/**
     * Variables booleanas
     */

    //Boolean
    val booleanExample: Boolean = true
    val booleanExample2: Boolean = false
    val booleanExample3 = false


<br>Funcion <a data-href="Print" href="\Print" class="internal-link" target="_self" rel="noopener nofollow">Print</a>]]></description><link>curso_android_studio\booleanos.html</link><guid isPermaLink="false">Curso_android_studio/Booleanos.md</guid><pubDate>Sun, 02 Mar 2025 10:15:42 GMT</pubDate></item><item><title><![CDATA[CardView]]></title><description><![CDATA[ 
 <br>Componentes para diseñar una especie de carta en nuestra aplicación]]></description><link>curso_android_studio\cardview.html</link><guid isPermaLink="false">Curso_android_studio/CardView.md</guid><pubDate>Thu, 13 Feb 2025 11:06:33 GMT</pubDate></item><item><title><![CDATA[CheckBox]]></title><description><![CDATA[ 
 <br>Componte para verificar si fue cliqueado o no]]></description><link>curso_android_studio\checkbox.html</link><guid isPermaLink="false">Curso_android_studio/CheckBox.md</guid><pubDate>Fri, 10 Nov 2023 09:30:01 GMT</pubDate></item><item><title><![CDATA[CompanionObjecto]]></title><description><![CDATA[ 
 <br>Es un objecto en kotlin que permite hacer cosntante spara que se puedan comunicar entre <a data-href="Activity" href="\curso_android_studio\activity.html" class="internal-link" target="_self" rel="noopener nofollow">Activity</a> o <a data-href="Clase" href="\programacion-de-multimedia-y-dispositivos-moviles\clase.html" class="internal-link" target="_self" rel="noopener nofollow">Clase</a><br>companion object{  
    const val IMC_KEY = "IMC_RESULT"  
}


//Ejemplo de uso 
val intent = Intent(this, ResultIMCActivity::class.java)  
intent.putExtra(IMC_KEY,result)  
startActivity(intent)


//Llamado en otro actibbyty:
import com.example.estudioandroid.imccalculator.ImcActivity.Companion.IMC_KEY
val result:Double = intent.extras?.getDouble(IMC_KEY) ?: -1.0

<br>Entonces se importa en las activty que usemos en ella y si cambiamos la llave cambiara en la demas que se usen y no tener que ir una a una]]></description><link>curso_android_studio\companionobjecto.html</link><guid isPermaLink="false">Curso_android_studio/CompanionObjecto.md</guid><pubDate>Wed, 08 Nov 2023 11:29:57 GMT</pubDate></item><item><title><![CDATA[ConstransLayout]]></title><description><![CDATA[ 
 <br>Componente mas recomendado para su uso y a la vez el más complejo]]></description><link>curso_android_studio\constranslayout.html</link><guid isPermaLink="false">Curso_android_studio/ConstransLayout.md</guid><pubDate>Sun, 05 Nov 2023 17:29:35 GMT</pubDate></item><item><title><![CDATA[Dialog]]></title><description><![CDATA[ 
 <br>Son un componeten de nuestro proyecot o aplcaicion que se sobrepone por encima de todo nuestra aplicacion par amostrar algo hay de muchos tipos <br>Primero debemos crear la vista o xml que contiene  el disñeo de nuestro dialog y luego crear una instacia en nuestro <a data-href="Activity" href="\curso_android_studio\activity.html" class="internal-link" target="_self" rel="noopener nofollow">Activity</a> y de ahi pasarle el <a data-href="PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Curso_android_studio/xml" href="\PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES\Curso_android_studio\xml" class="internal-link" target="_self" rel="noopener nofollow">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Curso_android_studio/xml</a> que tenga nuestra vista<br>val dialog = Dialog(this)  
dialog.setContentView(R.layout.daolog_task)


dialog.show()

<br>Usando <a data-href="View Binding" href="\View Binding" class="internal-link" target="_self" rel="noopener nofollow">View Binding</a> se puede  acceder a los elementos primero ya debemos tener el diseño de nuestra vista en xml y luego crear una constante de ese dialogo binding para luego inflarlo y psasarle el tipo que es:<br>
val bind :DaologTaskBinding =  DaologTaskBinding.inflate(layoutInflater)  
dialog.setContentView(bind.root)
<br>Despues podemos acaceder a diferentes partes de nuestro dialogo como queramso y aplciar la logica que queramos]]></description><link>curso_android_studio\dialog.html</link><guid isPermaLink="false">Curso_android_studio/Dialog.md</guid><pubDate>Tue, 06 Feb 2024 07:54:28 GMT</pubDate></item><item><title><![CDATA[editText]]></title><description><![CDATA[ 
 <br>Es un compontent de <a data-href="PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Curso_android_studio/xml" href="\PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES\Curso_android_studio\xml" class="internal-link" target="_self" rel="noopener nofollow">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Curso_android_studio/xml</a> que permite al usuario agregar un texto<br>cuenta con varios propiedades basicas pero las mas improtnate son:<br>
<br>hint: le dice que mostrar al usuario y una ves que el usuario le da para cambiar el texto desaperece
<br>textColorHint: cambia el color solo del hint
]]></description><link>curso_android_studio\edittext.html</link><guid isPermaLink="false">Curso_android_studio/editText.md</guid><pubDate>Tue, 06 Feb 2024 07:54:28 GMT</pubDate></item><item><title><![CDATA[EstructuraDeUnProyecto]]></title><description><![CDATA[ 
 <br>Siempre tenemos la vista Android es la mas sencilla<br>Cuando creamos una aplicación depende de dos partes una visual y tora lógica que es la que interactúa<br>Una activity es la unión entre la parte lógica y visual<br>Cuando creamos un nuevo new &gt; activity empty te pregunta el nombre del activyty que tiene el nombre y el nombre del <a data-href="PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Curso_android_studio/xml" href="\PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES\Curso_android_studio\xml" class="internal-link" target="_self" rel="noopener nofollow">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Curso_android_studio/xml</a> te saldrá un campo para clickear llamado lauche app que le decimos a android que es la pantalla principal<br>Una clase es un contenedor de <a data-href="Función" href="\curso_android_studio\función.html" class="internal-link" target="_self" rel="noopener nofollow">Función</a>es (es mucho mas obviamente).<br>El onCreate es la funciona que siempre se llama al inicio arrancar la pantalla<br>override fun onCreate(savedInstanceState: Bundle?) {  
    super.onCreate(savedInstanceState)  
    setContentView(R.layout.activity_first_app)  
  
    //Al arrancar pantalla  
}
<br>Cada activity tiene su función lógica  setContentView es para cargar el diseño que tenemos del xml <br>Siempre el <a data-href="PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Curso_android_studio/xml" href="\PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES\Curso_android_studio\xml" class="internal-link" target="_self" rel="noopener nofollow">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Curso_android_studio/xml</a> esta en res/layout<br>Podemos configurar nuestro emulador de Android en la esquina superior y te permitirá decirle a Android studio cuanto ram quieres que tenga, espacio interno y dependiendo de la versión de Android y el modelo te dirá si tiene los google service(maps, google, youtube, etc).<br>Tenemos el <a data-href="Android Manifest" href="\curso_android_studio\android-manifest.html" class="internal-link" target="_self" rel="noopener nofollow">Android Manifest</a><br>Desde el actibuty podemos acceder a cualquier componente del <a data-href="PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Curso_android_studio/xml" href="\PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES\Curso_android_studio\xml" class="internal-link" target="_self" rel="noopener nofollow">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Curso_android_studio/xml</a><br>Ya sea en la función onCreate o onResume() tenemos otros:<br>
package com.example.estudioandroid.firstapp  
  
import androidx.appcompat.app.AppCompatActivity  
import android.os.Bundle  
import com.example.estudioandroid.R  
  
class FirstAppActivity : AppCompatActivity() {  
    override fun onCreate(savedInstanceState: Bundle?) {  
        super.onCreate(savedInstanceState)  
        setContentView(R.layout.activity_first_app)  
  
        val btnStart = findViewById&lt;TipoDeComponente&gt;(R.id.IDdeElemento) //Tipo de componente puede ser TextView, Buton ,etc.
    }  
}

<br>Para luego agregar un listener para que haga algo en el momento que clic kea:<br>
package com.example.estudioandroid.firstapp  
  
import androidx.appcompat.app.AppCompatActivity  
import android.os.Bundle  
import android.util.Log  
import androidx.appcompat.widget.AppCompatButton  
import com.example.estudioandroid.R  
  
class FirstAppActivity : AppCompatActivity() {  
    override fun onCreate(savedInstanceState: Bundle?) {  
        super.onCreate(savedInstanceState)  
        setContentView(R.layout.activity_first_app)  
        val btnStart = findViewById&lt;AppCompatButton&gt;(R.id.btnStart)  
  
        btnStart.setOnClickListener(){  
            //Codigo de accion  
            Log.i("Joaquin","Mensaje")  
        }  
        //Al arrancar pantalla  
    }  
}

<br>Para msotrar el contenido de un <a data-href="editText" href="\curso_android_studio\edittext.html" class="internal-link" target="_self" rel="noopener nofollow">editText</a>.<br>
package com.example.estudioandroid.firstapp  
  
import androidx.appcompat.app.AppCompatActivity  
import android.os.Bundle  
import android.util.Log  
import androidx.appcompat.widget.AppCompatButton  
import androidx.appcompat.widget.AppCompatEditText  
import com.example.estudioandroid.R  
  
class FirstAppActivity : AppCompatActivity() {  
    override fun onCreate(savedInstanceState: Bundle?) {  
        super.onCreate(savedInstanceState)  
        setContentView(R.layout.activity_first_app)  
        val btnStart = findViewById&lt;AppCompatButton&gt;(R.id.btnStart)  
        val etName = findViewById&lt;AppCompatEditText&gt;(R.id.etName)  
  
  
        etName.text.toString() // devuelve la informacion que contenga en este texto  
  
        btnStart.setOnClickListener(){  
            //Codigo de accion  
            Log.i("Joaquin","Mensaje")  
        }  
        //Al arrancar pantalla  
    }  
}
<br>En las lista de carpetas el res es la parte de diseño:<br>Dentro del mismo tenemos values: en values muestra los colores que trabajamos en el .xml podemos agregar ahí todos los colores que queramos usar<br>Dentro de res también tenemos drawable, este contiene todas las imágenes y debemos cargar las imágenes nuevas ahí cuando queramos agregar una nueva<br>Para formatear el codigo tenemos el atajo ctrl + alt + l<br>En res / values además de los colores tenemos los srings que ahí se coloca todos los strings que se usan nuestro <a data-href="TextView" href="\TextView" class="internal-link" target="_self" rel="noopener nofollow">TextView</a><br>
y no usando la propiedad text ya que si tenemos varios strings de diferentes idiomas y seria mas difícil si uso<br><br>Llendo a help&gt;about muestra la version<br><br>Dentro de values&gt;themes&gt; tenemos dos themes  . xml que uno es el estilo oscuro y otro el el rnomal<br>En si cremoas un nuevo etiqueta styles  paracida a la originla podremos cambiar colores o pesoanlizar partes de la aplicacion como queremoas]]></description><link>curso_android_studio\estructuradeunproyecto.html</link><guid isPermaLink="false">Curso_android_studio/EstructuraDeUnProyecto.md</guid><pubDate>Thu, 13 Feb 2025 11:06:53 GMT</pubDate></item><item><title><![CDATA[FindViewByID]]></title><description><![CDATA[ 
 <br>Es un método de kotlin que busca el id del view en nuestro <a data-href="PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Curso_android_studio/xml" href="\PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES\Curso_android_studio\xml" class="internal-link" target="_self" rel="noopener nofollow">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Curso_android_studio/xml</a> para usarla en nuestra <a data-href="Activity" href="\curso_android_studio\activity.html" class="internal-link" target="_self" rel="noopener nofollow">Activity</a> , pero es una forma que ya no se usa]]></description><link>curso_android_studio\findviewbyid.html</link><guid isPermaLink="false">Curso_android_studio/FindViewByID.md</guid><pubDate>Thu, 13 Feb 2025 11:07:29 GMT</pubDate></item><item><title><![CDATA[FloatingActionButon]]></title><description><![CDATA[ 
 <br>Componente parecido a <a data-href="Boton" href="\Boton" class="internal-link" target="_self" rel="noopener nofollow">Boton</a> pero de forma circular]]></description><link>curso_android_studio\floatingactionbuton.html</link><guid isPermaLink="false">Curso_android_studio/FloatingActionButon.md</guid><pubDate>Thu, 13 Feb 2025 11:07:38 GMT</pubDate></item><item><title><![CDATA[Fragment]]></title><description><![CDATA[ 
 <br>Es una parte de la pantalla que se reutiliza, es un <a data-href="Activity" href="\curso_android_studio\activity.html" class="internal-link" target="_self" rel="noopener nofollow">Activity</a> que usa una parte de la pantalla<br>Primero generamos el framgnet qyue conetara con el un <a data-href="PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Curso_android_studio/xml" href="\PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES\Curso_android_studio\xml" class="internal-link" target="_self" rel="noopener nofollow">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Curso_android_studio/xml</a> que suara el fragment:<br>
companion object {  
  
    const val NAME_INTENT = "name_intent"  
    const val ADDRESS_INTENT = "address_intent"  
  
    @JvmStatic  
    fun newInstance(name: String, address: String) =  
        FirtsFragment().apply {  
            arguments = Bundle().apply {  
                putString(NAME_INTENT, name)  
                putString(ADDRESS_INTENT, address)  
            }  
        }}


<br>Creamos los parámetros que vayamos a usar y borramos las constantes de afuera de la clase<br>Ennces en onCreate debemos inciazliar los parametro y darle el valor con la llava que coloacmos en companieon object<br>private var name: String? = null  
private var address: String? = null  
  
override fun onCreate(savedInstanceState: Bundle?) {  
    super.onCreate(savedInstanceState)  
    arguments?.let {  
        name = it.getString(NAME_INTENT)  
        address = it.getString(ADDRESS_INTENT)  
    }  
}

<br>Le pasa los argumentos pero a un asi no crea el framneto con el xml que le pasamos eso lo hace en otra funcion:<br>
override fun onCreateView(  
    inflater: LayoutInflater, container: ViewGroup?,  
    savedInstanceState: Bundle?  
): View? {  
  
    return inflater.inflate(R.layout.fragment_firts, container, false)  
}
<br>Aque en inflater.inflate busca el xml que contega lo que queramos y en los sigueintes contiene el contiener<br>Con eso eso tenemos un fragmento básico pero aun así debemos realizar otras cosas para que funciones nuestro fragmento en nuestro activity, debemos primero inicializarlo y en nuestro xml principal colocar un componente con id en la parte que se quiera reutilizar la pantalla de la pantalla el componente de que debemos usar es el :<br>androidx.fragment.app.FragmentContainerView y su atributo name buscara el fragment que queramos usar.<br>Eso seria usando el xml pero no es lo normal  se usa el código para poder hacer uso de fragment y pintar como queramos<br>Primero debemos agregar una implementación:<br>dependencies {  
  
    implementation("androidx.core:core-ktx:1.9.0")  
    implementation("androidx.appcompat:appcompat:1.6.1")  
    implementation("com.google.android.material:material:1.10.0")  
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")  
  
    implementation("androidx.fragment:fragment-ktx:1.6.2")  //Esta es la implementacion de fragment
  
    testImplementation("junit:junit:4.13.2")  
    androidTestImplementation("androidx.test.ext:junit:1.1.5")  
    androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")  
}

<br>En el main activyty debemos colocar:<br>
supportFragmentManager.commit {  
        setReorderingAllowed(true)  
        add&lt;FirtsFragment&gt;(R.id.btnFragmentPepe)  //Nuestro fragmento y el id del componente del fragment
  
    }  
}

<br>Ahora esto sirve para pasarle parametros a nuestro fragmento, debemos sacar private los parámetros que tenemos en  el del fragment]]></description><link>curso_android_studio\fragment.html</link><guid isPermaLink="false">Curso_android_studio/Fragment.md</guid><pubDate>Thu, 13 Feb 2025 11:08:25 GMT</pubDate></item><item><title><![CDATA[Función]]></title><description><![CDATA[ 
 <br>Una función es un contenedor de operaciones.<br>Tenemos funciones que ya vienen de ante mano en <a data-href="Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Kotlin</a> algunas de ellas son:<br>
<br><a data-href="Print" href="\Print" class="internal-link" target="_self" rel="noopener nofollow">Print</a>
<br><a data-href="ToString" href="\ToString" class="internal-link" target="_self" rel="noopener nofollow">ToString</a>
<br><a data-href="main()" href="\main()" class="internal-link" target="_self" rel="noopener nofollow">main()</a>
<br>Y después la que podemos crear dentro de una clase de Kotlin <br>fun nombreDeFuncion( para1:String,  para2:Int){
	//Alcance y desarrollo de operaciones
}

<br>Los parámetros o variables que creamos dentro de una función solo puede quedar ahí dentro salvo que lo coloquemos como una propiedad de la clase que contiene esa función y el main que llama a la funcion.<br>class Pepe(){
	val age = 30 // variable gloabal

	fun main(){
		funcion1()
	
	}

	fun funcion1( para1:String){
		var mensaje : String = "Hola $para1 y mi edad es $age" //variable de funcion
	print(mensaje)
	}

}

<br><br>Tenemos funciones con parametros normales, una funcion con parametros de salida y mixtas:.<br>// funcion de salida
fun salida():String{
	var mensaje:String = "Pepe sale"
	return mensaje
}

 //Funcion con parametro por defecto
fun defecto(para1:String = "Nadie"){
	println("Hola $para1")
}

//Funcion pequeña

fun segundoMensaje(para1:String = nadie) = print("Hola $para1")


// funcion de saldia y entrada
fun salida ( nom:String):String{
	var mensaje:String = "Pepe sale $nom"
	return mensaje
}

<br><a data-href="When" href="\When" class="internal-link" target="_self" rel="noopener nofollow">When</a>]]></description><link>curso_android_studio\función.html</link><guid isPermaLink="false">Curso_android_studio/Función.md</guid><pubDate>Thu, 13 Feb 2025 11:10:02 GMT</pubDate></item><item><title><![CDATA[layout_constraitBottom_toBottomof]]></title><description><![CDATA[ 
 <br>Propiedad para tratar un componente como <a data-href="View" href="\View" class="internal-link" target="_self" rel="noopener nofollow">View</a> para decirle como queremos en la parte inferior y si se usa: parent te centra<br>Ademas de parent tenemos que podemos colcoar el id de algun otro componeten entonces seguiria al lado de ese componenet]]></description><link>curso_android_studio\layout_constraitbottom_tobottomof.html</link><guid isPermaLink="false">Curso_android_studio/layout_constraitBottom_toBottomof.md</guid><pubDate>Mon, 06 Nov 2023 10:12:23 GMT</pubDate></item><item><title><![CDATA[layout_contraitsTop_toTopOf]]></title><description><![CDATA[ 
 <br>No se usa Android sino que se colocar app:layout_...<br>Propiedad de los <a data-href="View" href="\View" class="internal-link" target="_self" rel="noopener nofollow">View</a> y otros parecidos que sirve para ubicar el compontee en la que se pude modificar su ubicacion de arriba dependiendo del que se use como atributo:<br> parent<br>
Además de parent tenemos que podemos colocar el id de algún otro componente entonces seguiría al lado de ese componente]]></description><link>curso_android_studio\layout_contraitstop_totopof.html</link><guid isPermaLink="false">Curso_android_studio/layout_contraitsTop_toTopOf.md</guid><pubDate>Tue, 07 Nov 2023 07:56:34 GMT</pubDate></item><item><title><![CDATA[LinearLayout]]></title><description><![CDATA[ 
 <br>Solo permite poner elementos de manera vertical uno debajo de otroc adae que que agregemos un <a data-href="TextView" href="\TextView" class="internal-link" target="_self" rel="noopener nofollow">TextView</a> o otro elemento]]></description><link>curso_android_studio\linearlayout.html</link><guid isPermaLink="false">Curso_android_studio/LinearLayout.md</guid><pubDate>Sun, 05 Nov 2023 17:27:15 GMT</pubDate></item><item><title><![CDATA[Listas kotlin]]></title><description><![CDATA[ 
 <br>Son la mejora de los <a data-href="Arrays" href="\curso_android_studio\arrays.html" class="internal-link" target="_self" rel="noopener nofollow">Arrays</a>. Se diferencian entre dos tipos de listas las inmutebalesList son listas que no se cambian el valor y las muteables list son listas que cambian<br>InMuteable list:<br>
val readOnly:List&lt;String&gt; = listOf("Lunes","MArtes","Miercoles","Jueves","Viernes","Sabado","Viernes")

println(readonly) //Te mostrar todo los valores con toString() no muestra direccion de memeoria
println(readonly[0]) 

<br>Tenemos diferentes metdoos<br>
<br>.size : tamaño de la lista
<br>.last():Devuelve el ultimo valor de la lista
<br>.first():Devuelve el primero de la lista
<br>.filter():
<br>var example = readOnly.filter {it.contains("a")} //it es el item o elemento

println(example)

<br>Reccorer una lista:<br>readOnly.forEach{ weekDate -&gt; println(weekDate)} //Mas legible pero son lo mismo
readOnly.forEach{ println(weekDate)} //Son iguales pero es menos legible

<br>Mutable list:<br>
val weekDays:MutableList&lt;String&gt; = mutableListOf("Lunes","MArtes","Miercoles","Jueves","Viernes","Sabado","Viernes")  
println(weekDays)  
  
  
weekDays.add("Pluton")  
println(weekDays)//Añade pluton  
  
weekDays.add(0,"Jupiter")//Añade en la posion que queramos  
  
println(weekDays.isEmpty()) //Si esta vacio true  
println(weekDays.isNotEmpty()) //Si no esta vacio es true  
  
  
weekDays.last() //Ultimo elemento de la lista
<br>Tambien cuenta con los mismo metdos de filter y forEach tambien se puede usar lo mismo de arrays]]></description><link>curso_android_studio\listas-kotlin.html</link><guid isPermaLink="false">Curso_android_studio/Listas kotlin.md</guid><pubDate>Sun, 05 Nov 2023 12:56:06 GMT</pubDate></item><item><title><![CDATA[Navigation Component]]></title><description><![CDATA[ 
 <br>La forma de navegar entre varios pantallas y fragmentos<br>Debemos colocar sus respetivas implementaciones:<br>val version = "2.7.5"  
  
//NavNavigation  
implementation("androidx.navigation:navigation-fragment-ktx:$version")  
implementation("androidx.navigation:navigation-ui-ktx:$version")

<br>Damos a sincronizar y después creamos la cantidad de fragment que vayamos a usar<br>Navigation Graph te muestra como mapa todas las pantalla de fragment que podemos navegar<br>Agregamos un directorio para poder trabajar con las pantallas y luego click derecho&gt;new&gt;Navigation Resource File<br>Esto se usa para poder navegar entre pantallas mucho mejor ya que si tenemos muchas pantalla esta es mas difícil verlo<br>Colocamos el botón de estrellas y te acomoda todas las pantallas además este te muestra todo<br>Te muestra todas las pantallas y luego puedes agruparlas para no ver todo en uno<br>Por detrás tienen un código que cada pantalla o <a data-href="Fragment" href="\curso_android_studio\fragment.html" class="internal-link" target="_self" rel="noopener nofollow">Fragment</a>o <a data-href="Activity" href="\curso_android_studio\activity.html" class="internal-link" target="_self" rel="noopener nofollow">Activity</a> agregado se muestra así:<br>&lt;?xml version="1.0" encoding="utf-8"?&gt;  
&lt;navigation xmlns:android="http://schemas.android.com/apk/res/android"  
    xmlns:app="http://schemas.android.com/apk/res-auto"  
    xmlns:tools="http://schemas.android.com/tools"  
    android:id="@+id/main_graph"  
    app:startDestination="@id/mainActivity"&gt;  
  
    &lt;fragment        android:id="@+id/firstFragment"  
        android:name="com.practica.navigationcomponentexample.FirstFragment"  
        android:label="fragment_first"  
        tools:layout="@layout/fragment_first" /&gt;

<br>Fragment se coloca la etiqueta y se coloca la ruta el nombre del id del framgento, <br>En la etiqueta del fragemnt padre en donde "app:startDestination:" en este podemos colocar la pantalla inicial y cual es la que empieza o la home<br>Recordar que solo hay una pantalla en realidad ya que los fragmentos son un reciclador de una pantalla osea que si o si debemos tener un <a data-href="Activity" href="\curso_android_studio\activity.html" class="internal-link" target="_self" rel="noopener nofollow">Activity</a> que contenga nuestros fragmentos<br>Ósea debemos usar un componente especial en nuestro <a data-href="PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Curso_android_studio/xml" href="\PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES\Curso_android_studio\xml" class="internal-link" target="_self" rel="noopener nofollow">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Curso_android_studio/xml</a> del actityty para invocar nuestro Navigation Resousece File. Que es el Fragment Container View y agregarle un id para poder controlarlo<br>Quedando de la siguiente manera:<br>
&lt;?xml version="1.0" encoding="utf-8"?&gt;  
&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"  
    xmlns:app="http://schemas.android.com/apk/res-auto"  
    xmlns:tools="http://schemas.android.com/tools"  
    android:layout_width="match_parent"  
    android:layout_height="match_parent"  
    tools:context=".MainActivity"&gt;  
  
    &lt;androidx.fragment.app.FragmentContainerView        android:id="@+id/navHostFragment"  
        android:name="androidx.navigation.fragment.NavHostFragment"  
        android:layout_width="0dp"  
        android:layout_height="0dp"  
        app:layout_constraintTop_toTopOf="parent"  
        app:layout_constraintEnd_toEndOf="parent"  
        app:layout_constraintStart_toStartOf="parent"  
        app:layout_constraintBottom_toBottomOf="parent"  
        app:navGraph="@navigation/main_graph"  
        /&gt;  
  
&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;
<br>En el name le decimos la propiedad que va usar android y que si o o si tiene que ser esa linea y en app:navGraph le colocamos el nombre nuestro navigation que hayamos hecho:<br>  android:name="androidx.navigation.fragment.NavHostFragment"  
  app:navGraph="@navigation/NombreDenavigation"  
<br>Despues le agregamos una propiedad mas para decirle cual es el contenedor principal de toda la vista que es:<br>app:defaultNavHost="true"
<br>Luego podemos trabajar con nuresto graph navigation y tendremosel paratado design y ahi podermos darle con una flecha para decirle a que lado ir cuando cambimos de lado, pero si vamos al apartado de -&gt; superior y clickeamos podremos elegir el nombre del id, desde donde y a hacia donde y lo mas importnte una animacion para mostrar que se puede hacer. Es mejor entenderlo desde la herramienta de android studio<br>Pero tambien tiene  su parte de xml que podemos configurar nosotros directamente:<br>&lt;fragment  
    android:id="@+id/firstFragment"  
    android:name="com.practica.navigationcomponentexample.FirstFragment"  
    android:label="fragment_first"  
    tools:layout="@layout/fragment_first" &gt;  
    &lt;action        android:id="@+id/action_firstFragment_to_secondFragment"  
        app:destination="@id/secondFragment" /&gt;
<br>En el action configuramos el id del cambio de fragmento y su destino pero tambien controlamos sus animaciones con:<br>app:enterAnim="@anim/nav_default_enter_anim"<br>
app:exitAnim="@anim/nav_default_pop_enter_anim"<br>
app:popEnterAnim="@anim/nav_default_pop_enter_anim"<br>
app:popExitAnim="@anim/nav_default_exit_anim"<br>En anim podemos usar o definir difrernetes animaciones de cambio de pantlla como queramos<br><br>Es una dependencia que recomienda google para poder pasar diferentes datos para pintar en la pantalla del fragmento nunca vamos a pasar objectos complejos entre fragmentos ya que es una mala practica lo que si pasamos son id de algunos objectos enrte otras cosas:<br>En l grable scripts, en build.gradle.kts agregamos:<br>id("androidx.navigation.safeargs.kotlin") version "2.7.1" apply false<br>id("androidx.navigation.safeargs") version "2.7.1" apply false, si no usamos kotlin<br>Debemos hacerlo en los dos build.gradle<br>id("androidx.navigation.safeargs.kotlin")<br>Una vez sincronizado debemos ir a nuestro grapg o donde se encuentra xml que maneja nuestras pantalla podemo usar el lado visual para poder pasr un arguemnto pero tambien tenemos el codigo:<br>&lt;fragment  
    android:id="@+id/secondFragment"  
    android:name="com.practica.navigationcomponentexample.SecondFragment"  
    android:label="fragment_second"  
    tools:layout="@layout/fragment_second" &gt;  
    &lt;action        android:id="@+id/action_secondFragment_to_thirdFragment"  
        app:destination="@id/thirdFragment" /&gt;  
    &lt;argument     
       android:name="name"  
        app:argType="string" /&gt;  
&lt;/fragment&gt;
<br>Arguemtn tendra enombre y el typo igual la parte visual te lo hara automaticamente pero si falla es  bueno saber que hace por detras para entender que arreglar<br>Una vez hecho eso debemos cambiar el como pasamos entre pantallas:<br>findNavController().navigate(  
    FirstFragmentDirections.actionFirstFragmentToSecondFragment(  
        name = "Pepe"  
    )  
)
<br>Por dertras kotlin ya tiene creada una clase direcction con elnombre de tu fragmento y la accion y dentro de eeste definimos el parametro, para poder recibirlo:<br>]]></description><link>curso_android_studio\navigation-component.html</link><guid isPermaLink="false">Curso_android_studio/Navigation Component.md</guid><pubDate>Tue, 06 Feb 2024 07:54:28 GMT</pubDate></item><item><title><![CDATA[Nulabilidad kotlin]]></title><description><![CDATA[ 
 <br>En Android o kotlin las variables pueden ser  <a data-href="Null" href="\Null" class="internal-link" target="_self" rel="noopener nofollow">Null</a><br>No se puede asignar una variable null:<br>var name: String = null //mal


var name: String?= null //Bien


println(name!!)//Le dicimo con"!" que no es null y que estamo seguro que no es null
println(name?.get(3): "Es null")// Si no es null name dame el valor pero si lo no lo des da  otro resultado

]]></description><link>curso_android_studio\nulabilidad-kotlin.html</link><guid isPermaLink="false">Curso_android_studio/Nulabilidad kotlin.md</guid><pubDate>Sun, 05 Nov 2023 10:27:01 GMT</pubDate></item><item><title><![CDATA[useCallBack]]></title><description><![CDATA[ 
 ]]></description><link>curso_react\hoks\usecallback.html</link><guid isPermaLink="false">Curso_React/hoks/useCallBack.md</guid><pubDate>Tue, 22 Oct 2024 14:59:11 GMT</pubDate></item><item><title><![CDATA[useContext]]></title><description><![CDATA[ 
 ]]></description><link>curso_react\hoks\usecontext.html</link><guid isPermaLink="false">Curso_React/hoks/useContext.md</guid><pubDate>Tue, 22 Oct 2024 14:59:20 GMT</pubDate></item><item><title><![CDATA[useEffect]]></title><description><![CDATA[ 
 <br>useEffect(() =&gt; ,[/*dependecies*/])
<br>Se la pasa una dependencia, hook común, si no se coloca ninguna dependencia solo se ejecuta cuando se renderiza el componente<br><br>
<br>
useEffect es un Hook, por lo que solo puede llamarlo en el nivel superior de su componente o en sus propios Hooks. No se puede llamar dentro de bucles o condiciones. Si lo necesita, extraiga un nuevo componente y mueva el estado a él.

<br>
Si no estás tratando de sincronizar con algún sistema externo, probablemente no necesites un efecto.

<br>
Cuando el modo estricto está activado, React ejecutará un ciclo adicional de configuración + limpieza solo para desarrollo antes de la primera configuración real. Se trata de una prueba de esfuerzo que garantiza que la lógica de limpieza "refleja" la lógica de configuración y que se detenga o deshaga lo que sea que esté haciendo la configuración. Si esto causa un problema, implemente la función de limpieza.

<br>
Si algunas de las dependencias son objetos o funciones definidas dentro del componente, existe el riesgo de que hagan que el efecto se vuelva a ejecutar con más frecuencia de la necesaria. Para solucionar este problema, elimine las dependencias innecesarias de objetos y funciones. También puede extraer actualizaciones de estado y lógica no reactiva fuera de su efecto.

<br>
Si tu efecto no fue causado por una interacción (como un clic), React generalmente permitirá que el navegador pinte la pantalla actualizada primero antes de ejecutar tu efecto. Si el efecto está haciendo algo visual (por ejemplo, colocar una información sobre herramientas) y el retraso es notable (por ejemplo, parpadea), reemplácelo por useLayoutEffect.useEffect

<br>
Si su efecto es causado por una interacción (como un clic), React puede ejecutar su efecto antes de que el navegador pinte la pantalla actualizada. Esto garantiza que el resultado del efecto pueda ser observado por el sistema de eventos. Por lo general, esto funciona como se espera. Sin embargo, si debe aplazar el trabajo hasta después de pintar, como un , puede usar . Véase reactwg/react-18/128 para más información.alert()setTimeout

<br>
Incluso si su efecto fue causado por una interacción (como un clic), React puede permitir que el navegador vuelva a pintar la pantalla antes de procesar las actualizaciones de estado dentro de su efecto. Por lo general, esto funciona como se espera. Sin embargo, si debe bloquear el navegador para que no vuelva a pintar la pantalla, debe reemplazarlo con useLayoutEffect.useEffect

<br>
Los efectos solo se ejecutan en el cliente. No se ejecutan durante la representación del servidor.

]]></description><link>curso_react\hoks\useeffect.html</link><guid isPermaLink="false">Curso_React/hoks/useEffect.md</guid><pubDate>Tue, 22 Oct 2024 14:58:59 GMT</pubDate></item><item><title><![CDATA[useId]]></title><description><![CDATA[ 
 ]]></description><link>curso_react\hoks\useid.html</link><guid isPermaLink="false">Curso_React/hoks/useId.md</guid><pubDate>Tue, 22 Oct 2024 14:59:48 GMT</pubDate></item><item><title><![CDATA[useMemo]]></title><description><![CDATA[ 
 ]]></description><link>curso_react\hoks\usememo.html</link><guid isPermaLink="false">Curso_React/hoks/useMemo.md</guid><pubDate>Tue, 22 Oct 2024 15:00:07 GMT</pubDate></item><item><title><![CDATA[useReductor]]></title><description><![CDATA[ 
 ]]></description><link>curso_react\hoks\usereductor.html</link><guid isPermaLink="false">Curso_React/hoks/useReductor.md</guid><pubDate>Tue, 22 Oct 2024 15:00:31 GMT</pubDate></item><item><title><![CDATA[useRef]]></title><description><![CDATA[ 
 <br>Es un hook que a diferencia de <a data-href="useState" href="\curso_react\hoks\usestate.html" class="internal-link" target="_self" rel="noopener nofollow">useState</a> permite guardar el estado de una <a data-href="variable" href="\variable" class="internal-link" target="_self" rel="noopener nofollow">variable</a> independiente de la renderización de <a data-href="Componente Funcional" href="\curso_react\componente-funcional.html" class="internal-link" target="_self" rel="noopener nofollow">Componente Funcional</a> por lo que el componente puede renderizarse una vez y se mantiene independiente de la renderización<br>Normalmente se usa para controlar el estado de <a data-href="DOM" href="\DOM" class="internal-link" target="_self" rel="noopener nofollow">DOM</a>.<br>import { useRef } from 'react';

export default function Counter() {
  let ref = useRef(0);

  function handleClick() {
    ref.current = ref.current + 1;
    alert('You clicked ' + ref.current + ' times!');
  }

  return (
    &lt;button onClick={handleClick}&gt;
      Click me!
    &lt;/button&gt;
  );
}
<br>Ejemplo de control de estado sin usar ]]></description><link>curso_react\hoks\useref.html</link><guid isPermaLink="false">Curso_React/hoks/useRef.md</guid><pubDate>Thu, 07 Nov 2024 15:17:32 GMT</pubDate></item><item><title><![CDATA[useState]]></title><description><![CDATA[ 
 ]]></description><link>curso_react\hoks\usestate.html</link><guid isPermaLink="false">Curso_React/hoks/useState.md</guid><pubDate>Tue, 22 Oct 2024 14:59:02 GMT</pubDate></item><item><title><![CDATA[Atributos React]]></title><description><![CDATA[ 
 <br>Son una lista de palabras clave que forman parte de <a data-href="JSX" href="\curso_react\jsx.html" class="internal-link" target="_self" rel="noopener nofollow">JSX</a> para poder usarlas en <a data-href="Elemento" href="\curso_react\elemento.html" class="internal-link" target="_self" rel="noopener nofollow">Elemento</a> o <a data-href="Componente Funcional" href="\curso_react\componente-funcional.html" class="internal-link" target="_self" rel="noopener nofollow">Componente Funcional</a><br>Como el atributo <a data-href="Style" href="\curso_react\style.html" class="internal-link" target="_self" rel="noopener nofollow">Style</a> entre otros tenemos accept, acepptCharset, accessKey, etc.<br>Para poder los otros atributos tenemos a la pagina [fuente(https://reactjs.org/docs/dom-elements.html)].]]></description><link>curso_react\atributos-react.html</link><guid isPermaLink="false">Curso_React/Atributos React.md</guid><pubDate>Mon, 25 Dec 2023 22:57:05 GMT</pubDate></item><item><title><![CDATA[Componente de Clase]]></title><description><![CDATA[ 
 <br>Clase de ES6 que retorna un elemento JSX<br><img alt="componente_declase.png" src="\lib\media\componente_declase.png"><br>Se debe definir una función llamada render()<br><br>
<br>Debe extender o heredar Reac.Component
<br>Debe contar con el método Render() para retornar un elemento jsx
<br>Puede recibir valores si es necesario
<br><br>Contiene: <br>
<br>Métodos
<br>Estados
<br>Un método es una función asociada a un componente que puede acceder y usar estado.<br><br>Método que retorna la estructura del componente de JSX. Además de ser obligatorio.<br>class nombreDeComponenete extends React.Component{
	render(){
		return &lt;p&gt;Mi Componente&lt;/p&gt;
	}
}

<br>Normalmente solo con render es suficiente y props pero si queremos controlar el estado usando <a data-href="Hooks" href="\curso_react\hooks.html" class="internal-link" target="_self" rel="noopener nofollow">Hooks</a> debemos usar el constructor para definirlo]]></description><link>curso_react\componente-de-clase.html</link><guid isPermaLink="false">Curso_React/Componente de Clase.md</guid><pubDate>Thu, 13 Feb 2025 10:47:57 GMT</pubDate><enclosure url="lib\media\componente_declase.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib\media\componente_declase.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Componente Funcional]]></title><description><![CDATA[ 
 <br>Un componente funcional es una función de ES6 que retorna un elemento de React(JSX)<br><br>
<br>Debe retornar un elemento de React (JSX)
<br>Debe comenzar con una letra mayúscula
<br>Puede recibir valores si es necesario
<br><br>Props es la abreviación de propiedades, son argumentos que puede recibir un componente de React<br>Los props solo se pueden enviar de padre a hijos pero no de hijo a padre<br><img alt="componente_funcional.png" src="\lib\media\componente_funcional.png"><br><br>Siempre comienzan con una letr mayuscula diferente de los <a data-href="Elemento" href="\curso_react\elemento.html" class="internal-link" target="_self" rel="noopener nofollow">Elemento</a> que van  en minuscula]]></description><link>curso_react\componente-funcional.html</link><guid isPermaLink="false">Curso_React/Componente Funcional.md</guid><pubDate>Mon, 25 Dec 2023 16:20:59 GMT</pubDate><enclosure url="lib\media\componente_funcional.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib\media\componente_funcional.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Elemento]]></title><description><![CDATA[ 
 <br>Unidades más pequeñas en <a data-href="React" href="\curso_react\react.html" class="internal-link" target="_self" rel="noopener nofollow">React</a>. Definen lo que se ve en la pantalla<br><br>La complejidad de componente es mayor. Un componente puede crear o renderizar otros componentes.<br>En cambio los elementos son muchos mas básicos<br>Los elementos están dentro de componentes por lota tanto un compnenente puede contener muchos elementos al a vez <br><br>Con <a data-href="JSX" href="\curso_react\jsx.html" class="internal-link" target="_self" rel="noopener nofollow">JSX</a> podemos crear y usar cualquier elemento HTML en el mismo<br><br>para poder reconocer un elemento de HTML se representa con etiquetas en letras minúsculas<br><br>Cualquier elemento de JSX puede tener atributos para especificar ciertas características a los mismos. Tenemos los atributos normales de HTML y los personalizados<br>Ej:<br>El atributo clase en HTML:<br>&lt;h1 class="titulo-azul"&gt;Azul&lt;/h1&gt;
<br>El atirubto class en JSX:<br>&lt;h1 className="titulo-azul"&gt;Azul&lt;/h1&gt;
<br>El porque esto se debe a que en JS tenemos  la palabra reservada "class" para hacer clases por eso se cambio la forma en la que se coloca el atributo<br>El atributo "for":<br>&lt;label for="css"&gt;CSS &lt;/label&gt;
<br>Con  jsx:<br>&lt;lebel htmlFor="css"&gt;CSS&lt;/label&gt;
<br><br>Se usa un lemento o div o elemneto html que conetega a todos los elementos o <a data-href="Componente Funcional" href="\curso_react\componente-funcional.html" class="internal-link" target="_self" rel="noopener nofollow">Componente Funcional</a><br>Generalemnte se coloca un id llamado "root" y para poder ver un elemento usamos <a data-href="React DOM" href="\curso_react\react-dom.html" class="internal-link" target="_self" rel="noopener nofollow">React DOM</a>]]></description><link>curso_react\elemento.html</link><guid isPermaLink="false">Curso_React/Elemento.md</guid><pubDate>Mon, 25 Dec 2023 23:15:02 GMT</pubDate></item><item><title><![CDATA[Estado]]></title><description><![CDATA[ 
 <br>El estado en React es una representación de la información dinámica que un componente maneja y puede cambiar con el tiempo. Puede ser local al componente o global, dependiendo de los requisitos de la aplicación. La gestión adecuada del estado es esencial para construir aplicaciones React eficientes y reactivas.<br>Use estate para estados locales <a data-tooltip-position="top" aria-label="Curso_React/hoks/useContext" data-href="Curso_React/hoks/useContext" href="\curso_react\hoks\usecontext.html" class="internal-link" target="_self" rel="noopener nofollow">useContext</a> para generar estados globales, o generar un estado independiente de la renderización usando <a data-tooltip-position="top" aria-label="Curso_React/hoks/useRef" data-href="Curso_React/hoks/useRef" href="\curso_react\hoks\useref.html" class="internal-link" target="_self" rel="noopener nofollow">useRef</a>.]]></description><link>curso_react\estado.html</link><guid isPermaLink="false">Curso_React/Estado.md</guid><pubDate>Thu, 13 Feb 2025 10:52:50 GMT</pubDate></item><item><title><![CDATA[Event listener]]></title><description><![CDATA[ 
 <br>Cuando sucede un evento especifico en nuestro navegador este ejecuta una función eso es un event Listener, tambien llamada Event Handler]]></description><link>curso_react\event-listener.html</link><guid isPermaLink="false">Curso_React/Event listener.md</guid><pubDate>Thu, 21 Dec 2023 22:42:23 GMT</pubDate></item><item><title><![CDATA[Hooks]]></title><description><![CDATA[ 
 <br>Es una función especial que te permite trabajar con estados en componentes funcionales y otros aspectos de React<br>Su principal ventaja es que no hace falta crear un <a data-href="Componente de Clase" href="\curso_react\componente-de-clase.html" class="internal-link" target="_self" rel="noopener nofollow">Componente de Clase</a> gracias a los mismo y podemos trabajar con <a data-href="Componente Funcional" href="\curso_react\componente-funcional.html" class="internal-link" target="_self" rel="noopener nofollow">Componente Funcional</a> de manera mucho más fácil.<br>Hoks mas usados:<br>
<br><a data-tooltip-position="top" aria-label="Curso_React/hoks/useState" data-href="Curso_React/hoks/useState" href="\curso_react\hoks\usestate.html" class="internal-link" target="_self" rel="noopener nofollow">useState</a>
<br><a data-tooltip-position="top" aria-label="Curso_React/hoks/useRef" data-href="Curso_React/hoks/useRef" href="\curso_react\hoks\useref.html" class="internal-link" target="_self" rel="noopener nofollow">useRef</a>
<br><a data-tooltip-position="top" aria-label="Curso_React/hoks/useEffect" data-href="Curso_React/hoks/useEffect" href="\curso_react\hoks\useeffect.html" class="internal-link" target="_self" rel="noopener nofollow">useEffect</a>
<br><a data-tooltip-position="top" aria-label="Curso_React/hoks/useContext" data-href="Curso_React/hoks/useContext" href="\curso_react\hoks\usecontext.html" class="internal-link" target="_self" rel="noopener nofollow">useContext</a>
<br><a data-tooltip-position="top" aria-label="Curso_React/hoks/useId" data-href="Curso_React/hoks/useId" href="\curso_react\hoks\useid.html" class="internal-link" target="_self" rel="noopener nofollow">useId</a>
<br><a data-tooltip-position="top" aria-label="Curso_React/hoks/useMemo" data-href="Curso_React/hoks/useMemo" href="\curso_react\hoks\usememo.html" class="internal-link" target="_self" rel="noopener nofollow">useMemo</a>
<br><a data-href="useForm" href="\useForm" class="internal-link" target="_self" rel="noopener nofollow">useForm</a>
<br><a data-tooltip-position="top" aria-label="Curso_React/hoks/useReductor" data-href="Curso_React/hoks/useReductor" href="\curso_react\hoks\usereductor.html" class="internal-link" target="_self" rel="noopener nofollow">useReductor</a>
<br><a data-tooltip-position="top" aria-label="Curso_React/hoks/useCallBack" data-href="Curso_React/hoks/useCallBack" href="\curso_react\hoks\usecallback.html" class="internal-link" target="_self" rel="noopener nofollow">useCallBack</a>
]]></description><link>curso_react\hooks.html</link><guid isPermaLink="false">Curso_React/Hooks.md</guid><pubDate>Thu, 13 Feb 2025 10:55:27 GMT</pubDate></item><item><title><![CDATA[JSX]]></title><description><![CDATA[ 
 <br><br>Es una extensión directa para sintaxis de JavaScript<br>Nos permite describir como se ven los componentes en nuestro HTML, solo su estructura no necesariamente sus estilos<br><br>
<br>Estructura más fácil de visualizar
<br>Errores y advertencias más útiles.
<br>JSX es opcional no es obligatorio pero ayuda mucho<br>const elemento = &lt;h1&gt;¡Hola, munod!&lt;/h1&gt;;
<br>Otro ejemplo:<br>import React from 'react';
import '../hojas-de-estilo/Contador.css';


function Contador({numClics}){
	return(
		&lt;div className="contador"&gt;
			{numClics}
		&lt;/div&gt;
	);
}

export default Contador;
<br>import React from 'react';
import '../hojas-de-estilo/Contador.css';

const BotonClear = (props) =&gt; (
	&lt;div className="boton-clear" onClick={props.manejarClear}&gt;
		{props.children}
	&lt;/div&gt;
);

export default Contador;
<br><br>Se puede combinar <a data-href="Elemento" href="\curso_react\elemento.html" class="internal-link" target="_self" rel="noopener nofollow">Elemento</a> o etiquetas html con js:<br>let adjectivo = "Interesante";

&lt;p&gt;React es {adjectivo}&lt;/p&gt;
&lt;p&gt;Es {5 * 6}&lt;/p&gt;
&lt;p&gt;React es {adjectivo.toUpperCase()}&lt;/p&gt;
]]></description><link>curso_react\jsx.html</link><guid isPermaLink="false">Curso_React/JSX.md</guid><pubDate>Thu, 13 Feb 2025 10:53:01 GMT</pubDate></item><item><title><![CDATA[React]]></title><description><![CDATA[ 
 <br><br>Es una librería o biblioteca de código abierto diseñada para crear interfaces de usuario<br>Una librería es un conjunto de implementaciones o subprogramas que podemos usar en nuestro código<br>Usa en medida JSCX javascript xml<br><br>
<br>Fácil de aprender y usar
<br>Componentes reutilizables
<br>Crear aplicaciones dinámicas
<br>Buen desempeño
<br><br>Parte de la interfaz de usuario que es indepiente y reusable<br><br>De <a data-href="Componente Funcional" href="\curso_react\componente-funcional.html" class="internal-link" target="_self" rel="noopener nofollow">Componente Funcional</a> y de <a data-href="Componente de Clase" href="\curso_react\componente-de-clase.html" class="internal-link" target="_self" rel="noopener nofollow">Componente de Clase</a>]]></description><link>curso_react\react.html</link><guid isPermaLink="false">Curso_React/React.md</guid><pubDate>Thu, 21 Dec 2023 11:30:25 GMT</pubDate></item><item><title><![CDATA[React DOM]]></title><description><![CDATA[ 
 <br>Paquete que facilita la interaccion y actulizacion del DOM en aplicaciones REACT<br>Para poder renderizar un elemento se usa:<br>Para renderizar un elemento padre se usa el:<br>import ReactDom from 'react-dom';//importacion de React DOM siempre para renderizar

const elemento = &lt;h1&gt;Hola&lt;/h1&gt;;//elemento

ReactDOM.render(
	elemento,
	document.getElementById('root')
);
	  
]]></description><link>curso_react\react-dom.html</link><guid isPermaLink="false">Curso_React/React DOM.md</guid><pubDate>Mon, 25 Dec 2023 23:20:14 GMT</pubDate></item><item><title><![CDATA[Self Cloasing Tag]]></title><description><![CDATA[ 
 <br>Es un <a data-href="Elemento" href="\curso_react\elemento.html" class="internal-link" target="_self" rel="noopener nofollow">Elemento</a> que solo posee una etiqueta de apertura ya que no contiene texto u otros elementos<br>Ejemplo:<br>&lt;img src="logo.png" alt="Mi imagen"/&gt; //Self cloasing tag

&lt;img src="logo.png" alt="Mi imagen"&gt; &lt;/img&gt;//Cerrado normal 
]]></description><link>curso_react\self-cloasing-tag.html</link><guid isPermaLink="false">Curso_React/Self Cloasing Tag.md</guid><pubDate>Mon, 25 Dec 2023 23:30:57 GMT</pubDate></item><item><title><![CDATA[State-Estado]]></title><description><![CDATA[ 
 <br><br>Es la representación en JavaScript del conjunto de propiedades de un componente y sus valores actuales, No se refiere a las props que se pasa como argumento si no a la informacion del mismo componente<br>Gracias a los <a data-href="Hooks" href="\curso_react\hooks.html" class="internal-link" target="_self" rel="noopener nofollow">Hooks</a> podemos controlar el estado de un <a data-href="Componente Funcional" href="\curso_react\componente-funcional.html" class="internal-link" target="_self" rel="noopener nofollow">Componente Funcional</a> en <a data-href="React" href="\curso_react\react.html" class="internal-link" target="_self" rel="noopener nofollow">React</a>]]></description><link>curso_react\state-estado.html</link><guid isPermaLink="false">Curso_React/State-Estado.md</guid><pubDate>Thu, 21 Dec 2023 22:39:09 GMT</pubDate></item><item><title><![CDATA[Style]]></title><description><![CDATA[ 
 <br>El atributo Style permite pasarle un objecto de JavaScript con propiedades css con <a data-href="CamelCase" href="\programacion-de-multimedia-y-dispositivos-moviles\camelcase.html" class="internal-link" target="_self" rel="noopener nofollow">CamelCase</a><br>Ej:<br>background-color:red;
font-family
<br>en <a data-href="JSX" href="\curso_react\jsx.html" class="internal-link" target="_self" rel="noopener nofollow">JSX</a>: <br>backgroundColor
fontFamily
<br>Ejeplo de un objecto en <a data-href="JSX" href="\curso_react\jsx.html" class="internal-link" target="_self" rel="noopener nofollow">JSX</a> con estilos:<br>//DEfiniendo el estilo
const estiloDiv = {
	color:'yellow',
	backgroundColor:'black'
};


//Usando los estilos:
&lt;div style={estiloDiv}&gt;¡Hola, Mundo!&lt;/div&gt;

//Usar estilo especifico:
&lt;div style={/*Aqui va JS*/{/*El objecto con estilos*/color: 'yellow'}}&gt;¡Hola ,Mundo!&lt;div&gt;
<br>El style forma parte de los <a data-href="Atributos React" href="\curso_react\atributos-react.html" class="internal-link" target="_self" rel="noopener nofollow">Atributos React</a>]]></description><link>curso_react\style.html</link><guid isPermaLink="false">Curso_React/Style.md</guid><pubDate>Mon, 25 Dec 2023 22:52:44 GMT</pubDate></item><item><title><![CDATA[useState]]></title><description><![CDATA[ 
 <br>Es un <a data-href="Hooks" href="\curso_react\hooks.html" class="internal-link" target="_self" rel="noopener nofollow">Hooks</a>  que permite darle estado a un <a data-href="Componente Funcional" href="\curso_react\componente-funcional.html" class="internal-link" target="_self" rel="noopener nofollow">Componente Funcional</a> <br><br>El useState se importa y se usa un arreglo que contiene la variable que contiene ese valor, y luego la funcion que lo cambia la variable:<br>import {useState} from 'react';

	const [variable,setVaraible] = useState("Valor inicial de cualquier tipo(int,string"));
]]></description><link>curso_react\usestate.html</link><guid isPermaLink="false">Curso_React/useState.md</guid><pubDate>Thu, 18 Jan 2024 12:50:04 GMT</pubDate></item><item><title><![CDATA[Cambiar estilos en diferentes plataformas]]></title><description><![CDATA[ 
 <br>Para poder dar <a data-href="Estilos" href="\curso-ractnative\estilos.html" class="internal-link" target="_self" rel="noopener nofollow">Estilos</a> en diferentes <a data-href="React Router Native" href="\curso-ractnative\react-router-native.html" class="internal-link" target="_self" rel="noopener nofollow">React Router Native</a> o rutas se puede usar:<br>import { Platform } from "react-native";

  

const theme = {
    appBar:{
        primary:'#24292e',
       textPrimary:'#fff',
        secondary:'#ccc'
    },
    colors:{
        textPrimary:'#24292e',
        testSecondary:'#586069',
        primary:'#0366d6',
        white:'#fefefe'
    },
    fontSize:{
       body:14,
        subheading:16
    },
    fonts:{
        main:Platform.select({
           ios:'Arial',
            android:'Roboto',
            default:'System'
        })
    },
    fontWeights:{
        normal:'400',
        bold:'700'
    }
}


export default theme;
<br>En el theme en Reac Native viene por defecto Platfom que es un objeto que guarda en que sistema estamos actualmente.<br>Ahora imaginemos que tenemos un nav bar que contiene varias opciones y queremos que su diseño sea diferentes en casi todo en cada plataforma<br>Podemos hacerlo y tambien dar uno por defecto creando componentes específicos para cada uno y usando Plataform de React Native podemos conseguirlo:<br>//App bar
import React from "react";
import {View,StyleSheet, ScrollView} from 'react-native';
import StyleText from "./StyleText";
import Constants from "expo-constants";
import theme from "../../theme";
import { Link, useLocation } from "react-router-native";

  
  

const AppBarTab = ({children,to}) =&gt;{
    const {pathname} = useLocation();
    const active = pathname === to;
  
    const textStyles = [
        styles.text,
        active &amp;&amp; styles.active
    ];

  

    return(
        &lt;Link to={to}&gt;
            &lt;StyleText fontWeight='bold' style={textStyles}&gt;
                {children}
            &lt;/StyleText&gt;
        &lt;/Link&gt;
    );
};

  
  
  
  

const AppBar = () =&gt;{
    const {pathname} = useLocation();

  

    return(
        &lt;View  style={styles.container}&gt;
            &lt;ScrollView horizontal style={styles.scroll}&gt;
                &lt;AppBarTab  to={'/'}&gt;Repositories&lt;/AppBarTab&gt;
                &lt;AppBarTab  to={'/signin'}&gt;Sign In&lt;/AppBarTab&gt;
            &lt;/ScrollView&gt;
        &lt;/View&gt;
    );
};

  
  

const styles = StyleSheet.create({

    container:{
        flexDirection:'row',
        backgroundColor:theme.appBar.primary,
        paddingTop:Constants.statusBarHeight + 10,
        paddingBottom:10,
    },
    text:{
        color:theme.appBar.secondary,
        paddingHorizontal:10        
    },
    scroll:{
        paddingBottom:15,
    },
    active:{
        color:theme.appBar.textPrimary
    },
});

  

export default AppBar;
<br>La unica diferencia que tiene con ANDROIDAppBar es el color por lo que solo podnre esa pequeña diferencia y no todo el código:<br>//ANDROIDAppBar


const styles = StyleSheet.create({

    container:{
        flexDirection:'row',
        backgroundColor:'red',// unica diferencia
        paddingTop:Constants.statusBarHeight + 10,
        paddingBottom:10,
    },

    text:{
        color:theme.appBar.secondary,
        paddingHorizontal:10        
    },
    scroll:{
        paddingBottom:15,
    },

    active:{
        color:theme.appBar.textPrimary
    },
});

  

export default AppBar;
<br>Quedando en main de las igueitne manera usando Plataform:<br>import React from "react";
import { Platform, Text, View } from "react-native";
import RepositoryList from "./RepositoryList";
import { Routes, Route, Navigate } from "react-router-native";

  
  

const AppBar = Platform.select({
  android: () =&gt; require('./ANDROIDAppBar.jsx').default,
  default:() =&gt; require('./AppBar.jsx').default
})();

  

const Main = () =&gt; {
  return (
    &lt;View style={{ flex: 1 }}&gt;
      &lt;AppBar /&gt;
        &lt;Routes&gt;
            &lt;Route path="/" element={&lt;RepositoryList /&gt;}/&gt;
            &lt;Route path="/signin" element={&lt;Text &gt;Work it&lt;/Text&gt;}/&gt;
            &lt;Route path="*" element={&lt;Navigate to={'/'}/&gt;}/&gt;
        &lt;/Routes&gt;
   &lt;/View&gt;
  );
}


export default Main; // Cambia a export default Main;
]]></description><link>curso-ractnative\cambiar-estilos-en-diferentes-plataformas.html</link><guid isPermaLink="false">Curso-RactNative/Cambiar estilos en diferentes plataformas.md</guid><pubDate>Thu, 13 Feb 2025 10:56:30 GMT</pubDate></item><item><title><![CDATA[Componentes y combatibilidad]]></title><description><![CDATA[ 
 <br>Tenemos diferentes componentes que son compatibles algunos para Android y otros IOS tambien podemos hacer los personalizados<br>Los textos deben estar renderizados siempre dentro de text<br>No se pueden usar los onCLicks de toda la vida<br>Algunos componentes importantes son:<br>
<br><a data-href="Text" href="\curso-ractnative\text.html" class="internal-link" target="_self" rel="noopener nofollow">Text</a>
<br><a data-href="ViewReact" href="\curso-ractnative\viewreact.html" class="internal-link" target="_self" rel="noopener nofollow">ViewReact</a>
<br><a data-href="TextInput" href="\curso-ractnative\textinput.html" class="internal-link" target="_self" rel="noopener nofollow">TextInput</a>
<br><a data-href="Touchable" href="\curso-ractnative\touchable.html" class="internal-link" target="_self" rel="noopener nofollow">Touchable</a>
<br><a data-href="FlatList" href="\curso-ractnative\flatlist.html" class="internal-link" target="_self" rel="noopener nofollow">FlatList</a>
<br><a data-href="ScrollView" href="\curso-ractnative\scrollview.html" class="internal-link" target="_self" rel="noopener nofollow">ScrollView</a>
<br>Para consultar mas componentes tenemos la guía oficial de React Native:<br><a data-tooltip-position="top" aria-label="https://reactnative.dev/docs/getting-started" rel="noopener nofollow" class="external-link" href="https://reactnative.dev/docs/getting-started" target="_blank">Introduction · React Native</a>]]></description><link>curso-ractnative\componentes-y-combatibilidad.html</link><guid isPermaLink="false">Curso-RactNative/Componentes y combatibilidad.md</guid><pubDate>Thu, 13 Feb 2025 10:56:53 GMT</pubDate></item><item><title><![CDATA[Constatntes Expo]]></title><description><![CDATA[ 
 <br>Son contantes de difenrtes tamaños de pantalla que combinados con los <a data-href="estilos en React NAtive" href="\estilos en React NAtive" class="internal-link" target="_self" rel="noopener nofollow">estilos en React NAtive</a> permite dar estilos<br>Por ejemplo<br>import Constants from "expo-constants";


&lt;View style={{marginTop:Constants.statusBarHeight,flexGrow:1}}&gt;

            &lt;Text&gt;Rate Repository Application&lt;/Text&gt;

            &lt;RepositoryList/&gt;

        &lt;/View&gt;


]]></description><link>curso-ractnative\constatntes-expo.html</link><guid isPermaLink="false">Curso-RactNative/Constatntes Expo.md</guid><pubDate>Mon, 11 Mar 2024 12:34:13 GMT</pubDate></item><item><title><![CDATA[Estilos]]></title><description><![CDATA[ 
 <br>Se puede dar estilos con la propiedad style se puede pasar un objecto nuevo ahi mismo con propiedades de csss en camelCase o otro objectivo definido por nosotros<br>Usando StyleSheet:<br>import { View,Text,StyleSheet } from "react-native";
import React from "react";

  

const styles = StyleSheet.create({

    container:{
        padding:20,
        paddingBottom:5,
        paddingTop:5
    },
    strong:{
        color:'#09f',
        fontWeight:'bold',
        marginBottom:5
    }
})

  

const RepositoryItem =  (props) =&gt;{
    return(
        &lt;View
            style={styles.container}
            key={props.id}&gt;
                    &lt;Text style={styles.strong}&gt;Id: {props.id}&lt;/Text&gt;
                    &lt;Text&gt;FullName: {props.fullName}&lt;/Text&gt;
                    &lt;Text&gt;Description: {props.description}&lt;/Text&gt;
                    &lt;Text&gt;Languaje: {props.language}&lt;/Text&gt;
                    &lt;Text&gt;Stars: {props.stargazersCount}&lt;/Text&gt;
                    &lt;Text&gt;Forks: {props.forksCount}&lt;/Text&gt;
                    &lt;Text&gt;Review: {props.reviewCount}&lt;/Text&gt;
                    &lt;Text&gt;Rating: {props.ratingAverage}&lt;/Text&gt;
                &lt;/View&gt;
    );
};

  
export default RepositoryItem;
<br>Una forma para reutilizar los estilos y crear componentes que generen diseño del mismo y que si queremos que use una propiedad o no se crear componentes pesonalizables:<br>import React from "react";
import { Text,View,StyleSheet } from "react-native";

  
const style = StyleSheet.create({
    text:{
        fontSize:12,
        color:'grey'
    },
    bold:{
        fontWeight:'bold'
    },
    blue:{
        color:'blue'
    },

    big:{
        fontSize:20,
    },
    small:{
        fontSize:10
    }
});

  
  

export default function StyleText({blue,bold,children,big,small}){
    const testStyle = [
        style.text,
        blue &amp;&amp; style.blue,
        bold &amp;&amp; style.bold,
        big &amp;&amp; style.big,
        small &amp;&amp; style.small
    ];

  

    return(
        &lt;Text style={testStyle}&gt;
            {children}
        &lt;/Text&gt;

    );

};
<br>Con esto definimos diferentes propiedades la propiedad style.text siempre saldrá pero si las otras no son agregadas entonces no se agregaran:<br>import { View,Text,StyleSheet } from "react-native";
import React from "react";
import StyleText from "./StyleText";

  

const styles = StyleSheet.create({
    container:{
        padding:20,
        paddingBottom:5,
        paddingTop:5
    },
    strong:{
        color:'#09f',
        fontWeight:'bold',
        marginBottom:5
    }
})

  

const RepositoryItem =  (props) =&gt;{
    return(
        &lt;View
            style={styles.container}
            key={props.id}&gt;
                    &lt;StyleText bold&gt;Id: {props.id}&lt;/StyleText&gt;
                    &lt;StyleText blue&gt;FullName: {props.fullName}&lt;/StyleText&gt;
                    &lt;StyleText bold&gt;Description: {props.description}&lt;/StyleText&gt;
                    &lt;StyleText big&gt;Languaje: {props.language}&lt;/StyleText&gt;
                    &lt;StyleText small&gt;Stars: {props.stargazersCount}&lt;/StyleText&gt;
                    &lt;StyleText small&gt;Forks: {props.forksCount}&lt;/StyleText&gt;
                    &lt;StyleText small&gt;Review: {props.reviewCount}&lt;/StyleText&gt;
                    &lt;StyleText small&gt;Rating: {props.ratingAverage}&lt;/StyleText&gt;
                &lt;/View&gt;
    );

};

  

export default RepositoryItem;
<br>Para darle borde a un elemento se usa:<br>
<br>overFlow: hide
<br>y despues borderRadius
]]></description><link>curso-ractnative\estilos.html</link><guid isPermaLink="false">Curso-RactNative/Estilos.md</guid><pubDate>Thu, 13 Feb 2025 10:57:31 GMT</pubDate></item><item><title><![CDATA[FlatList]]></title><description><![CDATA[ 
 <br>Componente para renderizar listas mas optimizada pero no para todas las vistas<br>Ejemplo:<br>Sin flalist:<br>const RepositoryList = () =&gt;{

    return(

        &lt;View&gt;

            {repositories.map(repo =&gt;(

                &lt;View key={repo.id}&gt;

                    &lt;Text&gt;Id: {repo.id}&lt;/Text&gt;

                    &lt;Text&gt;FullName: {repo.fullName}&lt;/Text&gt;

                    &lt;Text&gt;Description: {repo.description}&lt;/Text&gt;

                    &lt;Text&gt;Languaje: {repo.language}&lt;/Text&gt;

                    &lt;Text&gt;Stars: {repo.stargazersCount}&lt;/Text&gt;

                    &lt;Text&gt;Forks: {repo.forksCount}&lt;/Text&gt;

                    &lt;Text&gt;Review: {repo.reviewCount}&lt;/Text&gt;

                    &lt;Text&gt;Rating: {repo.ratingAverage}&lt;/Text&gt;

                &lt;/View&gt;

            ))}

        &lt;/View&gt;

    );

};
<br>Con flat list:<br>const RepositoryList = () =&gt;{

    return(

        &lt;FlatList
        data={repositories}//Contiene la informacion
       ItemSeparatorComponent={() =&gt; &lt;Text&gt;&lt;/Text&gt;} //Como se separa los elementos
        renderItem={({item:repo}) =&gt;(
        //Como renderizamos los elementos
            &lt;View key={repo.id}&gt;
                    &lt;Text&gt;Id: {repo.id}&lt;/Text&gt;
                    &lt;Text&gt;FullName: {repo.fullName}&lt;/Text&gt;
                    &lt;Text&gt;Description: {repo.description}&lt;/Text&gt;
                    &lt;Text&gt;Languaje: {repo.language}&lt;/Text&gt;
                    &lt;Text&gt;Stars: {repo.stargazersCount}&lt;/Text&gt;
                    &lt;Text&gt;Forks: {repo.forksCount}&lt;/Text&gt;
                    &lt;Text&gt;Review: {repo.reviewCount}&lt;/Text&gt;
                    &lt;Text&gt;Rating: {repo.ratingAverage}&lt;/Text&gt;
                &lt;/View&gt;
        )}&gt;
        &lt;/FlatList&gt;
        );
	};
]]></description><link>curso-ractnative\flatlist.html</link><guid isPermaLink="false">Curso-RactNative/FlatList.md</guid><pubDate>Thu, 13 Feb 2025 10:58:03 GMT</pubDate></item><item><title><![CDATA[Formik]]></title><description><![CDATA[ 
 <br>Es una librería gratuita que ayuda crear formularios fácilmente<br>Formik se importa <br>primero debemos decirle nuestro valores iniciales:<br>
const initialValues = {
    email:'',
    password:''
};
<br>Importamos Formik después de instalarlo en nuestro proyecto con NPM<br>import {Formik} from 'formik';
<br>Nosotros no podemos usar muchos componentes que ya viene  en base en Formik por qué te falla al hechos con HTML pero si podemos usar la forma de gestion por detras que tiene formik para usarlo en React Native:<br>import React from "react";
import {Formik} from 'formik';
import {  Button, View,StyleSheet } from "react-native";
import StyleTextInput from "../components/StyleTextInput";

  

const initialValues = {
    email:'',
    password:''
};

export default function LogIn(){
    return(
       &lt;Formik
        initialValues={initialValues}
        onSubmit={values =&gt; console.log(values)}&gt;
            {(  {handleChange,handleSubmit,values} ) =&gt; {
                return (
                    &lt;View style={styles.form}&gt;
                        &lt;StyleTextInput
                            placeholder="E-mail"
                            value={values.email}
                            onChange={handleChange('email')}
                        /&gt;
                        &lt;StyleTextInput
                            placeholder="Password"
                            value={values.password}
                            onChange={handleChange('password')}
                        /&gt;
                        &lt;Button onPress={handleSubmit}title="Log In"&gt;&lt;/Button&gt;
                    &lt;/View&gt;
                );
            }}
        &lt;/Formik&gt;
    );
};

const styles = StyleSheet.create({
    form:{
       margin:12
    }
});
<br>Creamos un componente personalizado que adentro contiene estilos nuestro y input, además colocamos Formik y dentro del mismo devolvemos una función con todo el cuerpo de nuestro formulario ya que antes de los <a data-href="Hooks" href="\curso_react\hooks.html" class="internal-link" target="_self" rel="noopener nofollow">Hooks</a>  se realiza de esta manera.<br>Otras nuevas formas de hacer esto es con hoks nuevo <a data-href="useForm" href="\useForm" class="internal-link" target="_self" rel="noopener nofollow">useForm</a> o para ahorrar rendimiento <a data-href="DESARROLLO-DE-INTERFACEZ/Curso_React/useState" href="\DESARROLLO-DE-INTERFACEZ\Curso_React\useState" class="internal-link" target="_self" rel="noopener nofollow">DESARROLLO-DE-INTERFACEZ/Curso_React/useState</a>.]]></description><link>curso-ractnative\formik.html</link><guid isPermaLink="false">Curso-RactNative/Formik.md</guid><pubDate>Thu, 13 Feb 2025 10:58:15 GMT</pubDate></item><item><title><![CDATA[MapReactNAtiva]]></title><description><![CDATA[ 
 <br>Para usar la funcion de React native se usa la funcion map pero la funcion fecha en debe usar{} se usa ():<br>return(

        &lt;View&gt;

            {repositories.map(repo =&gt;(

                &lt;View key={repo.id}&gt;

                    &lt;Text&gt;Id: {repo.id}&lt;/Text&gt;

                    &lt;Text&gt;FullName: {repo.fullName}&lt;/Text&gt;

                    &lt;Text&gt;Description: {repo.description}&lt;/Text&gt;

                    &lt;Text&gt;Languaje: {repo.language}&lt;/Text&gt;

                    &lt;Text&gt;Stars: {repo.stargazersCount}&lt;/Text&gt;

                    &lt;Text&gt;Forks: {repo.forksCount}&lt;/Text&gt;

                    &lt;Text&gt;Review: {repo.reviewCount}&lt;/Text&gt;

                    &lt;Text&gt;Rating: {repo.ratingAverage}&lt;/Text&gt;

                &lt;/View&gt;

            ))}

        &lt;/View&gt;

    );
]]></description><link>curso-ractnative\mapreactnativa.html</link><guid isPermaLink="false">Curso-RactNative/MapReactNAtiva.md</guid><pubDate>Mon, 11 Mar 2024 13:22:11 GMT</pubDate></item><item><title><![CDATA[React Router Native]]></title><description><![CDATA[ 
 <br>//App
import React from 'react';
import { StatusBar } from 'expo-status-bar';
import { StyleSheet, Text, TouchableNativeFeedback, View } from 'react-native';
import Main from './src/components/Main'; 
import { NativeRouter } from "react-router-native";

  

export default function App() {
  console.log("HOLA");
  return (
    &lt;NativeRouter&gt;
      &lt;Main /&gt;
    &lt;/NativeRouter&gt;
  );
}

//Main
import React from "react";
import { Text, View } from "react-native";
import RepositoryList from "./RepositoryList"; // Elimina ".jsx"
import AppBar from "./AppBar"; // Elimina ".jsx"
import { Routes, Route, Navigate } from "react-router-native";

  

const Main = () =&gt; {
  return (
    &lt;View style={{ flex: 1 }}&gt;
      &lt;AppBar /&gt;
        &lt;Routes&gt;
            &lt;Route path="/" element={&lt;RepositoryList /&gt;}/&gt;
            &lt;Route path="/signin" element={&lt;Text &gt;Work it&lt;/Text&gt;}/&gt;
            &lt;Route path="*" element={&lt;Navigate to={'/'}/&gt;}/&gt;
        &lt;/Routes&gt;
    &lt;/View&gt;
  );
}

  

export default Main; // Cambia a export default Main;
]]></description><link>curso-ractnative\react-router-native.html</link><guid isPermaLink="false">Curso-RactNative/React Router Native.md</guid><pubDate>Tue, 12 Mar 2024 11:01:13 GMT</pubDate></item><item><title><![CDATA[ScrollView]]></title><description><![CDATA[ 
 <br>Es un componente que usa para cuando un <a data-href="View" href="\View" class="internal-link" target="_self" rel="noopener nofollow">View</a> o vista necesita scroll lo cual si es un elementos muy básico  se usa <a data-href="FlatList" href="\curso-ractnative\flatlist.html" class="internal-link" target="_self" rel="noopener nofollow">FlatList</a> porque consume menos recursos]]></description><link>curso-ractnative\scrollview.html</link><guid isPermaLink="false">Curso-RactNative/ScrollView.md</guid><pubDate>Thu, 13 Feb 2025 10:59:00 GMT</pubDate></item><item><title><![CDATA[Text]]></title><description><![CDATA[ 
 <br>Componente de react básico para texto no se puede colocar texto directo]]></description><link>curso-ractnative\text.html</link><guid isPermaLink="false">Curso-RactNative/Text.md</guid><pubDate>Thu, 13 Feb 2025 10:58:46 GMT</pubDate></item><item><title><![CDATA[TextInput]]></title><description><![CDATA[ 
 <br>Es un input de html basico para olocar informacion]]></description><link>curso-ractnative\textinput.html</link><guid isPermaLink="false">Curso-RactNative/TextInput.md</guid><pubDate>Mon, 11 Mar 2024 11:45:49 GMT</pubDate></item><item><title><![CDATA[Touchable]]></title><description><![CDATA[ 
 <br>Botones que se pueden tocar de la UI<br>Se usa una propiedad onPress para ejecutar un trozo de código que queramos<br>Tenemos muchas variantes de touchable:<br>
<br>TouchableWithoutFeedback
<br>TouchableNativeFeedback
]]></description><link>curso-ractnative\touchable.html</link><guid isPermaLink="false">Curso-RactNative/Touchable.md</guid><pubDate>Thu, 13 Feb 2025 10:59:26 GMT</pubDate></item><item><title><![CDATA[ViewReact]]></title><description><![CDATA[ 
 <br>Componente que contiene todo el contedio que es parecido a un div con flex centrado<br>por defecto vienen con display flex]]></description><link>curso-ractnative\viewreact.html</link><guid isPermaLink="false">Curso-RactNative/ViewReact.md</guid><pubDate>Mon, 11 Mar 2024 19:19:20 GMT</pubDate></item><item><title><![CDATA[<strong>Anotaciones en Spring</strong>]]></title><description><![CDATA[ 
 <br><br><br>En Spring y otros frameworks como Hibernate, las anotaciones son utilizadas para proporcionar metadatos a nuestras clases y funciones. Estas anotaciones permiten configurar y señalar comportamientos específicos sin necesidad de archivos XML de configuración.<br>Las anotaciones pueden aplicarse a:  <br>
<br>Clases: Para definir componentes, controladores, servicios, etc.  
<br>Métodos: Para indicar lógica específica dentro de una función.  
<br>Campos: Para inyectar dependencias o mapear atributos.  
<br><br><br>import org.springframework.stereotype.Component;

@Component
public class MiComponente {
    public void ejecutar() {
        System.out.println("Ejecutando componente...");
    }
}
<br><br>import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class MiServicio {

    @Autowired
    private MiComponente miComponente;

    public void ejecutarServicio() {
        miComponente.ejecutar();
    }
}
<br><br>import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api")
public class MiControlador {

    @GetMapping("/saludo")
    public String saludar() {
        return "Hola desde Spring Boot";
    }
}
<br><br>]]></description><link>curso-spring\anotaciones.html</link><guid isPermaLink="false">Curso-spring/Anotaciones.md</guid><pubDate>Fri, 14 Feb 2025 21:36:50 GMT</pubDate></item><item><title><![CDATA[Controllers]]></title><description><![CDATA[ 
 <br>Los controllers sirven para controlar las direcciones de url y añade una capa mas a nuestro proyecyto de Spring<br>Ademas utiliza la <a data-href="Anotaciones" href="\curso-spring\anotaciones.html" class="internal-link" target="_self" rel="noopener nofollow">Anotaciones</a>  @RestController:<br>package curso.spring.Curso.controllers;  
  
import org.springframework.web.bind.annotation.RestController;  
  
@RestController  
public class usuarioController {  
  
  
}
<br>Metodos que controlan una URL:<br>package curso.spring.Curso.controllers;  
  
import curso.spring.Curso.Models.Usuario;  
import org.springframework.web.bind.annotation.PathVariable;  
import org.springframework.web.bind.annotation.RequestMapping;  
import org.springframework.web.bind.annotation.RestController;  
  
import java.util.List;  
  
@RestController  
public class usuarioController {  
  
  
    @RequestMapping(value = "prueba") //Se usa esta notacion 
    public List&lt;String&gt; prueba(){  
        return List.of("Manzana","kiwi","banana");  
    }  
  
    @RequestMapping(value = "usuario/{id}")  //Se usan esto para hacer variable la notacion
    public Usuario getUsuario(@PathVariable String id){  
        Usuario usu = new Usuario();  
        usu.setNombre("pepe");  
        usu.setApellido("pepona");  
        usu.setEmail("Email");  
        usu.setTelefono("2133");  
        return usu;  
    }  
  
    @RequestMapping(value = "editar")  
    public Usuario editar(){  
        Usuario usu = new Usuario();  
        usu.setNombre("pepe");  
        usu.setApellido("pepona");  
        usu.setEmail("Email");  
        usu.setTelefono("2133");  
        return usu;  
    }  
  
    @RequestMapping(value = "eliminar")  
    public Usuario eliminar(){  
        Usuario usu = new Usuario();  
        usu.setNombre("pepe");  
        usu.setApellido("pepona");  
        usu.setEmail("Email");  
        usu.setTelefono("2133");  
        return usu;  
    }  
  
    @RequestMapping(value = "buscar")  
    public Usuario buscar(){  
        Usuario usu = new Usuario();  
        usu.setNombre("pepe");  
        usu.setApellido("pepona");  
        usu.setEmail("Email");  
        usu.setTelefono("2133");  
        return usu;  
    }  
}

<br>Notaciones:<br>
<br>@PathVariable: pasar una vairable en la URL
<br>@RequestMapping: Buscar el metodo y lo asocia con la ruta de url que le pasamos
]]></description><link>curso-spring\controllers.html</link><guid isPermaLink="false">Curso-spring/Controllers.md</guid><pubDate>Tue, 06 Feb 2024 22:05:28 GMT</pubDate></item><item><title><![CDATA[Framework]]></title><description><![CDATA[ 
 <br>Es un marco de trabajo en donde aplicamos los patrones de  arquitectura como el <a data-href="MVC" href="\curso-spring\mvc.html" class="internal-link" target="_self" rel="noopener nofollow">MVC</a><br>Ejemplos:<br>java -&gt; Spring<br>
Node -&gt; Express<br>
Python -&gt; Djando<br>
PHP -&gt; Laravel]]></description><link>curso-spring\framework.html</link><guid isPermaLink="false">Curso-spring/Framework.md</guid><pubDate>Tue, 06 Feb 2024 21:19:58 GMT</pubDate></item><item><title><![CDATA[Json]]></title><description><![CDATA[ 
 <br>Forma de pasar datos mas moderna y ligera que el <a data-tooltip-position="top" aria-label="ACCESO-A-DATOS/Curso-spring/XML" data-href="ACCESO-A-DATOS/Curso-spring/XML" href="\ACCESO-A-DATOS\Curso-spring\XML" class="internal-link" target="_self" rel="noopener nofollow">XML</a>]]></description><link>curso-spring\json.html</link><guid isPermaLink="false">Curso-spring/Json.md</guid><pubDate>Tue, 06 Feb 2024 08:20:28 GMT</pubDate></item><item><title><![CDATA[Maven or Graveld]]></title><description><![CDATA[ 
 <br>Maven o graveld son archivos xml para mencionar las dependencias necesarias para abrir nuestro proyecto de java.<br>Graveld es mas optimo, maven salió mucho antes<br>Fueron creados para no tener que pasar archivos pesados de nuestro proyectos]]></description><link>curso-spring\maven-or-graveld.html</link><guid isPermaLink="false">Curso-spring/Maven or Graveld.md</guid><pubDate>Thu, 13 Feb 2025 10:28:45 GMT</pubDate></item><item><title><![CDATA[Métodos HHTTP]]></title><description><![CDATA[ 
 <br>Son los métodos por defecto del HHTTP<br>ellos son:<br>
<br>GET: Consulta.
<br>POST: Crear.
<br>PUT: Modificar.
<br>PATCH: Modificar pequñas entidades.
<br>DELETE: Eliminar.
<br>Otros:<br>
<br>CONNECT
<br>OPTIONS
<br>TRACE
<br>HEAD
]]></description><link>curso-spring\métodos-hhttp.html</link><guid isPermaLink="false">Curso-spring/Métodos HHTTP.md</guid><pubDate>Tue, 06 Feb 2024 13:25:58 GMT</pubDate></item><item><title><![CDATA[MVC]]></title><description><![CDATA[ 
 <br>Modelo Vista Controlador petron de arquictetura<br>
<img alt="mVC.jpg" src="\curso-spring\mvc.jpg">]]></description><link>curso-spring\mvc.html</link><guid isPermaLink="false">Curso-spring/MVC.md</guid><pubDate>Tue, 06 Feb 2024 17:38:56 GMT</pubDate><enclosure url="curso-spring\mvc.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;curso-spring\mvc.jpg&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[MVC con REST]]></title><description><![CDATA[ 
 <br>Lo mismo que <a data-href="MVC" href="\curso-spring\mvc.html" class="internal-link" target="_self" rel="noopener nofollow">MVC</a> pero añadiendo y cambiando el controler con una API Rest<br><img alt="mvc-rest.png" src="\curso-spring\mvc-rest.png"><br>MVC  tiene  ventajas que rest no tiene ademas combina cada uno ya que java no tinene asincorona<br>Primero entra en capa del controlador la petiicon del cliente y no la procesa ahi sino que se la pasa a la capa de Service que es la capa encaragda de la lógica.<br>Pero si necesita una peticion a la base de datos esa se la pasa a la capa repository controla la logica de la base de datos relacionada con la capa modelo que ahi conteine las entidades que se usan en nuestra base de datos<br>Una vez que obtine los datos se lo pasa a la capa Service y le la informacion procesada al Controlador y este le devuelve la informacion a la peticion en formato JSON ]]></description><link>curso-spring\mvc-con-rest.html</link><guid isPermaLink="false">Curso-spring/MVC con REST.md</guid><pubDate>Thu, 13 Feb 2025 10:35:03 GMT</pubDate><enclosure url="curso-spring\mvc-rest.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;curso-spring\mvc-rest.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Introducción a Spring]]></title><description><![CDATA[ 
 <br><br>Spring es un marco de desarrollo de aplicaciones en Java ampliamente utilizado para facilitar la creación de aplicaciones robustas, escalables y mantenibles. Originalmente desarrollado por Rod Johnson y lanzado en 2002, Spring proporciona un ecosistema modular y flexible para el desarrollo de aplicaciones empresariales.<br><br>Spring brinda un gran abanico de herramientas dentro del ecosistema del <a data-href="Framework" href="\curso-spring\framework.html" class="internal-link" target="_self" rel="noopener nofollow">Framework</a>:<br>
<br>Inversión de Control (IoC)

<br>Spring utiliza contenedores IoC que administran la creación y configuración de objetos, facilitando la inyección de dependencias y reduciendo el acoplamiento en la aplicación.


<br>Programación Orientada a Aspectos (AOP)

<br>Permite separar lógicas transversales (como seguridad, logging y transacciones) del código principal, mejorando la modularidad y mantenibilidad del código.


<br>Soporte para Data Access

<br>Spring proporciona integraciones con JDBC, Hibernate, JPA y otros frameworks de persistencia para facilitar la gestión de bases de datos.


<br>Spring MVC

<br>Un potente framework para el desarrollo de aplicaciones web basado en el patrón Modelo-Vista-Controlador (MVC), permitiendo la creación de APIs REST y aplicaciones web.


<br>Spring Boot

<br>Una extensión de Spring que simplifica la configuración y el despliegue de aplicaciones, permitiendo crear aplicaciones independientes con un enfoque minimalista.


<br>Spring Security

<br>Proporciona herramientas para gestionar autenticación y autorización, permitiendo implementar medidas de seguridad de manera sencilla y efectiva.


<br>Spring Cloud

<br>Diseñado para facilitar el desarrollo de aplicaciones basadas en microservicios, proporcionando herramientas para gestión de configuraciones, descubrimiento de servicios y balanceo de carga.


<br><br>Spring sigue un enfoque modular con varios proyectos que pueden utilizarse de forma independiente o combinada. Su arquitectura se basa en los siguientes componentes clave:<br>
<br>Core Container: Gestiona la inversión de control y la configuración de beans.
<br>Data Access: Soporte para bases de datos con JDBC, ORM, JPA y transacciones.
<br>Web: Contiene Spring MVC, WebFlux y herramientas para desarrollo web.
<br>AOP: Implementa programación orientada a aspectos.
<br>Security: Proporciona autenticación y autorización.
<br>Cloud: Soporte para arquitecturas de microservicios.
<br>Spring Boot: Facilita la creación y despliegue de aplicaciones.
<br><br>
<br>Flexibilidad: Modular y compatible con diversas tecnologías.
<br>Facilidad de integración: Compatible con Hibernate, JPA, RabbitMQ, Kafka, entre otros.
<br>Eficiencia: Reduce la necesidad de escribir código boilerplate.
<br>Seguridad: Cuenta con herramientas robustas para autenticación y autorización.
<br>Escalabilidad: Adecuado para aplicaciones empresariales y arquitecturas de microservicios.
]]></description><link>curso-spring\spring.html</link><guid isPermaLink="false">Curso-spring/Spring.md</guid><pubDate>Fri, 28 Feb 2025 10:14:53 GMT</pubDate></item><item><title><![CDATA[URL]]></title><description><![CDATA[ 
 <br>La dirección que asocia a un numero pero hacerlo mas fácil de leer se usan palabras que representan un grupo de números:<br>1.199.19.9<br>
<a data-tooltip-position="top" aria-label="http://www.google.com" rel="noopener nofollow" class="external-link" href="http://www.google.com" target="_blank">www.google.com</a><br><img alt="original.png" src="\curso-spring\original.png"><img alt="ogx43rq.png" src="\curso-spring\ogx43rq.png"><br>La url llega hasta el recurso, la URI todo y la urn todo menos el protocolo<br>Las siglas URN, es Uniform Resource Name<br>Las siglas URI, es Uniform Resource Identifier]]></description><link>curso-spring\url.html</link><guid isPermaLink="false">Curso-spring/URL.md</guid><pubDate>Fri, 14 Feb 2025 21:41:44 GMT</pubDate><enclosure url="curso-spring\original.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;curso-spring\original.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[XML]]></title><description><![CDATA[ 
 <br>Es una forma mas antigua de pasar datos, es un "lenguaje de marcado extensible".<br>Si bien es mas legible es mas pesado por tener mas sobrecarga de datos en camnio el <a data-href="Json" href="\curso-spring\json.html" class="internal-link" target="_self" rel="noopener nofollow">Json</a> es mas liviano y es por eso que empieza atomar fuerzar]]></description><link>curso-spring\xml.html</link><guid isPermaLink="false">Curso-spring/XML.md</guid><pubDate>Tue, 06 Feb 2024 08:20:10 GMT</pubDate></item><item><title><![CDATA[Testing Automatizado]]></title><description><![CDATA[ 
 <br><br>El testing automatizado es el proceso de ejecución de pruebas de software mediante herramientas y scripts que validan automáticamente el funcionamiento de un sistema. Su objetivo es reducir la intervención manual, acelerar el proceso de prueba y mejorar la precisión en la detección de errores.<br><br>
<br>Ejecución sin intervención humana

<br>Las pruebas se ejecutan automáticamente con scripts predefinidos.


<br>Repetible y escalable

<br>Permite realizar pruebas en diferentes entornos y múltiples veces sin esfuerzo adicional.


<br>Mayor eficiencia y precisión

<br>Reduce el error humano y acelera la validación del software.


<br>Integración con CI/CD

<br>Se puede incorporar en pipelines de desarrollo para pruebas continuas.


<br><br>
<br>
Testing Unitario

<br>Prueba funciones y métodos individuales.
<br>Herramientas: JUnit (Java), PyTest (Python).


<br>
Testing de Integración

<br>Verifica la interacción entre módulos del sistema.
<br>Herramientas: Selenium, Postman.


<br>
Testing de Regresión

<br>Asegura que nuevas modificaciones no afecten funcionalidades previas.
<br>Herramientas: Cypress, TestNG.


<br>
Testing Funcional

<br>Valida que el sistema cumpla con los requisitos esperados.
<br>Herramientas: Selenium, Cucumber.


<br>
Testing de Rendimiento

<br>Evalúa la respuesta y estabilidad del sistema bajo carga.
<br>Herramientas: JMeter, LoadRunner.


<br>
Testing de Seguridad

<br>Identifica vulnerabilidades y amenazas en el sistema.
<br>Herramientas: OWASP ZAP, Burp Suite.


<br><br>
<br>Selenium → Pruebas de UI en aplicaciones web.
<br>JUnit / TestNG → Testing unitario en Java.
<br>Cypress → Pruebas automatizadas en frontend.
<br>JMeter → Pruebas de carga y rendimiento.
<br>Postman → Testing de APIs.
<br>Appium → Pruebas automatizadas en dispositivos móviles.
<br><br>from selenium import webdriver

def test_login():
    driver = webdriver.Chrome()
    driver.get("https://ejemplo.com/login")
    user_input = driver.find_element("name", "usuario")
    password_input = driver.find_element("name", "password")
    user_input.send_keys("testuser")
    password_input.send_keys("password123")
    driver.find_element("id", "btn-login").click()
    assert "Dashboard" in driver.title
    driver.quit()
<br>Ejecutar la prueba:<br>pytest test_automatizado.py
<br><br>
<br>Reduce el tiempo de ejecución de pruebas.
<br>Permite detectar errores antes del despliegue.
<br>Minimiza errores humanos.
<br>Facilita la ejecución de pruebas en múltiples entornos.
<br>Optimiza la integración en CI/CD.
<br><br>
<br>Mayor tiempo inicial de configuración y desarrollo de scripts.
<br>Requiere mantenimiento constante en cambios de UI o código.
<br>No es ideal para pruebas exploratorias o de usabilidad.
]]></description><link>desarrollo-de-interfacez\testnotas\testing-automatizado.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/testNotas/Testing Automatizado.md</guid><pubDate>Sat, 01 Mar 2025 12:02:39 GMT</pubDate></item><item><title><![CDATA[Testing de Aceptación]]></title><description><![CDATA[ 
 <br><br>El testing de aceptación es una fase del proceso de pruebas de software en la que se valida si el sistema cumple con los requisitos y expectativas del usuario final. Su objetivo es asegurar que el software es funcional, usable y está listo para ser desplegado en producción.<br><br>
<br>Basado en requisitos del usuario

<br>Evalúa si el sistema satisface las necesidades y expectativas del cliente.


<br>Simula escenarios del mundo real

<br>Se prueba el software en condiciones similares a su uso final.


<br>Involucra a usuarios finales o stakeholders

<br>Las pruebas pueden ser ejecutadas por clientes, testers especializados o partes interesadas.


<br>Determina si el software está listo para producción

<br>Si las pruebas son exitosas, el sistema puede implementarse.


<br><br>
<br>
Pruebas de Aceptación del Usuario (UAT - User Acceptance Testing)

<br>Los usuarios finales prueban el sistema antes de su lanzamiento.
<br>Ejemplo: Un cliente prueba una plataforma de comercio electrónico antes de su puesta en producción.


<br>
Pruebas de Aceptación del Negocio (BAT - Business Acceptance Testing)

<br>Verifica que el software cumple con los objetivos de negocio.
<br>Ejemplo: Un software de gestión contable es probado para validar que cumple con las normativas fiscales.


<br>
Pruebas de Regulación y Cumplimiento

<br>Evalúa si el sistema cumple con normativas legales y estándares de la industria.
<br>Ejemplo: Un sistema bancario es probado para verificar que cumple con regulaciones de seguridad.


<br>
Pruebas Alfa

<br>Se realizan internamente por el equipo de desarrollo antes de liberar el software a usuarios externos.
<br>Ejemplo: Una nueva aplicación móvil es probada en un entorno de pruebas por el equipo de QA.


<br>
Pruebas Beta

<br>Se realizan con usuarios reales en un entorno de producción limitado.
<br>Ejemplo: Un grupo de usuarios seleccionados prueba una nueva función de una red social antes de su lanzamiento global.


<br><br>
<br>TestRail → Gestión de pruebas de aceptación.
<br>Cucumber → Pruebas automatizadas basadas en criterios de aceptación.
<br>JIRA → Seguimiento de pruebas y aprobación de requisitos.
<br>Selenium → Pruebas de UI para aceptación en aplicaciones web.
<br>Postman → Validación de APIs en entornos de aceptación.
<br><br>Feature: Login de usuario
  Scenario: Usuario ingresa credenciales válidas
    Given el usuario está en la página de login
    When ingresa "usuario123" y "contraseñaSegura"
    Then debería acceder al panel de control
<br>Ejecutar las pruebas:<br>mvn test
<br><br>
<br>Garantiza que el software cumple con los requisitos del cliente.
<br>Reduce riesgos antes del despliegue en producción.
<br>Mejora la satisfacción del usuario final.
<br>Detecta posibles fallos en escenarios reales.
<br>Facilita la toma de decisiones antes del lanzamiento del producto.
]]></description><link>desarrollo-de-interfacez\testnotas\testing-de-aceptación.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/testNotas/Testing de Aceptación.md</guid><pubDate>Sat, 01 Mar 2025 11:43:40 GMT</pubDate></item><item><title><![CDATA[Testing de Caja Blanca]]></title><description><![CDATA[ 
 <br><br>El testing de caja blanca es una técnica de pruebas de software que evalúa la estructura interna, la lógica y el flujo del código fuente de una aplicación. A diferencia del testing de caja negra, que se centra en la funcionalidad sin conocer la implementación, el testing de caja blanca requiere acceso al código y conocimientos de programación.<br><br>
<br>Basado en el código fuente

<br>Analiza la estructura y flujo lógico del programa.


<br>Ejecutado por desarrolladores o testers técnicos

<br>Requiere conocimientos en programación para evaluar el código.


<br>Detecta errores en la lógica interna

<br>Permite encontrar problemas como bucles infinitos, condiciones incorrectas o código no alcanzable.


<br>Mejora la eficiencia del software

<br>Optimiza el rendimiento y la calidad del código.


<br><br>
<br>
Cobertura de Sentencias

<br>Garantiza que cada línea de código se ejecute al menos una vez.


<br>
Cobertura de Decisiones

<br>Evalúa todas las condiciones en estructuras de control (if, while, for).


<br>
Cobertura de Condiciones

<br>Verifica todas las posibles combinaciones de condiciones en expresiones booleanas.


<br>
Cobertura de Caminos

<br>Asegura que todas las rutas posibles dentro del código se ejecuten.


<br><br>
<br>JUnit → Pruebas unitarias en Java.
<br>PyTest → Testing de código en Python.
<br>JaCoCo → Análisis de cobertura en Java.
<br>Coverage.py → Medición de cobertura en Python.
<br>CppUnit → Testing de código en C++.
<br><br>import unittest

def sumar(a, b):
    return a + b

class TestSumar(unittest.TestCase):
    def test_suma_positiva(self):
        self.assertEqual(sumar(2, 3), 5)
    def test_suma_negativa(self):
        self.assertEqual(sumar(-2, -3), -5)

if __name__ == '__main__':
    unittest.main()
<br>Ejecutar la prueba:<br>python -m unittest test_caja_blanca.py
<br><br>
<br>Detecta errores en el código antes de la integración.
<br>Mejora la seguridad y eficiencia del software.
<br>Permite optimizar el rendimiento y eliminar código innecesario.
<br>Asegura una alta cobertura del código y reduce fallos en producción.
<br><br>
<br>Requiere tiempo y conocimientos técnicos avanzados.
<br>No es eficiente para probar sistemas grandes y complejos en su totalidad.
<br>Puede no detectar errores en la experiencia de usuario o flujo funcional.
]]></description><link>desarrollo-de-interfacez\testnotas\testing-de-caja-blanca.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/testNotas/Testing de Caja Blanca.md</guid><pubDate>Sat, 01 Mar 2025 12:04:05 GMT</pubDate></item><item><title><![CDATA[Testing de Caja Gris]]></title><description><![CDATA[ 
 <br><br>El testing de caja gris es una técnica de prueba de software que combina elementos del testing de caja blanca (evaluación del código interno) y del testing de caja negra (evaluación de la funcionalidad sin conocer la implementación interna). Su objetivo es validar el comportamiento del sistema con un conocimiento parcial de su estructura interna.<br><br>
<br>
Conocimiento parcial del código fuente

<br>A diferencia del testing de caja negra, el tester tiene acceso limitado a la estructura interna del sistema.


<br>
Combina pruebas funcionales y estructurales

<br>Se evalúa la funcionalidad del software, pero también se analizan ciertos aspectos internos como consultas a bases de datos y flujos lógicos.


<br>
Identifica fallos en la interacción entre módulos

<br>Se enfoca en probar la comunicación entre diferentes componentes del sistema.


<br>
Útil para evaluar seguridad y rendimiento

<br>Puede detectar vulnerabilidades y problemas de optimización en el software.


<br><br>
<br>
Pruebas Basadas en Matrices de Datos

<br>Se analizan estructuras de datos internas y su procesamiento.
<br>Ejemplo: Verificar cómo una API gestiona y almacena información en la base de datos.


<br>
Pruebas de Regresión con Conocimiento del Sistema

<br>Se identifican módulos críticos donde pueden presentarse fallos tras actualizaciones.
<br>Ejemplo: Evaluar cómo afecta una nueva función al rendimiento del sistema.


<br>
Pruebas de Integración de Servicios y APIs

<br>Se validan las conexiones entre módulos internos y servicios externos.
<br>Ejemplo: Probar la comunicación entre un frontend y una base de datos.


<br>
Pruebas de Seguridad y Vulnerabilidad

<br>Se detectan riesgos mediante un análisis parcial del código fuente.
<br>Ejemplo: Identificar fallos en consultas SQL inyectables.


<br><br>
<br>Selenium → Pruebas de UI automatizadas.
<br>Postman → Testing de APIs y comunicación entre servicios.
<br>JMeter → Evaluación del rendimiento del sistema.
<br>Wireshark → Análisis de tráfico de red.
<br>OWASP ZAP → Detección de vulnerabilidades de seguridad.
<br><br>{
  "method": "POST",
  "url": "https://api.ejemplo.com/login",
  "body": {
    "usuario": "testuser",
    "password": "password123"
  }
}
<br>Prueba esperada:<br>
<br>Código de respuesta 200 OK si las credenciales son correctas.
<br>Código 401 Unauthorized si las credenciales son incorrectas.
<br><br>
<br>Detecta fallos en la integración de componentes.
<br>Optimiza el rendimiento del software con pruebas detalladas.
<br>Mejora la seguridad al analizar posibles vulnerabilidades.
<br>Equilibra pruebas funcionales y estructurales para mayor cobertura.
<br><br>
<br>Requiere conocimientos tanto de desarrollo como de pruebas funcionales.
<br>Puede ser más complejo de implementar que las pruebas de caja negra.
<br>No ofrece una revisión completa del código como el testing de caja blanca.
]]></description><link>desarrollo-de-interfacez\testnotas\testing-de-caja-gris.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/testNotas/Testing de Caja Gris.md</guid><pubDate>Sat, 01 Mar 2025 12:15:13 GMT</pubDate></item><item><title><![CDATA[Testing de Caja Negra]]></title><description><![CDATA[ 
 <br><br>El testing de caja negra es una técnica de pruebas de software que evalúa la funcionalidad del sistema sin necesidad de conocer su implementación interna o el código fuente. Se basa en la entrada y salida del sistema para verificar que se comporta según los requisitos especificados.<br><br>
<br>Basado en los requisitos del software

<br>Evalúa si el sistema responde correctamente a distintas entradas.


<br>No requiere acceso al código fuente

<br>Se enfoca en la funcionalidad y el comportamiento externo del software.


<br>Ejecutado por testers funcionales

<br>No es necesario que el tester tenga conocimientos de programación.


<br>Detecta errores en la funcionalidad del sistema

<br>Identifica fallos en la interfaz, la entrada/salida de datos y el procesamiento de información.


<br><br>
<br>
Equivalencia de Clases

<br>Divide las entradas en grupos equivalentes para reducir la cantidad de pruebas necesarias.
<br>Ejemplo: Si un campo de edad acepta valores entre 18 y 60, se prueban valores dentro y fuera de ese rango.


<br>
Análisis de Valores Límite

<br>Evalúa los valores en los extremos de los rangos permitidos.
<br>Ejemplo: Si un formulario acepta números del 1 al 100, se prueban valores como 0, 1, 100 y 101.


<br>
Tabla de Decisión

<br>Define combinaciones de entradas y sus respuestas esperadas.
<br>Útil cuando hay reglas de negocio complejas.


<br>
Pruebas de Transición de Estados

<br>Evalúa cómo cambia el sistema dependiendo del estado anterior.
<br>Ejemplo: Un sistema de autenticación con intentos fallidos bloquea la cuenta tras 3 intentos.


<br>
Pruebas de Caso de Uso

<br>Simula escenarios reales de uso del sistema.
<br>Ejemplo: Validar que un usuario pueda completar una compra en un e-commerce.


<br><br>
<br>Selenium → Pruebas automatizadas de interfaz.
<br>JUnit → Testing funcional en Java.
<br>Cypress → Pruebas de frontend.
<br>Postman → Testing de APIs.
<br>TestComplete → Pruebas automatizadas sin necesidad de código.
<br><br>from selenium import webdriver

def test_login():
    driver = webdriver.Chrome()
    driver.get("https://ejemplo.com/login")
    driver.find_element("name", "usuario").send_keys("usuario123")
    driver.find_element("name", "password").send_keys("contraseña123")
    driver.find_element("id", "btn-login").click()
    assert "Dashboard" in driver.title
    driver.quit()
<br>Ejecutar la prueba:<br>pytest test_caja_negra.py
<br><br>
<br>Permite detectar errores sin conocer el código fuente.
<br>Simula el uso real del sistema desde la perspectiva del usuario.
<br>Puede aplicarse en cualquier nivel de prueba (unitaria, integración, sistema).
<br>Facilita la automatización de pruebas funcionales.
<br><br>
<br>No identifica errores en la estructura interna del software.
<br>Puede ser difícil determinar la causa exacta de un fallo.
<br>Requiere muchas pruebas para garantizar una cobertura completa.
]]></description><link>desarrollo-de-interfacez\testnotas\testing-de-caja-negra.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/testNotas/Testing de Caja Negra.md</guid><pubDate>Sat, 01 Mar 2025 12:11:56 GMT</pubDate></item><item><title><![CDATA[Testing de Compatibilidad]]></title><description><![CDATA[ 
 <br><br>El testing de compatibilidad es un proceso de evaluación de software que verifica si una aplicación funciona correctamente en diferentes entornos, dispositivos, navegadores y sistemas operativos. Su objetivo es asegurar una experiencia uniforme y sin errores para todos los usuarios.<br><br>
<br>Evalúa el comportamiento del software en distintos entornos

<br>Analiza si la aplicación mantiene su funcionalidad y apariencia en diferentes dispositivos y sistemas operativos.


<br>Verifica la compatibilidad con hardware y software

<br>Comprueba si el sistema se ejecuta correctamente con distintas configuraciones.


<br>Identifica problemas de interoperabilidad

<br>Detecta fallos en la comunicación con otros sistemas o plataformas.


<br>Mejora la accesibilidad y la experiencia del usuario

<br>Asegura que la aplicación sea utilizable para una mayor cantidad de usuarios.


<br><br>
<br>
Compatibilidad con Sistemas Operativos

<br>Verifica si el software funciona en Windows, macOS, Linux, Android, iOS, etc.
<br>Ejemplo: Comprobar que una aplicación móvil se ejecuta correctamente en Android y iPhone.


<br>
Compatibilidad con Navegadores (Cross-Browser Testing)

<br>Evalúa el rendimiento en distintos navegadores web (Chrome, Firefox, Safari, Edge).
<br>Ejemplo: Verificar que una página web se visualice correctamente en diferentes navegadores.


<br>
Compatibilidad con Dispositivos

<br>Asegura que el software funcione en distintos tamaños de pantalla y tipos de hardware.
<br>Ejemplo: Probar una app en teléfonos, tablets y monitores de escritorio.


<br>
Compatibilidad con Red

<br>Evalúa el comportamiento de la aplicación en diferentes condiciones de conectividad (Wi-Fi, 3G, 5G, redes limitadas).
<br>Ejemplo: Comprobar si una aplicación de streaming se adapta a conexiones lentas.


<br>
Compatibilidad con Software de Terceros

<br>Verifica si el sistema es compatible con APIs, plugins y otras aplicaciones externas.
<br>Ejemplo: Evaluar la integración de un CRM con herramientas de facturación.


<br><br>
<br>BrowserStack → Pruebas en múltiples navegadores y dispositivos.
<br>Sauce Labs → Simulación de entornos de prueba en la nube.
<br>CrossBrowserTesting → Validación de compatibilidad en navegadores.
<br>LambdaTest → Pruebas automatizadas y en tiempo real en distintos entornos.
<br>Perfecto Mobile → Testing en dispositivos móviles reales.
<br><br>from selenium import webdriver

browsers = ["chrome", "firefox", "edge"]

for browser in browsers:
    if browser == "chrome":
        driver = webdriver.Chrome()
    elif browser == "firefox":
        driver = webdriver.Firefox()
    elif browser == "edge":
        driver = webdriver.Edge()
    
    driver.get("https://ejemplo.com")
    print(f"Probando en {browser}:", driver.title)
    driver.quit()
<br>Ejecutar la prueba para verificar compatibilidad en múltiples navegadores.<br><br>
<br>Asegura una experiencia de usuario uniforme en distintos entornos.
<br>Evita problemas de visualización y funcionamiento en ciertos dispositivos.
<br>Permite llegar a una audiencia más amplia sin restricciones tecnológicas.
<br>Reduce errores relacionados con la interoperabilidad de software.
<br><br>
<br>Requiere pruebas en múltiples dispositivos y configuraciones.
<br>Puede ser costoso si se realizan pruebas en hardware real.
<br>Las diferencias entre sistemas operativos pueden generar inconsistencias difíciles de corregir.
]]></description><link>desarrollo-de-interfacez\testnotas\testing-de-compatibilidad.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/testNotas/Testing de Compatibilidad.md</guid><pubDate>Sat, 01 Mar 2025 12:20:12 GMT</pubDate></item><item><title><![CDATA[Testing de Integración]]></title><description><![CDATA[ 
 <br><br>El testing de integración es una fase del proceso de pruebas de software que verifica la correcta interacción entre múltiples módulos o componentes de un sistema. Su objetivo es identificar fallos en la comunicación entre las distintas partes del software.<br><br>
<br>Verifica la comunicación entre módulos

<br>Asegura que los datos se transfieran correctamente entre diferentes componentes del sistema.


<br>Detecta problemas de compatibilidad

<br>Encuentra errores en la interacción de APIs, bases de datos, servicios web, entre otros.


<br>Evalúa el flujo del sistema

<br>Comprueba que el comportamiento global del software sea consistente.


<br>Puede ser automatizado o manual

<br>Se pueden usar herramientas para ejecutar pruebas automáticamente o realizar pruebas exploratorias manuales.


<br><br>
<br>
Testing de Integración Big Bang

<br>Se prueban todos los módulos juntos después de su desarrollo.
<br>Ventaja: Rápida verificación global del sistema.
<br>Desventaja: Difícil identificar errores individuales.


<br>
Testing de Integración Incremental

<br>Se prueban los módulos de manera progresiva, combinándolos poco a poco.
<br>Tipos:

<br>Ascendente: Se prueban primero los módulos de bajo nivel y se integran gradualmente los de nivel superior.
<br>Descendente: Se comienzan las pruebas desde los módulos de alto nivel y se integran los de nivel inferior.
<br>Mixto: Combinación de los enfoques ascendente y descendente.




<br>
Testing de Integración Continua

<br>Se automatizan pruebas para ejecutarse cada vez que se hace un cambio en el código (usado en CI/CD).


<br><br>
<br>Identifica errores en la interacción entre módulos antes de llegar a producción.
<br>Mejora la calidad del software, asegurando compatibilidad entre componentes.
<br>Facilita la detección de errores tempranos, reduciendo costos de corrección.
<br>Garantiza que los sistemas externos (APIs, bases de datos) funcionen correctamente con el software.
<br><br>
<br>JUnit (Java) → Para pruebas de integración en aplicaciones Java.
<br>Postman → Pruebas de integración en APIs.
<br>Selenium → Pruebas en aplicaciones web.
<br>PyTest (Python) → Testing de integración en sistemas Python.
<br>Cypress → Para pruebas de frontend con integración de backend.
<br><br>import requests

def test_api_responde_correctamente():
    response = requests.get("https://api.ejemplo.com/datos")
    assert response.status_code == 200
    assert "usuario" in response.json()
<br>Ejecutar las pruebas con:<br>pytest test_integracion.py
<br><br>
<br>Definir escenarios de prueba realistas.
<br>Automatizar las pruebas en pipelines de CI/CD.
<br>Simular respuestas de servicios externos con mocks o stubs.
<br>Asegurar cobertura de pruebas en todas las interacciones críticas.
<br>Ejecutar pruebas con diferentes volúmenes de datos para verificar escalabilidad.
]]></description><link>desarrollo-de-interfacez\testnotas\testing-de-integración.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/testNotas/Testing de Integración.md</guid><pubDate>Sat, 01 Mar 2025 11:41:06 GMT</pubDate></item><item><title><![CDATA[Testing de Regresión]]></title><description><![CDATA[ 
 <br><br>El testing de regresión es un proceso de prueba de software que verifica que las nuevas modificaciones en el código no hayan afectado funcionalidades existentes. Se ejecuta después de realizar cambios en la aplicación para asegurar que todo sigue funcionando correctamente.<br><br>
<br>Se ejecuta después de cambios en el código

<br>Valida que nuevas actualizaciones no introduzcan errores en módulos previamente funcionales.


<br>Puede ser manual o automatizado

<br>Se puede realizar con pruebas manuales o mediante herramientas automatizadas.


<br>Asegura la estabilidad del software

<br>Garantiza que las funcionalidades previas siguen operando correctamente.


<br>Se usa en ciclos de desarrollo continuo

<br>Es fundamental en metodologías ágiles y en CI/CD para evitar errores en cada versión.


<br><br>
<br>
Regresión Completa

<br>Se prueban todas las funcionalidades de la aplicación después de un cambio importante.
<br>Ejemplo: Tras una gran actualización, se validan todas las funciones críticas del sistema.


<br>
Regresión Parcial

<br>Solo se prueban las áreas afectadas por las modificaciones recientes.
<br>Ejemplo: Si se actualiza el sistema de pagos, se revisa solo esa parte sin afectar otras áreas.


<br>
Regresión Selectiva

<br>Se ejecutan solo los casos de prueba más relevantes para los cambios realizados.
<br>Ejemplo: Se seleccionan pruebas clave relacionadas con una nueva función añadida.


<br>
Regresión en Cascada

<br>Se prueban módulos dependientes para detectar efectos secundarios.
<br>Ejemplo: Un cambio en la autenticación puede afectar el acceso a otros módulos de la aplicación.


<br><br>
<br>Selenium → Pruebas automatizadas en aplicaciones web.
<br>JUnit/TestNG → Testing de regresión en Java.
<br>Cypress → Automatización de pruebas en frontend.
<br>Postman → Pruebas de regresión en APIs.
<br>Katalon Studio → Plataforma para pruebas automatizadas.
<br><br>from selenium import webdriver

def test_regresion():
    driver = webdriver.Chrome()
    driver.get("https://ejemplo.com/login")
    driver.find_element("name", "usuario").send_keys("usuario123")
    driver.find_element("name", "password").send_keys("password123")
    driver.find_element("id", "btn-login").click()
    assert "Dashboard" in driver.title
    driver.quit()
<br>Ejecutar la prueba:<br>pytest test_regresion.py
<br><br>
<br>Evita que nuevas funciones rompan el sistema.
<br>Asegura la estabilidad del software después de cada actualización.
<br>Optimiza la calidad y confiabilidad del producto.
<br>Facilita la integración continua en entornos de desarrollo ágil.
<br><br>
<br>Puede ser costoso en tiempo si se realiza manualmente.
<br>Necesita automatización para ser eficiente en grandes proyectos.
<br>Debe ejecutarse constantemente para detectar errores en cada versión.
]]></description><link>desarrollo-de-interfacez\testnotas\testing-de-regresión.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/testNotas/Testing de Regresión.md</guid><pubDate>Sat, 01 Mar 2025 12:22:26 GMT</pubDate></item><item><title><![CDATA[Testing de Rendimiento]]></title><description><![CDATA[ 
 <br><br>El testing de rendimiento es un tipo de prueba de software que evalúa la velocidad, estabilidad y escalabilidad de un sistema bajo diferentes condiciones de carga. Su objetivo es detectar cuellos de botella, mejorar la eficiencia y garantizar que la aplicación funcione correctamente bajo estrés.<br><br>
<br>Evalúa la velocidad y capacidad de respuesta

<br>Mide el tiempo de carga y la ejecución de operaciones críticas.


<br>Prueba la estabilidad del sistema

<br>Verifica cómo se comporta la aplicación durante períodos prolongados de uso.


<br>Detecta cuellos de botella y problemas de optimización

<br>Ayuda a identificar elementos que ralentizan el sistema.


<br>Simula distintos niveles de carga

<br>Prueba el software con diferentes volúmenes de usuarios y transacciones simultáneas.


<br><br>
<br>
Pruebas de Carga

<br>Evalúa cómo responde el sistema ante una cantidad específica de usuarios simultáneos.
<br>Ejemplo: Simular 1000 usuarios accediendo a una página web al mismo tiempo.


<br>
Pruebas de Estrés

<br>Mide el comportamiento del sistema cuando se somete a una carga extrema.
<br>Ejemplo: Aumentar progresivamente el tráfico hasta que el sistema colapse.


<br>
Pruebas de Escalabilidad

<br>Determina si el sistema puede manejar un aumento de usuarios sin degradar el rendimiento.
<br>Ejemplo: Probar cómo responde una API cuando el tráfico se duplica.


<br>
Pruebas de Estabilidad (Soak Testing)

<br>Analiza el rendimiento del sistema bajo una carga sostenida durante un largo período.
<br>Ejemplo: Ejecutar una aplicación web continuamente durante 48 horas para detectar fugas de memoria.


<br>
Pruebas de Concurrencia

<br>Evalúa el impacto de múltiples transacciones ejecutándose al mismo tiempo.
<br>Ejemplo: Varios usuarios intentando procesar pagos simultáneamente en un e-commerce.


<br><br>
<br>JMeter → Pruebas de carga y estrés en aplicaciones web.
<br>Gatling → Pruebas de rendimiento con enfoque en automatización.
<br>LoadRunner → Simulación de carga de usuarios en sistemas complejos.
<br>k6 → Testing de rendimiento para APIs y microservicios.
<br>New Relic → Monitoreo en tiempo real del rendimiento de aplicaciones.
<br><br>
<br>Configurar JMeter y crear un Thread Group con 500 usuarios concurrentes.
<br>Definir una HTTP Request para acceder a https://ejemplo.com.
<br>Ejecutar la prueba y analizar los tiempos de respuesta.
<br><br>
<br>Mejora la experiencia del usuario al optimizar tiempos de carga.
<br>Previene fallos en producción al detectar limitaciones del sistema.
<br>Asegura la escalabilidad del software ante crecimiento de usuarios.
<br>Optimiza el uso de recursos para reducir costos operativos.
<br><br>
<br>Requiere entornos de prueba similares a producción.
<br>Puede ser complejo identificar la causa raíz de problemas de rendimiento.
<br>Demanda herramientas y conocimientos especializados.
]]></description><link>desarrollo-de-interfacez\testnotas\testing-de-rendimiento.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/testNotas/Testing de Rendimiento.md</guid><pubDate>Sat, 01 Mar 2025 12:16:27 GMT</pubDate></item><item><title><![CDATA[Testing de Seguridad]]></title><description><![CDATA[ 
 <br><br>El testing de seguridad es un proceso de evaluación de software que tiene como objetivo identificar vulnerabilidades y riesgos que podrían ser explotados por atacantes. Se enfoca en proteger datos sensibles, asegurar el acceso adecuado y evitar ataques malintencionados.<br><br>
<br>Evalúa la protección de datos

<br>Verifica cómo se almacenan y gestionan datos confidenciales.


<br>Identifica vulnerabilidades

<br>Detecta fallos que podrían ser explotados por hackers.


<br>Simula ataques reales

<br>Realiza pruebas como inyección de código y ataques de denegación de servicio (DDoS).


<br>Garantiza cumplimiento de normativas

<br>Asegura que el software cumpla con estándares de seguridad como OWASP, ISO 27001 o GDPR.


<br><br>
<br>
Pruebas de Penetración (Pentesting)

<br>Simula ataques reales para evaluar la seguridad del sistema.
<br>Ejemplo: Un hacker ético intenta explotar vulnerabilidades en una aplicación web.


<br>
Análisis de Vulnerabilidades

<br>Escanea el sistema en busca de puntos débiles conocidos.
<br>Ejemplo: Uso de herramientas como Nessus para detectar fallos de seguridad.


<br>
Pruebas de Autenticación y Control de Acceso

<br>Evalúa si solo usuarios autorizados pueden acceder a ciertas funciones.
<br>Ejemplo: Intentar acceder a un área restringida sin credenciales válidas.


<br>
Pruebas de Inyección de Código

<br>Identifica si el sistema es vulnerable a ataques como SQL Injection o Cross-Site Scripting (XSS).
<br>Ejemplo: Insertar comandos maliciosos en formularios de entrada.


<br>
Pruebas de Seguridad en API

<br>Evalúa si los servicios de comunicación entre sistemas están protegidos.
<br>Ejemplo: Probar endpoints con Postman o Burp Suite.


<br>
Pruebas de Denegación de Servicio (DDoS)

<br>Simula un alto volumen de tráfico para evaluar cómo responde el sistema.
<br>Ejemplo: Uso de herramientas como LOIC o Slowloris.


<br><br>
<br>OWASP ZAP → Escaneo de vulnerabilidades en aplicaciones web.
<br>Burp Suite → Pruebas de seguridad en APIs y aplicaciones.
<br>Nmap → Análisis de redes y detección de puertos abiertos.
<br>Metasploit → Simulación de ataques reales.
<br>Wireshark → Análisis de tráfico de red.
<br><br>
<br>Instalar y abrir OWASP ZAP.
<br>Configurar la URL de la aplicación a analizar.
<br>Ejecutar el escaneo automatizado para detectar vulnerabilidades.
<br>Revisar los reportes y corregir fallos identificados.
<br><br>
<br>Previene ataques cibernéticos y fuga de datos.
<br>Cumple con normativas de seguridad y privacidad.
<br>Protege la reputación y confianza del usuario.
<br>Reduce costos de recuperación ante incidentes de seguridad.
<br><br>
<br>Requiere conocimientos avanzados en ciberseguridad.
<br>Algunas pruebas pueden afectar la estabilidad del sistema.
<br>Debe realizarse de manera continua para adaptarse a nuevas amenazas.
]]></description><link>desarrollo-de-interfacez\testnotas\testing-de-seguridad.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/testNotas/Testing de Seguridad.md</guid><pubDate>Sat, 01 Mar 2025 12:17:25 GMT</pubDate></item><item><title><![CDATA[Testing de Sistema]]></title><description><![CDATA[ 
 <br><br>El testing de sistema es una fase del proceso de pruebas de software en la que se evalúa el sistema completo para asegurarse de que cumple con los requisitos funcionales y no funcionales definidos. Se ejecuta en un entorno similar al de producción para validar la funcionalidad global del software antes de su lanzamiento.<br><br>
<br>Evalúa el software como un todo

<br>Se prueban todas las interacciones entre los módulos y componentes integrados.


<br>Se basa en los requisitos del sistema

<br>Verifica que el software cumpla con las especificaciones definidas en la fase de análisis.


<br>Incluye pruebas funcionales y no funcionales

<br>No solo se comprueba el correcto funcionamiento, sino también el rendimiento, la seguridad y la compatibilidad.


<br>Simula un entorno real de producción

<br>Se ejecuta en condiciones similares a las del entorno final para detectar posibles fallos antes del despliegue.


<br><br>
<br>
Testing Funcional

<br>Verifica que el sistema cumple con los requisitos establecidos.
<br>Ejemplo: Probar si un usuario puede registrarse y acceder a su cuenta.


<br>
Testing de Rendimiento

<br>Evalúa la velocidad, estabilidad y escalabilidad del sistema bajo diferentes cargas de trabajo.
<br>Ejemplo: Medir el tiempo de respuesta de una API con 1000 solicitudes simultáneas.


<br>
Testing de Seguridad

<br>Identifica vulnerabilidades y protege el sistema contra ataques.
<br>Ejemplo: Simulación de ataques de inyección SQL para comprobar la protección de la base de datos.


<br>
Testing de Compatibilidad

<br>Asegura que el sistema funciona correctamente en diferentes dispositivos, navegadores y sistemas operativos.
<br>Ejemplo: Probar una aplicación web en Chrome, Firefox y Safari.


<br>
Testing de Usabilidad

<br>Evalúa la experiencia del usuario en términos de facilidad de uso e interacción.
<br>Ejemplo: Medir cuántos pasos necesita un usuario para completar una compra en una tienda en línea.


<br>
Testing de Recuperación

<br>Comprueba la capacidad del sistema para recuperarse de fallos inesperados.
<br>Ejemplo: Simular un apagón del servidor y verificar si el sistema se restablece correctamente.


<br><br>
<br>Selenium → Pruebas automatizadas de UI.
<br>JMeter → Pruebas de rendimiento.
<br>Burp Suite → Pruebas de seguridad.
<br>TestRail → Gestión de pruebas.
<br>Postman → Pruebas de API.
<br><br>from selenium import webdriver

def test_login():
    driver = webdriver.Chrome()
    driver.get("https://ejemplo.com/login")
    user_input = driver.find_element("name", "usuario")
    password_input = driver.find_element("name", "password")
    user_input.send_keys("testuser")
    password_input.send_keys("password123")
    driver.find_element("id", "btn-login").click()
    assert "Dashboard" in driver.title
    driver.quit()
<br>Ejecutar la prueba:<br>pytest test_sistema.py
<br><br>
<br>Detecta errores en la funcionalidad global del software.
<br>Asegura que los requisitos del cliente se cumplan antes del lanzamiento.
<br>Previene fallos críticos en producción.
<br>Garantiza la compatibilidad con diferentes entornos.
<br>Optimiza el rendimiento y la seguridad del sistema.
]]></description><link>desarrollo-de-interfacez\testnotas\testing-de-sistema.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/testNotas/Testing de Sistema.md</guid><pubDate>Sat, 01 Mar 2025 11:41:54 GMT</pubDate></item><item><title><![CDATA[Testing de Usabilidad]]></title><description><![CDATA[ 
 <br><br>El testing de usabilidad es un proceso de evaluación de software que mide la facilidad de uso, accesibilidad y experiencia del usuario en un sistema o aplicación. Su objetivo es identificar problemas de diseño que puedan afectar la interacción del usuario y mejorar la eficiencia del producto digital.<br><br>
<br>Evalúa la experiencia del usuario (UX)

<br>Analiza cómo los usuarios interactúan con la interfaz.


<br>Identifica problemas de navegación y accesibilidad

<br>Detecta dificultades en la estructura y disposición de los elementos.


<br>Mide la eficiencia del diseño

<br>Determina si el usuario puede completar tareas de manera rápida y sin confusión.


<br>Recoge feedback directo de los usuarios

<br>Se basa en pruebas con usuarios reales para detectar problemas y oportunidades de mejora.


<br><br>
<br>
Pruebas de Observación

<br>Los usuarios interactúan con el sistema mientras los evaluadores observan su comportamiento.
<br>Ejemplo: Evaluar cómo un usuario navega en una tienda online y si encuentra fácilmente los productos.


<br>
Pruebas de Tareas Específicas

<br>Se asignan tareas concretas a los usuarios para medir la facilidad de completarlas.
<br>Ejemplo: Ver si un usuario puede registrarse y realizar una compra en una aplicación móvil sin problemas.


<br>
Pruebas A/B

<br>Se comparan dos versiones de una interfaz para determinar cuál proporciona una mejor experiencia.
<br>Ejemplo: Evaluar si un botón rojo genera más conversiones que un botón azul.


<br>
Pruebas de Accesibilidad

<br>Verifica que el sistema sea usable por personas con discapacidades.
<br>Ejemplo: Evaluar si una web es compatible con lectores de pantalla.


<br>
Test de Eye Tracking (Seguimiento Ocular)

<br>Analiza el recorrido visual de los usuarios en la interfaz.
<br>Ejemplo: Determinar en qué partes de una página web los usuarios prestan más atención.


<br><br>
<br>Hotjar → Analiza el comportamiento del usuario con mapas de calor.
<br>Google Analytics → Evalúa métricas de navegación y conversión.
<br>UsabilityHub → Realiza pruebas A/B con usuarios reales.
<br>Lookback → Permite pruebas de usabilidad remotas con grabaciones en vivo.
<br>WebAIM → Herramienta para pruebas de accesibilidad web.
<br><br>
<br>Se seleccionan 5 usuarios sin experiencia previa en la aplicación.
<br>Se les asigna la tarea de completar un formulario de contacto.
<br>Se mide el tiempo y cantidad de errores cometidos.
<br>Se analiza la experiencia de los usuarios y se identifican mejoras.
<br><br>
<br>Mejora la experiencia del usuario y la satisfacción.
<br>Aumenta la eficiencia y reduce la frustración del usuario.
<br>Optimiza la conversión y el uso del sistema.
<br>Reduce costos de soporte técnico y capacitación.
<br>Facilita la accesibilidad y la inclusión digital.
<br><br>
<br>Puede ser costoso y requerir tiempo.
<br>Los resultados dependen de la selección adecuada de usuarios de prueba.
<br>Requiere analizar múltiples factores subjetivos.
]]></description><link>desarrollo-de-interfacez\testnotas\testing-de-usabilidad.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/testNotas/Testing de Usabilidad.md</guid><pubDate>Sat, 01 Mar 2025 12:19:35 GMT</pubDate></item><item><title><![CDATA[Testing Manual]]></title><description><![CDATA[ 
 <br><br>El testing manual es un proceso en el que testers ejecutan pruebas de software sin el uso de herramientas de automatización. Su objetivo es identificar errores, evaluar la funcionalidad del sistema y garantizar una experiencia de usuario óptima antes del despliegue en producción.<br><br>
<br>Ejecutado por testers humanos

<br>No requiere herramientas de automatización, las pruebas se realizan manualmente.


<br>Simula el uso real del software

<br>Se evalúa el sistema desde la perspectiva del usuario final.


<br>Permite la detección de errores no obvios

<br>Puede identificar problemas en la interfaz de usuario, usabilidad o lógica del sistema.


<br>Requiere documentación y planificación

<br>Se utilizan casos de prueba, listas de verificación y reportes de errores.


<br><br>
<br>
Testing Exploratorio

<br>Se prueba el sistema sin seguir un plan predefinido.
<br>Ejemplo: Un tester navega por una aplicación buscando fallos inesperados.


<br>
Testing Funcional

<br>Verifica que el sistema cumple con los requisitos establecidos.
<br>Ejemplo: Probar si el botón "Comprar" en una tienda en línea realiza la acción esperada.


<br>
Testing de Usabilidad

<br>Evalúa la experiencia del usuario y la facilidad de uso.
<br>Ejemplo: Analizar si un formulario de registro es intuitivo y fácil de completar.


<br>
Testing de Regresión

<br>Asegura que nuevos cambios no afecten funcionalidades previas.
<br>Ejemplo: Tras actualizar una aplicación, se verifica que las funciones anteriores sigan funcionando correctamente.


<br>
Testing de Compatibilidad

<br>Comprueba que el software funcione en diferentes dispositivos, navegadores y sistemas operativos.
<br>Ejemplo: Probar una aplicación en Windows, Mac y Linux.


<br><br>Aunque es un proceso sin automatización, existen herramientas que ayudan en la gestión y documentación de pruebas:<br>
<br>TestRail → Gestión de casos de prueba.
<br>JIRA → Seguimiento de errores y pruebas.
<br>Bugzilla → Reporte y seguimiento de fallos.
<br>Trello → Organización de tareas de testing.
<br><br>
<br>Detecta problemas de experiencia de usuario y usabilidad.
<br>Flexible ante cambios en el sistema.
<br>Útil en pruebas exploratorias y de diseño.
<br>No requiere conocimientos avanzados en programación.
<br><br>
<br>Consume más tiempo en comparación con pruebas automatizadas.
<br>Mayor posibilidad de errores humanos.
<br>Menos eficiente para pruebas repetitivas o de gran escala.
]]></description><link>desarrollo-de-interfacez\testnotas\testing-manual.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/testNotas/Testing Manual.md</guid><pubDate>Sat, 01 Mar 2025 11:56:32 GMT</pubDate></item><item><title><![CDATA[Testing Unitario]]></title><description><![CDATA[ 
 <br><br><br>El testing unitario es una técnica de prueba de software que verifica el correcto funcionamiento de unidades individuales de código, como funciones, métodos o clases. Se realiza de manera aislada para asegurarse de que cada componente funciona según lo esperado antes de integrarlo con el resto del sistema.<br><br>
<br>Prueba pequeñas unidades de código

<br>Evalúa el comportamiento de funciones o métodos específicos.


<br>Se ejecuta de forma aislada

<br>No depende de otras partes del sistema ni de bases de datos externas.


<br>Automatizable

<br>Se pueden usar frameworks para ejecutar pruebas automáticamente.


<br>Rápido y eficiente

<br>Permite detectar errores en etapas tempranas del desarrollo.


<br><br>
<br>Detección temprana de errores, reduciendo costos de corrección.
<br>Facilita la refactorización, asegurando que los cambios no introduzcan nuevos errores.
<br>Mejora la calidad del código, promoviendo modularidad y buenas prácticas.
<br>Aumenta la confianza en el código, asegurando su funcionalidad esperada.
<br><br>Dependiendo del lenguaje de programación, existen diversos frameworks para realizar pruebas unitarias:<br>
<br>Java → JUnit, TestNG
<br>JavaScript → Jest, Mocha, Jasmine
<br>Python → unittest, pytest
<br>C# → NUnit, MSTest
<br>Ruby → RSpec
<br><br>import pytest

def suma(a, b):
    return a + b

def test_suma():
    assert suma(2, 3) == 5
    assert suma(-1, 1) == 0
<br>Ejecutar las pruebas con:<br>pytest test_suma.py
<br><br>
<br>Escribir pruebas independientes y aisladas.
<br>Usar nombres descriptivos en las pruebas.
<br>Mantener una alta cobertura de código.
<br>Evitar dependencias externas en las pruebas.
<br>Ejecutar pruebas automáticamente en integración continua (CI/CD).
]]></description><link>desarrollo-de-interfacez\testnotas\testing-unitario.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/testNotas/Testing Unitario.md</guid><pubDate>Sat, 01 Mar 2025 11:38:44 GMT</pubDate></item><item><title><![CDATA[Arquitectura MVC]]></title><description><![CDATA[ 
 <br>La arquitectura Modelo-Vista-Controlador (MVC) es un patrón de diseño de software que separa la lógica de negocio, la presentación y el control de una aplicación en tres componentes principales: Modelo, Vista y Controlador. Este enfoque facilita la mantenibilidad, escalabilidad y organización del código en aplicaciones de software.<br><br>
<br>
Modelo (Model)

<br>Representa los datos y la lógica de negocio.
<br>Gestiona la recuperación y manipulación de los datos en la aplicación.
<br>No tiene conocimiento de la vista ni del controlador.


<br>
Vista (View)

<br>Se encarga de la presentación y la interfaz de usuario.
<br>Recibe los datos del modelo y los muestra de manera adecuada al usuario.
<br>No contiene lógica de negocio.


<br>
Controlador (Controller)

<br>Actúa como intermediario entre la Vista y el Modelo.
<br>Gestiona la lógica de la aplicación y responde a las interacciones del usuario.
<br>Actualiza el modelo según las acciones del usuario y modifica la vista cuando es necesario.


<br><br>
<br>El usuario interactúa con la Vista (interfaz de usuario).
<br>La Vista envía la solicitud al Controlador.
<br>El Controlador procesa la solicitud y comunica con el Modelo.
<br>El Modelo gestiona los datos y envía la respuesta al Controlador.
<br>El Controlador actualiza la Vista con la información procesada.
<br><br>
<br>Separación de responsabilidades, lo que facilita el mantenimiento y la escalabilidad.
<br>Mejora la reutilización del código, ya que cada componente tiene una función específica.
<br>Facilita el desarrollo en equipo, permitiendo que diferentes personas trabajen en el Modelo, la Vista y el Controlador simultáneamente.
<br>Compatibilidad con múltiples interfaces de usuario, ya que el Modelo no está acoplado a la Vista.
<br><br>En un desarrollo con Java Spring:<br>
<br>Modelo: Clases de entidad y servicios que interactúan con la base de datos.
<br>Vista: Páginas HTML con Thymeleaf o tecnologías como React/Angular.
<br>Controlador: Clases en Spring que manejan las solicitudes HTTP y devuelven respuestas a la vista.
]]></description><link>desarrollo-de-interfacez\arquitectura-mvc.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Arquitectura MVC.md</guid><pubDate>Fri, 28 Feb 2025 10:35:20 GMT</pubDate></item><item><title><![CDATA[Código Gratuito]]></title><description><![CDATA[ 
 <br><br>El código gratuito se refiere a software que se puede utilizar sin costo, pero que no necesariamente brinda acceso a su código fuente. A diferencia del código libre, el código gratuito puede tener restricciones en su modificación, redistribución o acceso a su estructura interna.<br><br>
<br>
Código Gratuito

<br>No requiere pago para su uso.
<br>Puede tener restricciones en su modificación y redistribución.
<br>No necesariamente permite acceder al código fuente.


<br>
Código Libre

<br>Además de ser gratuito, permite modificar y distribuir el código.
<br>Garantiza transparencia y colaboración en su desarrollo.
<br>Se rige por licencias como GPL, MIT y Apache.


<br><br>
<br>Google Chrome: Disponible sin costo, pero su código fuente no es completamente accesible.
<br>Adobe Acrobat Reader: Se puede usar gratis, pero su código no es modificable por terceros.
<br>Skype: Software gratuito para comunicación, pero sin acceso a su estructura interna.
<br><br><br>
<br>Accesibilidad: Cualquier persona puede usarlo sin pagar.
<br>Fácil adopción: Atrae a usuarios y empresas por su disponibilidad inmediata.
<br>Soporte oficial: Muchos programas gratuitos provienen de empresas que garantizan estabilidad y seguridad.
<br><br>
<br>Limitaciones en la personalización: No se puede modificar según las necesidades del usuario.
<br>Dependencia del proveedor: Si el creador deja de ofrecer soporte, no se puede mantener por cuenta propia.
<br>Posibles costos ocultos: Algunas versiones gratuitas incluyen publicidad o requieren pagos para desbloquear funciones avanzadas.
]]></description><link>desarrollo-de-interfacez\código-gratuito.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Código gratuito.md</guid><pubDate>Fri, 28 Feb 2025 11:34:47 GMT</pubDate></item><item><title><![CDATA[Código Libre]]></title><description><![CDATA[ 
 <br><br>El código libre es un tipo de software cuyo código fuente está disponible para que cualquier persona lo use, modifique y distribuya. Se rige por licencias que garantizan la libertad de los usuarios para estudiar, compartir y mejorar el software sin restricciones.<br><br>
<br>Accesibilidad al código fuente: Cualquier usuario puede examinar y modificar el código.
<br>Libertad de uso y distribución: Se puede compartir y utilizar sin restricciones comerciales.
<br>Comunidad activa: Generalmente cuenta con el respaldo de una comunidad de desarrolladores y usuarios que contribuyen a su mejora.
<br>Licencias abiertas: Se rige por licencias como GPL (GNU General Public License), MIT, Apache, entre otras.
<br><br>
<br>Código Libre: Permite modificar y distribuir el software, asegurando total transparencia.
<br>Código Gratuito: Se puede usar sin costo, pero puede tener restricciones en su modificación o redistribución.
<br><br>
<br>Linux: Sistema operativo de código abierto ampliamente utilizado.
<br>Firefox: Navegador web desarrollado por Mozilla, accesible para modificaciones.
<br>LibreOffice: Suite de oficina alternativa a software propietario.
<br>WordPress: Plataforma de gestión de contenido (CMS) flexible y extensible.
<br><br><br>
<br>Transparencia y seguridad: Cualquier usuario puede auditar el código para detectar vulnerabilidades.
<br>Personalización total: Se puede modificar para adaptarse a necesidades específicas.
<br>Comunidad de soporte: Generalmente cuenta con documentación y foros de ayuda.
<br>No depende de una sola empresa: Se mantiene gracias a contribuciones globales.
<br><br>
<br>Curva de aprendizaje: Puede requerir conocimientos técnicos para su modificación y uso avanzado.
<br>Falta de soporte oficial: Algunas soluciones dependen exclusivamente de la comunidad.
<br>Compatibilidad limitada: Puede no integrarse fácilmente con software propietario.
]]></description><link>desarrollo-de-interfacez\código-libre.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/código libre.md</guid><pubDate>Fri, 28 Feb 2025 11:40:29 GMT</pubDate></item><item><title><![CDATA[Commit]]></title><description><![CDATA[ 
 <br>Un commit es una acción en los sistemas de control de versiones, como <a data-href="Git" href="\desarrollo-de-interfacez\git.html" class="internal-link" target="_self" rel="noopener nofollow">Git</a>, que guarda los cambios realizados en un repositorio. Cada commit registra un estado específico del código, permitiendo a los desarrolladores mantener un historial de modificaciones y colaborar de manera eficiente.<br><br>
<br>Registro de cambios: Cada commit almacena información sobre los cambios realizados en el código.
<br>Mensaje descriptivo: Se recomienda agregar un mensaje que explique las modificaciones.
<br>Identificación única: Cada commit tiene un identificador único (hash) que permite rastrearlo.
<br>Versión segura del código: Permite volver a versiones anteriores en caso de errores.
<br><br>Para realizar un commit en Git, se siguen estos pasos:<br>
<br>
Agregar los cambios al área de preparación:
git add .


<br>
Confirmar los cambios con un mensaje:
git commit -m "Descripción de los cambios"


<br><br>
<br>Escribir mensajes claros y concisos.
<br>Hacer commits pequeños y frecuentes en lugar de grandes cambios de una sola vez.
<br>Evitar incluir archivos innecesarios en los commits.
<br>Usar mensajes de commit en inglés cuando se trabaja con equipos internacionales.
<br><br>git commit -m "Fix: corregido error en validación de formulario"
]]></description><link>desarrollo-de-interfacez\commit.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Commit.md</guid><pubDate>Fri, 28 Feb 2025 11:42:08 GMT</pubDate></item><item><title><![CDATA[Conflicto]]></title><description><![CDATA[ 
 <br>Un conflicto en Git ocurre cuando dos o más ramas han realizado cambios en la misma línea de un archivo y <a data-href="Git" href="\desarrollo-de-interfacez\git.html" class="internal-link" target="_self" rel="noopener nofollow">Git</a> no puede fusionarlos automáticamente. Esto suele ocurrir durante operaciones como <a data-href="merge" href="\desarrollo-de-interfacez\merge.html" class="internal-link" target="_self" rel="noopener nofollow">merge</a>, <a data-href="rebase" href="\desarrollo-de-interfacez\rebase.html" class="internal-link" target="_self" rel="noopener nofollow">rebase</a> o <a data-href="pull" href="\desarrollo-de-interfacez\pull.html" class="internal-link" target="_self" rel="noopener nofollow">pull</a>.<br><br>
<br>Modificaciones en la misma línea de código en diferentes ramas.
<br>Intentar fusionar ramas con cambios incompatibles.
<br>Rebases con historial de cambios que entran en conflicto.
<br>Ediciones en archivos que han sido eliminados o renombrados en otra rama.
<br><br><br>Después de un merge o rebase, Git indicará qué archivos tienen conflictos:<br>git status
<br>Los archivos en conflicto aparecerán como "Unmerged paths".<br><br>Dentro del archivo en conflicto, Git mostrará las diferencias con marcas como:<br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
// Código de la rama actual
=======
// Código de la rama fusionada
&gt;&gt;&gt;&gt;&gt;&gt;&gt; rama-objetivo
<br>El desarrollador debe seleccionar la versión correcta o combinarlas manualmente.<br><br>Después de editar los archivos, se deben agregar al área de preparación:<br>git add archivo_en_conflicto.ext
<br><br>Luego de agregar los archivos corregidos, se confirma el merge:<br>git commit -m "Resolviendo conflicto en archivo_en_conflicto.ext"
<br><br>Se recomienda probar el código antes de seguir trabajando para evitar errores inesperados.<br><br>
<br>Actualizar el repositorio antes de hacer cambios (git pull).
<br>Dividir las tareas en ramas separadas y fusionarlas con frecuencia.
<br>Usar herramientas de revisión de cambios antes de confirmar modificaciones.
<br>Coordinar con el equipo para evitar ediciones en los mismos archivos.
]]></description><link>desarrollo-de-interfacez\conflicto.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Conflicto.md</guid><pubDate>Sat, 01 Mar 2025 10:08:02 GMT</pubDate></item><item><title><![CDATA[Temerario:]]></title><description><![CDATA[ 
 <br><br>Primer Trimestre:<br>Como lo esta dando:<br>
<br>
<a data-href="Git Hub - Sistema de Control de Versiones" href="\desarrollo-de-interfacez\git-hub-sistema-de-control-de-versiones.html" class="internal-link" target="_self" rel="noopener nofollow">Git Hub - Sistema de Control de Versiones</a>

<br><a data-tooltip-position="top" aria-label="Comandos - FLujo de Trabajo.canvas" data-href="Comandos - FLujo de Trabajo.canvas" href="\desarrollo-de-interfacez\comandos-flujo-de-trabajo.html" class="internal-link" target="_self" rel="noopener nofollow">Comandos - FLujo de Trabajo</a>


<br>
<a data-href="Interface de usuario (UI)" href="\desarrollo-de-interfacez\interface-de-usuario-(ui).html" class="internal-link" target="_self" rel="noopener nofollow">Interface de usuario (UI)</a>

<br>
<a data-href="Diseño de interfaces" href="\desarrollo-de-interfacez\diseño-de-interfaces.html" class="internal-link" target="_self" rel="noopener nofollow">Diseño de interfaces</a>

<br>
<a data-href="Usabilidad y accesibilidad" href="\desarrollo-de-interfacez\usabilidad-y-accesibilidad.html" class="internal-link" target="_self" rel="noopener nofollow">Usabilidad y accesibilidad</a>

<br>
<a data-href="Wireframes" href="\desarrollo-de-interfacez\wireframes.html" class="internal-link" target="_self" rel="noopener nofollow">Wireframes</a>

<br>
<a data-href="Prototipo" href="\desarrollo-de-interfacez\prototipo.html" class="internal-link" target="_self" rel="noopener nofollow">Prototipo</a>

<br>
<a data-href="Figma" href="\desarrollo-de-interfacez\figma.html" class="internal-link" target="_self" rel="noopener nofollow">Figma</a> 

<br>
Buenas Practicas

<br><a data-href="Usabilidad ISO" href="\desarrollo-de-interfacez\usabilidad-iso.html" class="internal-link" target="_self" rel="noopener nofollow">Usabilidad ISO</a>
<br><a data-href="Mockup" href="\desarrollo-de-interfacez\mockup.html" class="internal-link" target="_self" rel="noopener nofollow">Mockup</a>


<br>
Interfaces multiplafataforma

<br><a data-href="PhoneGap - Cordova" href="\desarrollo-de-interfacez\phonegap-cordova.html" class="internal-link" target="_self" rel="noopener nofollow">PhoneGap - Cordova</a>
<br><a data-href="Arquitectura MVC" href="\desarrollo-de-interfacez\arquitectura-mvc.html" class="internal-link" target="_self" rel="noopener nofollow">Arquitectura MVC</a>


<br>
Otros

<br><a data-href="Interfaces avanzadas Android" href="\desarrollo-de-interfacez\interfaces-avanzadas-android.html" class="internal-link" target="_self" rel="noopener nofollow">Interfaces avanzadas Android</a>
<br><a data-href="Frameworks e Interfaces" href="\desarrollo-de-interfacez\frameworks-e-interfaces.html" class="internal-link" target="_self" rel="noopener nofollow">Frameworks e Interfaces</a>
<br><a data-href="Realidad Virtual Aumentada" href="\desarrollo-de-interfacez\realidad-virtual-aumentada.html" class="internal-link" target="_self" rel="noopener nofollow">Realidad Virtual Aumentada</a>


<br>
<a data-href="React" href="\curso_react\react.html" class="internal-link" target="_self" rel="noopener nofollow">React</a>

<br>
<a data-href="Git Hub - Sistema de Control de Versiones" href="\desarrollo-de-interfacez\git-hub-sistema-de-control-de-versiones.html" class="internal-link" target="_self" rel="noopener nofollow">Git Hub - Sistema de Control de Versiones</a>

<br><a data-tooltip-position="top" aria-label="Comandos - FLujo de Trabajo.canvas" data-href="Comandos - FLujo de Trabajo.canvas" href="\desarrollo-de-interfacez\comandos-flujo-de-trabajo.html" class="internal-link" target="_self" rel="noopener nofollow">Comandos - FLujo de Trabajo</a>


<br>
<a data-href="Testing" href="\desarrollo-de-interfacez\testing.html" class="internal-link" target="_self" rel="noopener nofollow">Testing</a>

<br><a data-href="Unitarios" href="\Unitarios" class="internal-link" target="_self" rel="noopener nofollow">Unitarios</a>
<br><a data-href="Integración" href="\Integración" class="internal-link" target="_self" rel="noopener nofollow">Integración</a>
<br><a data-href="Manuales" href="\Manuales" class="internal-link" target="_self" rel="noopener nofollow">Manuales</a>


<br>Cuidado
Seguramente no se vea en este orden
]]></description><link>desarrollo-de-interfacez\desarrollo-de-interfaces.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Desarrollo De Interfaces.md</guid><pubDate>Fri, 28 Feb 2025 11:23:29 GMT</pubDate></item><item><title><![CDATA[Diseño de Interfaces]]></title><description><![CDATA[ 
 <br><br>El diseño de interfaces es el proceso de planificar y estructurar la apariencia visual y la experiencia de usuario en un sistema digital, como aplicaciones, sitios web y software. Su objetivo principal es crear una interacción intuitiva, accesible y atractiva para los usuarios.<br><br>
<br>
Usabilidad

<br>Garantiza que la interfaz sea fácil de aprender y utilizar.


<br>
Accesibilidad

<br>Asegura que la interfaz pueda ser utilizada por personas con diferentes capacidades.


<br>
Diseño Visual

<br>Incluye colores, tipografías, iconos y distribución de elementos para mejorar la experiencia del usuario.


<br>
Flujo de Navegación

<br>Define cómo los usuarios interactúan con la interfaz para realizar tareas de manera eficiente.


<br>
Interactividad

<br>Implementación de botones, menús y otros elementos que facilitan la navegación y el uso del sistema.


<br><br>Algunas herramientas populares para el diseño de interfaces incluyen:<br>
<br><a data-href="Figma" href="\desarrollo-de-interfacez\figma.html" class="internal-link" target="_self" rel="noopener nofollow">Figma</a>
<br>Adobe XD
<br>Sketch
<br>InVision
<br><br>Un buen diseño de interfaz mejora la experiencia del usuario, facilita la navegación y optimiza la interacción con el producto digital, lo que se traduce en mayor satisfacción y retención de los usuarios.]]></description><link>desarrollo-de-interfacez\diseño-de-interfaces.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Diseño de interfaces.md</guid><pubDate>Sat, 01 Mar 2025 10:09:44 GMT</pubDate></item><item><title><![CDATA[Git Fetch]]></title><description><![CDATA[ 
 <br><br>El comando git fetch en <a data-href="Git" href="\desarrollo-de-interfacez\git.html" class="internal-link" target="_self" rel="noopener nofollow">Git</a> se usa para descargar cambios del repositorio remoto sin fusionarlos con la rama actual del repositorio local. Permite a los desarrolladores ver los cambios disponibles antes de aplicarlos.<br><br><br><br>git fetch &lt;remoto&gt; &lt;rama&gt;
<br>Si se omiten los parámetros, Git traerá los cambios de todas las ramas remotas configuradas.<br><br>git fetch origin
<br>Este comando obtiene todos los cambios del repositorio remoto origin, pero no los fusiona automáticamente.<br><br>
<br>
Ver las Diferencias después de un fetch
git diff origin/main


<br>Permite comparar los cambios entre la rama local y la remota.


<br>
Actualizar Referencias Remotas
git fetch --prune


<br>Elimina referencias a ramas remotas que ya no existen en el servidor.


<br>
Descargar Todos los Cambios de Todas las Ramas
git fetch --all


<br>Obtiene los cambios de todos los remotos configurados en el repositorio.


<br><br>Si después de un fetch se quiere actualizar la rama local con los cambios obtenidos, se puede usar merge o rebase:<br>
<br>
Fusionar los cambios con merge
git merge origin/main


<br>Combina los cambios remotos en la rama actual.


<br>
Fusionar los cambios con rebase
git rebase origin/main


<br>Reaplica los commits locales sobre la versión más reciente de la rama remota.


]]></description><link>desarrollo-de-interfacez\fetch.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/fetch.md</guid><pubDate>Sat, 01 Mar 2025 10:07:44 GMT</pubDate></item><item><title><![CDATA[Figma]]></title><description><![CDATA[ 
 <br>Figma es una herramienta de diseño colaborativo basada en la nube que permite a diseñadores, desarrolladores y equipos trabajar juntos en la creación de interfaces, prototipos y sistemas de diseño. Lanzado en 2016, se ha convertido en una de las plataformas más populares para el diseño de experiencia de usuario (UX) y de interfaz de usuario (UI).<br><br>
<br>Basado en la nube

<br>No requiere instalaciones, permitiendo acceder desde cualquier dispositivo con un navegador web.


<br>Colaboración en tiempo real

<br>Múltiples usuarios pueden trabajar en un mismo archivo simultáneamente, facilitando la cooperación y reduciendo fricciones en el flujo de trabajo.


<br>Prototipado interactivo

<br>Permite crear prototipos navegables sin necesidad de herramientas adicionales, ayudando a visualizar el comportamiento de la interfaz.


<br>Integraciones y plugins

<br>Compatible con diversas integraciones y plugins que mejoran la productividad y personalizan la experiencia del usuario.


<br>Versionado y control de cambios

<br>Guarda el historial de cambios, permitiendo a los usuarios restaurar versiones anteriores si es necesario.


<br>Compatibilidad con equipos de desarrollo

<br>Genera especificaciones de diseño y exporta recursos para facilitar la implementación en código.


<br><br><br>
<br>Al permitir la edición simultánea y comentarios en vivo, optimiza la comunicación entre diseñadores, desarrolladores y otros stakeholders.
<br><br>
<br>Gracias a sus componentes reutilizables y la posibilidad de compartir diseños en tiempo real, reduce tiempos de desarrollo.
<br><br>
<br>Funciona en la nube, eliminando la necesidad de licencias costosas o equipos específicos. Puede utilizarse en Windows, macOS y Linux sin problemas.
<br><br>
<br>Su enfoque en UI/UX lo hace una herramienta fundamental en la creación de aplicaciones, sitios web y software.
]]></description><link>desarrollo-de-interfacez\figma.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Figma.md</guid><pubDate>Fri, 28 Feb 2025 10:21:08 GMT</pubDate></item><item><title><![CDATA[Flujos de Trabajo en Git]]></title><description><![CDATA[ 
 <br><br>Un flujo de trabajo en <a data-href="Git" href="\desarrollo-de-interfacez\git.html" class="internal-link" target="_self" rel="noopener nofollow">Git</a> es una estrategia o metodología que define cómo los desarrolladores colaboran en un proyecto, gestionan cambios y fusionan código dentro de un repositorio. Elegir un buen flujo de trabajo es clave para garantizar la eficiencia, evitar conflictos y mantener un historial de versiones limpio y ordenado.<br><br><br>
<br>Usa múltiples ramas para organizar el desarrollo.
<br>Estructura principal:

<br>main: Contiene la versión estable del proyecto.
<br>develop: Rama principal donde se integran los desarrollos antes de pasar a main.
<br>feature/*: Ramas temporales para desarrollar nuevas funcionalidades.
<br>release/*: Ramas para preparar versiones de producción.
<br>hotfix/*: Para corregir errores en producción.


<br>Ventajas: Organizado, ideal para equipos grandes y ciclos de desarrollo definidos.
<br>Desventajas: Puede ser complejo y generar sobrecarga de ramas.
<br><br>
<br>Flujo simplificado basado en ramas cortas.
<br>Se trabaja directamente desde la rama main y se crean ramas de características (feature-branch), que se fusionan con main mediante <a data-href="Pull Requests" href="\desarrollo-de-interfacez\pull-requests.html" class="internal-link" target="_self" rel="noopener nofollow">Pull Requests</a>.
<br>Ventajas: Sencillo, ideal para integración continua y despliegues rápidos.
<br>Desventajas: Menos control sobre versiones intermedias.
<br><br>
<br>Similar a GitHub Flow, pero incorpora ramas adicionales como staging y production para entornos de pruebas y producción.
<br>Ventajas: Mejor control de despliegues.
<br>Desventajas: Requiere definir con claridad los entornos y las reglas de fusión.
<br><br>
<br>Todos los desarrolladores trabajan en una sola rama (trunk o main) y hacen pequeños commits frecuentes.
<br>Se apoya en características como Feature Flags para habilitar/deshabilitar código en producción.
<br>Ventajas: Rápida integración, menor complejidad de ramas.
<br>Desventajas: Requiere pruebas automatizadas robustas para evitar introducir errores.
<br><br><br><br>
<br>Para proyectos grandes y equipos grandes: Git Flow es una buena opción.
<br>Para despliegues rápidos y desarrollo ágil: <a data-href="GitHub" href="\desarrollo-de-interfacez\github.html" class="internal-link" target="_self" rel="noopener nofollow">GitHub</a> Flow funciona bien.
<br>Para proyectos que requieren entornos de prueba: <a data-href="GitLab" href="\desarrollo-de-interfacez\gitlab.html" class="internal-link" target="_self" rel="noopener nofollow">GitLab</a> Flow es recomendable.
<br>Para startups y desarrollo continuo: Trunk-Based Development permite integración rápida.
]]></description><link>desarrollo-de-interfacez\flujo-de-trabajo-de-git.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Flujo de  trabajo de Git.md</guid><pubDate>Sat, 01 Mar 2025 10:12:14 GMT</pubDate></item><item><title><![CDATA[Frameworks e Interfaces]]></title><description><![CDATA[ 
 <br><br>Un framework es un conjunto de herramientas, bibliotecas y reglas predefinidas que facilitan el desarrollo de software al proporcionar una estructura base. En términos generales, un framework permite reutilizar código y seguir buenas prácticas en el desarrollo de aplicaciones.<br><br>
<br>Modularidad: Permite utilizar diferentes componentes según las necesidades del proyecto.
<br>Reutilización de Código: Evita escribir código repetitivo al proporcionar soluciones predefinidas.
<br>Estandarización: Facilita el desarrollo siguiendo un conjunto de reglas y estructuras comunes.
<br>Extensibilidad: Permite agregar funcionalidades adicionales según sea necesario.
<br><br>
<br>Desarrollo Web: React, Angular, Vue.js, Laravel.
<br>Desarrollo Móvil: Flutter, React Native, SwiftUI.
<br>Backend: Spring Boot, Django, Express.js.
<br><br>En el ámbito del desarrollo de software, una interfaz se refiere a dos conceptos principales:<br>
<br>
Interfaz de Usuario (UI - User Interface)

<br>Es la parte visual con la que los usuarios interactúan dentro de una aplicación.
<br>Puede incluir botones, formularios, menús y cualquier otro elemento gráfico.
<br>Se diseñan siguiendo principios de usabilidad y accesibilidad.


<br>
Interfaz de Programación de Aplicaciones (API - Application Programming Interface)

<br>Define la manera en que diferentes sistemas o componentes de software pueden comunicarse entre sí.
<br>Puede incluir métodos, protocolos y reglas para la interacción con servicios o librerías.


<br><br>
<br>Los frameworks incluyen herramientas para diseñar y desarrollar interfaces de usuario.
<br>En el desarrollo de aplicaciones, las interfaces permiten la comunicación entre diferentes componentes, incluso dentro de un framework.
<br>Frameworks como React o Angular se centran en la creación de interfaces dinámicas y reactivas para mejorar la experiencia del usuario.
]]></description><link>desarrollo-de-interfacez\frameworks-e-interfaces.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Frameworks e Interfaces.md</guid><pubDate>Fri, 28 Feb 2025 11:22:08 GMT</pubDate></item><item><title><![CDATA[Git]]></title><description><![CDATA[ 
 <br>Git es un sistema de control de versiones distribuido de código abierto creado por Linus Torvalds en 2005. Es una herramienta esencial en el desarrollo de software, permitiendo a múltiples desarrolladores trabajar de manera simultánea en un mismo proyecto sin conflictos.<br><br>Git es un proyecto de <a data-href="código libre" href="\desarrollo-de-interfacez\código-libre.html" class="internal-link" target="_self" rel="noopener nofollow">código libre</a>, lo que significa que su código fuente está disponible para todos, permitiendo su modificación y distribución. Esto lo diferencia del <a data-href="código gratuito" href="\desarrollo-de-interfacez\código-gratuito.html" class="internal-link" target="_self" rel="noopener nofollow">código gratuito</a>, que puede usarse sin costo, pero no necesariamente ofrecer acceso a su código fuente.<br><br>Git se encuentra integrado en múltiples entornos de desarrollo (<a data-href="IDE'S" href="\IDE'S" class="internal-link" target="_self" rel="noopener nofollow">IDE'S</a>), lo que facilita su uso sin necesidad de comandos manuales. Herramientas como Visual Studio Code, JetBrains IntelliJ y Eclipse incluyen soporte para Git de manera nativa.<br><br>Existen diversas plataformas que utilizan Git como base para gestionar el control de versiones, entre ellas:<br>
<br><a data-href="Git Hub - Sistema de Control de Versiones" href="\desarrollo-de-interfacez\git-hub-sistema-de-control-de-versiones.html" class="internal-link" target="_self" rel="noopener nofollow">Git Hub - Sistema de Control de Versiones</a>: Plataforma de colaboración en la nube basada en Git.
<br><a data-href="Git Lab" href="\Git Lab" class="internal-link" target="_self" rel="noopener nofollow">Git Lab</a>: Alternativa a GitHub con funcionalidades avanzadas de CI/CD y gestión de proyectos.
]]></description><link>desarrollo-de-interfacez\git.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Git.md</guid><pubDate>Fri, 28 Feb 2025 11:29:39 GMT</pubDate></item><item><title><![CDATA[Git Emoji]]></title><description><![CDATA[ 
 <br>Iniciativa para unir emojis con los <a data-href="Commit" href="\desarrollo-de-interfacez\commit.html" class="internal-link" target="_self" rel="noopener nofollow">Commit</a><br>Proporciona una forma fácil de identificarlos<br>Cada emoji representa un tipo<br><a data-tooltip-position="top" aria-label="https://gitmoji.dev/" rel="noopener nofollow" class="external-link" href="https://gitmoji.dev/" target="_blank">gitmoji | An emoji guide for your commit messages</a>]]></description><link>desarrollo-de-interfacez\git-emoji.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Git Emoji.md</guid><pubDate>Wed, 04 Oct 2023 09:19:40 GMT</pubDate></item><item><title><![CDATA[Git Hub - Sistema de Control de Versiones]]></title><description><![CDATA[ 
 <br>GitHub es una plataforma basada en la nube que permite gestionar proyectos de desarrollo de software utilizando el sistema de control de versiones Git. Facilita la colaboración entre desarrolladores y equipos, ofreciendo herramientas para administrar cambios en el código y mejorar el flujo de trabajo.<br><br>
<br>Gestión de Versiones

<br>Permite modificar un proyecto mientras se mantiene un registro detallado de cambios.


<br>Colaboración en Equipo

<br>Varios desarrolladores pueden trabajar simultáneamente en el mismo código sin conflictos.


<br>Comparación de Código

<br>Se pueden comparar versiones del código de diferentes días o etapas del desarrollo.


<br>Histórico de Cambios

<br>Registra cada modificación con detalles sobre quién, cuándo y qué cambios se realizaron.


<br>Uso del Protocolo Git

<br>Basado en <a data-href="git" href="\desarrollo-de-interfacez\git.html" class="internal-link" target="_self" rel="noopener nofollow">git</a>, permite realizar operaciones como <a data-href="commit" href="\desarrollo-de-interfacez\commit.html" class="internal-link" target="_self" rel="noopener nofollow">commit</a>, <a data-href="push" href="\desarrollo-de-interfacez\push.html" class="internal-link" target="_self" rel="noopener nofollow">push</a>, <a data-href="pull" href="\desarrollo-de-interfacez\pull.html" class="internal-link" target="_self" rel="noopener nofollow">pull</a> y <a data-href="merge" href="\desarrollo-de-interfacez\merge.html" class="internal-link" target="_self" rel="noopener nofollow">merge</a> para gestionar el código de manera eficiente.


<br><br>
<br>Control y trazabilidad del código fuente.
<br>Integración con herramientas de desarrollo como CI/CD y automatización.
<br>Seguridad y copias de seguridad en la nube.
<br>Facilita la gestión de proyectos mediante issues, pull requests y revisiones de código.
]]></description><link>desarrollo-de-interfacez\git-hub-sistema-de-control-de-versiones.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Git Hub - Sistema de Control de Versiones.md</guid><pubDate>Fri, 28 Feb 2025 11:43:28 GMT</pubDate></item><item><title><![CDATA[GitHub]]></title><description><![CDATA[ 
 <br><br>GitHub es una plataforma de desarrollo colaborativo basada en Git, que permite a los desarrolladores gestionar código, realizar seguimiento de cambios y colaborar en proyectos de software. Además, ofrece herramientas para control de versiones, integración continua y gestión de proyectos.<br><br>
<br>Control de Versiones con Git

<br>Permite administrar y realizar seguimiento de cambios en proyectos de software.


<br>Repositorios Públicos y Privados

<br>Facilita el almacenamiento de código de manera accesible y segura.


<br>Colaboración en Equipo

<br>Uso de Pull Requests y Code Reviews para revisión y mejora del código.


<br>GitHub Actions

<br>Herramienta integrada de CI/CD para automatizar pruebas y despliegues.


<br>Gestión de Proyectos

<br>Tableros, issues y wikis para organizar tareas y documentar procesos.


<br>Seguridad y Escaneo de Código

<br>Análisis de vulnerabilidades y protección del código con GitHub Dependabot.


<br><br><br><br>
<br>
Clonar un repositorio
git clone https://github.com/usuario/proyecto.git


<br>
Añadir cambios y subir al repositorio
git add .
git commit -m "Descripción del cambio"
git push origin main


<br>
Obtener cambios del repositorio remoto
git pull origin main


<br><br>
<br>Facilita la colaboración en proyectos de código abierto y privados.
<br>Integración con herramientas de automatización y CI/CD.
<br>Acceso a una gran comunidad de desarrolladores y recursos educativos.
<br>Soporte para documentación y gestión de proyectos.
]]></description><link>desarrollo-de-interfacez\github.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/GitHub.md</guid><pubDate>Sat, 01 Mar 2025 09:49:22 GMT</pubDate></item><item><title><![CDATA[GitLab]]></title><description><![CDATA[ 
 <br><br>GitLab es una plataforma de desarrollo de software basada en Git, que permite la gestión del ciclo de vida del desarrollo de aplicaciones. Ofrece herramientas para control de versiones, integración continua (CI/CD), monitoreo y seguridad, lo que la convierte en una solución completa para equipos de desarrollo.<br><br>
<br>Control de Versiones con Git

<br>Permite la gestión del código fuente y el seguimiento de cambios en un proyecto.


<br>Integración y Entrega Continua (CI/CD)

<br>Automatiza la ejecución de pruebas y despliegues para mejorar la eficiencia del desarrollo.


<br>Gestión de Proyectos

<br>Proporciona herramientas como tableros de issues, milestones y wikis para organizar el trabajo en equipo.


<br>Seguridad Integrada

<br>Incluye escaneo de vulnerabilidades, control de acceso y revisiones de código para garantizar la calidad del software.


<br>Repositorios Privados y Públicos

<br>Ofrece opciones para alojar código de manera pública o restringida según las necesidades del equipo.


<br>Implementación en la Nube o en Servidores Propios

<br>Se puede utilizar como servicio en la nube o instalar en un servidor propio para mayor control y seguridad.


<br><br><br><br>
<br>
Clonar un repositorio de GitLab
git clone https://gitlab.com/usuario/proyecto.git


<br>
Añadir cambios y subir al repositorio
git add .
git commit -m "Descripción del cambio"
git push origin main


<br>
Obtener cambios del repositorio remoto
git pull origin main


]]></description><link>desarrollo-de-interfacez\gitlab.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/GitLab.md</guid><pubDate>Sat, 01 Mar 2025 09:47:30 GMT</pubDate></item><item><title><![CDATA[Interfaz de Usuario (UI)]]></title><description><![CDATA[ 
 <br><br>La Interfaz de Usuario (UI) es el conjunto de elementos visuales y funcionales con los que un usuario interactúa para utilizar un sistema o tecnología. Su diseño busca que la experiencia sea sencilla, eficiente e intuitiva.<br><br>
<br>Simplicidad: Debe ser clara y fácil de entender para el usuario.
<br>Consistencia: Mantener patrones de diseño similares en toda la interfaz.
<br>Accesibilidad: Adaptarse a diferentes dispositivos y usuarios con distintas capacidades.
<br>Retroalimentación Visual: Informar al usuario sobre acciones realizadas mediante cambios en la interfaz.
<br>Optimización de Flujo: Reducir la cantidad de pasos para completar una tarea.
<br><br>
<br><a data-href="Interfaz Gráfica de Usuario (GUI)" href="\desarrollo-de-interfacez\interfaz-gráfica-de-usuario-(gui).html" class="internal-link" target="_self" rel="noopener nofollow">Interfaz Gráfica de Usuario (GUI)</a>: Basada en elementos visuales como botones, menús e iconos.
<br>Interfaz de Línea de Comandos (CLI): Requiere interacción mediante texto y comandos.
<br>Interfaz Táctil: Utiliza gestos táctiles para interactuar con dispositivos móviles y pantallas táctiles.
<br>Interfaz de Voz: Permite el control del sistema mediante comandos de voz.
<br><br>Un buen diseño de UI mejora la experiencia del usuario, aumentando la satisfacción y eficiencia en el uso de la tecnología. Facilita la interacción con el software y reduce la curva de aprendizaje, permitiendo un acceso más rápido a la información y funciones clave.]]></description><link>desarrollo-de-interfacez\interface-de-usuario-(ui).html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Interface de usuario (UI).md</guid><pubDate>Sat, 01 Mar 2025 10:16:56 GMT</pubDate></item><item><title><![CDATA[Interfaces avanzadas Android]]></title><description><![CDATA[ 
 <br>En el desarrollo de aplicaciones para Android, las interfaces de usuario juegan un papel fundamental para ofrecer una experiencia fluida e intuitiva. A medida que las aplicaciones evolucionan, se hace necesario implementar interfaces avanzadas que mejoren la interactividad, la eficiencia y la estética de las aplicaciones.<br><br><br>
<br>Jetpack Compose es el moderno toolkit de UI de Android basado en Kotlin.
<br>Permite construir interfaces declarativas con menos código y mayor flexibilidad.
<br>Soporta animaciones avanzadas, recomposición eficiente y mejor integración con el sistema de navegación.
<br><br>
<br>Las Custom Views permiten crear componentes de UI personalizados reutilizables.
<br>Con ViewBinding, se mejora el acceso a los elementos del layout, eliminando el uso de findViewById y reduciendo errores de referencia.
<br><br>
<br>Uso de MotionLayout para crear animaciones complejas entre vistas.
<br>Implementación de Shared Element Transitions para una navegación más fluida.
<br>Soporte de Lottie Animations para animaciones ligeras y eficientes.
<br><br>
<br>Android adopta Material You, permitiendo personalización basada en el tema del sistema.
<br>Uso de Dynamic Color para adaptar la paleta de colores según la configuración del usuario.
<br><br>
<br>Implementación de Navigation Component para gestionar la navegación entre fragmentos de manera eficiente.
<br>Uso de Bottom Navigation y Drawer Layout para estructurar interfaces de múltiples secciones.
<br><br>
<br>Soporte para dispositivos con pantallas plegables y multitarea.
<br>Uso de WindowManager API para manejar diferentes tamaños y configuraciones de pantalla.
<br><br>
<br>Lazy Loading con RecyclerView y LazyColumn en Jetpack Compose.
<br>Uso de ConstraintLayout para layouts eficientes.
<br>Evitar sobrecarga en el Main Thread, delegando procesos pesados a coroutines.
<br>Implementación de Prefetching y Caching para mejorar la carga de imágenes con Glide o Coil.
]]></description><link>desarrollo-de-interfacez\interfaces-avanzadas-android.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Interfaces avanzadas Android.md</guid><pubDate>Fri, 28 Feb 2025 11:19:09 GMT</pubDate></item><item><title><![CDATA[Interfaz Gráfica de Usuario (GUI)]]></title><description><![CDATA[ 
 <br><br>Una Interfaz Gráfica de Usuario (GUI) es el sistema de interacción entre el usuario y una aplicación a través de elementos visuales como botones, iconos, menús y ventanas. Permite a los usuarios interactuar con dispositivos y software de manera intuitiva sin necesidad de escribir comandos de texto.<br><br>
<br>Interfaz Gráfica (GUI)

<br>Incluye todos los elementos visuales con los que el usuario puede interactuar mediante el uso de pantallas y dispositivos táctiles.


<br>Interfaz de Hardware

<br>Se refiere a los dispositivos físicos que permiten la interacción con un sistema, como teclados, ratones, pantallas táctiles y mandos de control.


<br>Interfaz de Usuario de Voz (VUI)

<br>Permite la interacción mediante comandos de voz, como asistentes virtuales (Siri, Alexa, Google Assistant).


<br><br>Las interfaces gráficas desempeñan un papel crucial en la experiencia del usuario, ya que una buena interfaz es fácil de usar, intuitiva y visualmente atractiva. En cambio, una mala interfaz genera frustración y dificulta la interacción con la tecnología.<br><br>
<br>Claridad: Elementos bien organizados y fácilmente comprensibles.
<br>Consistencia: Diseño uniforme en todos los componentes de la interfaz.
<br>Accesibilidad: Adaptación para usuarios con diferentes capacidades.
<br>Eficiencia: Permite completar tareas con el menor número de pasos posible.
<br>Feedback Visual: Responde a las acciones del usuario de manera clara y comprensible.
<br><br>Tal como se menciona en <a data-href="No me hagas pensar" href="\desarrollo-de-interfacez\no-me-hagas-pensar.html" class="internal-link" target="_self" rel="noopener nofollow">No me hagas pensar</a>, el diseño de una interfaz debe ser lo más intuitivo posible. Los usuarios no deberían esforzarse en entender cómo usar una ## ]]></description><link>desarrollo-de-interfacez\interfaz-gráfica-de-usuario-(gui).html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Interfaz Gráfica de Usuario (GUI).md</guid><pubDate>Sat, 01 Mar 2025 10:43:42 GMT</pubDate></item><item><title><![CDATA[Merge en Git]]></title><description><![CDATA[ 
 <br><br>El merge en Git es una operación que permite combinar cambios de diferentes ramas en una sola. Se utiliza comúnmente para integrar modificaciones desarrolladas en una rama secundaria dentro de la rama principal (main o develop).<br><br>
<br>
Merge Fast-Forward

<br>Se produce cuando la rama de destino no ha cambiado desde la última vez que se creó la rama secundaria.
<br>Git simplemente avanza el puntero de la rama de destino al último commit de la rama fusionada.
<br>Comando:
git merge nombre_rama




<br>
Merge con Commit de Fusión

<br>Ocurre cuando la rama de destino tiene nuevos commits desde que se bifurcó la rama secundaria.
<br>Se crea un commit adicional para unir las dos historias.
<br>Comando:
git merge nombre_rama




<br>
Merge con Conflictos

<br>Se presenta cuando dos ramas han modificado las mismas líneas de un archivo y Git no puede decidir cuál versión conservar.
<br>Git marca los archivos en conflicto y requiere intervención manual para resolverlos.
<br>Pasos para solucionar un conflicto:
git status  # Ver archivos en conflicto
git add archivo_conflictivo.txt  # Después de resolver el conflicto
git commit -m "Resolviendo conflictos en archivo_conflictivo.txt"




<br><br>
<br>
Cambiar a la rama principal antes de fusionar
git checkout main

o en versiones más recientes de Git:
git switch main


<br>
Fusionar una rama secundaria con la principal
git merge nombre_rama


<br>
Ver el historial de fusiones
git log --graph --oneline --all


<br><br>
<br>Merge conserva el historial de commits de ambas ramas, lo que puede hacer que el historial sea más complejo.
<br>Rebase reescribe el historial, colocando los commits de la rama secundaria encima de la rama principal.

<br>Comando:
git rebase main


<br>Útil para mantener un historial de cambios más limpio.


]]></description><link>desarrollo-de-interfacez\merge.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/merge.md</guid><pubDate>Sat, 01 Mar 2025 09:57:05 GMT</pubDate></item><item><title><![CDATA[Merge Request en Git]]></title><description><![CDATA[ 
 <br><br>Un Merge Request (MR) es una solicitud para fusionar cambios de una rama a otra dentro de un repositorio en plataformas como <a data-href="GitLab" href="\desarrollo-de-interfacez\gitlab.html" class="internal-link" target="_self" rel="noopener nofollow">GitLab</a>. Es el equivalente a un <a data-href="Pull Request" href="\Pull Request" class="internal-link" target="_self" rel="noopener nofollow">Pull Request</a> en <a data-href="GitHub" href="\desarrollo-de-interfacez\github.html" class="internal-link" target="_self" rel="noopener nofollow">GitHub</a>, y permite la revisión del código antes de integrarlo en la rama principal del proyecto.<br><br>
<br>
Crear una Rama Nueva

<br>Se desarrolla una nueva funcionalidad en una rama basada en main o develop.

git checkout -b feature-nueva


<br>
Realizar Cambios y Confirmarlos

<br>Se agregan cambios y se registran con un commit.

git add .
git commit -m "Agregando nueva funcionalidad"


<br>
Subir la Rama al Repositorio Remoto
git push origin feature-nueva


<br>
Crear el Merge Request en GitLab

<br>Desde la plataforma de GitLab, se abre un Merge Request desde feature-nueva hacia main o develop.
<br>Se incluye una descripción detallada del cambio.


<br>
Revisión de Código

<br>Los miembros del equipo revisan los cambios y pueden aprobarlos o solicitar modificaciones.


<br>
Aprobación y Fusión de los Cambios

<br>Una vez aprobado, el Merge Request se fusiona en la rama destino.

git merge feature-nueva


<br><br>
<br>Facilita la revisión de código, reduciendo errores antes de fusionar.
<br>Fomenta la colaboración, permitiendo sugerencias y mejoras.
<br>Mantiene un historial de cambios bien documentado.
<br>Protege la rama principal, asegurando que solo se fusionen cambios revisados.
<br><br>
<br>Usar nombres de ramas descriptivos (feature-login, bugfix-navbar).
<br>Escribir mensajes de commit claros y detallados.
<br>Solicitar revisión de código a otros desarrolladores.
<br>No fusionar cambios sin aprobación.
<br>Probar los cambios antes de solicitar un Merge Request.
<br><br>]]></description><link>desarrollo-de-interfacez\merge-request.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Merge Request.md</guid><pubDate>Sat, 01 Mar 2025 10:14:48 GMT</pubDate></item><item><title><![CDATA[Mockup]]></title><description><![CDATA[ 
 <br>Un mockup es una representación visual detallada de un diseño, utilizada para previsualizar cómo se verá un producto final antes de su desarrollo o implementación. Los mockups suelen emplearse en el diseño de interfaces de usuario, productos físicos y otros entornos donde la estética y la disposición visual son fundamentales.<br><br>
<br>Alta fidelidad visual

<br>Representan colores, tipografías, imágenes y estilos finales del diseño.


<br>No suelen ser interactivos

<br>A diferencia de los prototipos, los mockups no permiten probar funcionalidades, sino visualizar la apariencia del producto.


<br>Permiten validación visual

<br>Se usan para obtener retroalimentación sobre el diseño antes del desarrollo o producción.


<br>Facilitan la comunicación

<br>Ayudan a diseñadores, desarrolladores y clientes a alinear expectativas sobre la apariencia final.


<br><br>
<br>Wireframe: Un esquema básico en blanco y negro que define la estructura del contenido y la disposición de los elementos.
<br>Mockup: Una versión más detallada que incluye colores, tipografías y gráficos, pero sin funcionalidad interactiva.
<br>Prototipo: Un modelo funcional que permite probar interacciones y navegación dentro del diseño.
<br><br>Algunas herramientas populares para la creación de mockups incluyen:<br>
<br>Figma
<br>Adobe XD
<br>Sketch
<br>Balsamiq
<br>InVision
<br><br>
<br>Permiten detectar problemas visuales antes del desarrollo.
<br>Facilitan la presentación y aprobación de diseños.
<br>Optimiza el trabajo en equipo al alinear la visión del diseño con los desarrolladores y clientes.
<br>Ahorra tiempo y costos al reducir cambios en fases avanzadas del proyecto.
]]></description><link>desarrollo-de-interfacez\mockup.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Mockup.md</guid><pubDate>Sat, 01 Mar 2025 10:44:00 GMT</pubDate></item><item><title><![CDATA[No me hagas pensar - Steve Krug]]></title><description><![CDATA[ 
 <br><br>"No me hagas pensar" es un libro escrito por Steve Krug que se ha convertido en una referencia fundamental en el diseño de experiencia de usuario (UX) y usabilidad web. Su enfoque práctico y directo explica cómo diseñar interfaces intuitivas y fáciles de usar, minimizando la carga cognitiva del usuario.<br><br>
<br>
No hagas pensar al usuario

<br>Un buen diseño debe ser tan claro y evidente que el usuario no tenga que detenerse a pensar cómo funciona.


<br>
Los usuarios escanean, no leen

<br>La mayoría de las personas no leen detenidamente el contenido de una página, sino que escanean visualmente buscando información relevante.


<br>
Diseña para la forma en que la gente usa la web

<br>Los usuarios no siguen un flujo lineal, sino que hacen clic impulsivamente en lo que les llama la atención.


<br>
Reduce la cantidad de opciones

<br>Mientras más opciones se presenten, más difícil será para el usuario tomar una decisión.


<br>
Haz obvio lo que es clickeable

<br>Los enlaces y botones deben tener un diseño claro y reconocible para que los usuarios no duden sobre dónde hacer clic.


<br>
Minimiza la fricción en formularios y procesos

<br>Solicita solo la información necesaria y diseña formularios simples y fáciles de completar.


<br><br>
<br>Diseño de interfaces simples y accesibles.
<br>Optimización de la navegación en sitios web y aplicaciones.
<br>Uso de pruebas de usabilidad para mejorar la experiencia del usuario.
<br>Priorización de la claridad sobre la creatividad excesiva.
<br><br>Este libro es una lectura esencial para diseñadores, desarrolladores y cualquier persona interesada en mejorar la usabilidad de productos digitales. Su enfoque basado en la simplicidad y la facilidad de uso ha influido en el desarrollo de interfaces modernas y amigables para los usuarios.]]></description><link>desarrollo-de-interfacez\no-me-hagas-pensar.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/No me hagas pensar.md</guid><pubDate>Sat, 01 Mar 2025 10:45:49 GMT</pubDate></item><item><title><![CDATA[PhoneGap - Cordova]]></title><description><![CDATA[ 
 <br>PhoneGap es un framework de desarrollo de aplicaciones móviles basado en tecnologías web como HTML, CSS y JavaScript. Fue creado por Nitobi y más tarde adquirido por Adobe, convirtiéndose en una de las herramientas más populares para el desarrollo de aplicaciones multiplataforma.<br>PhoneGap se basa en Apache Cordova, un proyecto de código abierto que permite a los desarrolladores crear aplicaciones que pueden ejecutarse en múltiples sistemas operativos móviles utilizando un solo código base.<br><br>
<br>Desarrollo con Tecnologías Web

<br>Utiliza HTML, CSS y JavaScript en lugar de lenguajes nativos como Java (Android) o Swift (iOS).


<br>Compatibilidad Multiplataforma

<br>Permite desarrollar una única aplicación y ejecutarla en varios sistemas operativos como iOS, Android, Windows Phone, y más.


<br>Acceso a Funcionalidades del Dispositivo

<br>Mediante plugins de Cordova, las aplicaciones pueden acceder a funcionalidades del dispositivo como la cámara, el GPS, el almacenamiento local y más.


<br>Desarrollo Rápido y Económico

<br>Reduce los costos y el tiempo de desarrollo al evitar la necesidad de crear aplicaciones separadas para cada plataforma.


<br>Integración con PhoneGap Build

<br>Servicio en la nube de Adobe que permite compilar aplicaciones sin necesidad de configurar entornos de desarrollo complejos.


<br><br>
<br>Código Único para Múltiples Plataformas
<br>Fácil integración con tecnologías web conocidas
<br>Amplia comunidad de desarrolladores y soporte
<br>Extensible mediante plugins personalizados
<br><br>
<br>Rendimiento Inferior a Aplicaciones Nativas: Al ejecutarse dentro de una WebView, puede ser más lento que las aplicaciones desarrolladas en lenguajes nativos.
<br>Limitaciones en Funcionalidades Avanzadas: No todas las APIs nativas pueden ser utilizadas de manera eficiente.
<br>Dependencia de Plugins: Algunas funcionalidades requieren plugins adicionales que pueden no estar bien optimizados.
<br><br>Con la evolución del desarrollo móvil, han surgido alternativas más modernas como:<br>
<br>Flutter (Google)
<br>React Native (Meta - Facebook)
<br>Ionic
<br>Xamarin (Microsoft)
]]></description><link>desarrollo-de-interfacez\phonegap-cordova.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/PhoneGap - Cordova.md</guid><pubDate>Fri, 28 Feb 2025 10:33:31 GMT</pubDate></item><item><title><![CDATA[¿Qué es un Prototipo?]]></title><description><![CDATA[ 
 <br><br>Un prototipo es una representación preliminar de un producto o sistema que permite evaluar su funcionamiento, diseño y usabilidad antes de su desarrollo final. Se utiliza en diversas disciplinas, como el diseño de software, la ingeniería y la fabricación, para probar ideas y realizar mejoras antes de la producción final.<br><br>
<br>Representación inicial: No es el producto final, sino un modelo que simula su funcionamiento.
<br>Iterativo: Se puede modificar y mejorar en base a pruebas y retroalimentación.
<br>Funcionalidad variable: Puede ser un simple esquema (baja fidelidad) o una versión casi completa (alta fidelidad).
<br>Facilita la comunicación: Ayuda a transmitir ideas entre diseñadores, desarrolladores y clientes.
<br><br>
<br>
Prototipos de Baja Fidelidad

<br>Son representaciones simples, como bocetos en papel o wireframes digitales.
<br>Se enfocan en la estructura y flujo de la interfaz sin detalles visuales complejos.


<br>
Prototipos de Alta Fidelidad

<br>Son versiones más detalladas y realistas del producto.
<br>Pueden incluir interacciones, colores y tipografías finales.


<br>
Prototipos Funcionales

<br>Son versiones preliminares que ya incluyen parte del desarrollo real.
<br>Se usan para evaluar la usabilidad y el rendimiento antes del lanzamiento oficial.


<br><br>
<br>Permite validar ideas antes de la producción final.
<br>Reduce costos y tiempos de desarrollo al detectar errores antes de construir el producto completo.
<br>Facilita la iteración y la mejora continua en el diseño.
<br>Mejora la comunicación entre equipos de diseño, desarrollo y negocio.
<br><br>Algunas herramientas populares para el desarrollo de prototipos en diseño digital incluyen:<br>
<br>Figma
<br>Adobe XD
<br>Sketch
<br>Axure RP
<br>InVision
<br>Ejemplo, sistema bibliotecario creado por mi y mi compañero Ruben:<br><a rel="noopener nofollow" class="external-link" href="https://www.figma.com/design/Whpr9UMacRP7UOy9pe7rUM/Figma-basics?node-id=1669-162202&amp;t=695T9VhfbbDBkTtY-1" target="_blank">https://www.figma.com/design/Whpr9UMacRP7UOy9pe7rUM/Figma-basics?node-id=1669-162202&amp;t=695T9VhfbbDBkTtY-1</a>]]></description><link>desarrollo-de-interfacez\prototipo.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Prototipo.md</guid><pubDate>Fri, 28 Feb 2025 10:27:45 GMT</pubDate></item><item><title><![CDATA[Git Pull]]></title><description><![CDATA[ 
 <br><br>El comando git pull en Git se utiliza para obtener cambios desde un repositorio remoto y fusionarlos automáticamente con la rama local. Es una combinación de dos comandos:<br>
<br>git fetch: Descarga los cambios del repositorio remoto sin aplicarlos a la rama local.
<br>git merge: Fusiona los cambios descargados en la rama local.
<br><br>git pull &lt;remoto&gt; &lt;rama&gt;
<br>Por defecto, si se omiten los parámetros, Git intentará hacer pull desde la rama origin/main o la configurada previamente.<br><br>git pull origin main
<br>Este comando obtiene los cambios de la rama main en el repositorio remoto origin y los fusiona con la versión local.<br><br>
<br>
git pull --rebase

<br>En lugar de hacer un merge, aplica un rebase sobre los cambios remotos.

git pull --rebase origin main


<br>Esto ayuda a mantener un historial de commits más limpio y lineal.


<br>
git pull --no-commit

<br>Descarga y fusiona los cambios sin hacer un commit automático.

git pull --no-commit origin main


<br>Útil para revisar los cambios antes de confirmar la fusión.


<br>
git pull --no-ff

<br>Realiza un merge sin avance rápido, forzando la creación de un commit de fusión.

git pull --no-ff origin main


<br>Esto ayuda a preservar el historial de cambios de manera más estructurada.


<br><br><br><br>Cuando se realiza un git pull, pueden surgir conflictos si hay cambios en la rama local que entran en conflicto con los cambios remotos. Para resolverlos:<br>
<br>
<a data-href="Git" href="\desarrollo-de-interfacez\git.html" class="internal-link" target="_self" rel="noopener nofollow">Git</a> indicará los archivos en conflicto.

<br>
Editar los archivos manualmente y resolver las diferencias.

<br>
Agregar los cambios resueltos con:
git add archivo_conflictivo.txt


<br>
Completar la fusión con:
git commit -m "Resolviendo conflicto en archivo_conflictivo.txt"


]]></description><link>desarrollo-de-interfacez\pull.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/pull.md</guid><pubDate>Sat, 01 Mar 2025 10:00:46 GMT</pubDate></item><item><title><![CDATA[Pull Request en Git]]></title><description><![CDATA[ 
 <br><br>Un Pull Request (PR) es una solicitud para fusionar cambios de una rama a otra dentro de un repositorio en plataformas como <a data-href="GitHub" href="\desarrollo-de-interfacez\github.html" class="internal-link" target="_self" rel="noopener nofollow">GitHub</a>, <a data-href="GitLab" href="\desarrollo-de-interfacez\gitlab.html" class="internal-link" target="_self" rel="noopener nofollow">GitLab</a> o Bitbucket. Es una herramienta esencial en el desarrollo colaborativo que permite la revisión de código antes de su integración en la rama principal.<br><br>
<br>
Crear una Rama Nueva

<br>Se trabaja en una nueva rama basada en main o develop.

git checkout -b feature-nueva


<br>
Realizar Cambios y Confirmarlos

<br>Se agregan cambios y se registran con un commit.

git add .
git commit -m "Agregando nueva funcionalidad"


<br>
Subir la Rama al Repositorio Remoto
git push origin feature-nueva


<br>
Crear el Pull Request

<br>Desde la plataforma de Git (GitHub/GitLab), se abre un PR desde feature-nueva hacia main.
<br>Se agrega una descripción clara del cambio.


<br>
Revisión de Código

<br>Los colaboradores revisan el código y pueden aprobarlo o sugerir cambios.


<br>
Fusionar los Cambios

<br>Si todo está correcto, el PR se aprueba y se fusiona en main.

git merge feature-nueva


<br><br>
<br>Facilita la revisión de código, reduciendo errores antes de la fusión.
<br>Promueve el trabajo en equipo, permitiendo comentarios y sugerencias.
<br>Mejora la trazabilidad, dejando un historial de cambios documentado.
<br>Evita problemas en la rama principal, asegurando la estabilidad del código.
<br><br>
<br>Usar nombres de ramas descriptivos (feature-login, bugfix-navbar).
<br>Escribir mensajes de commit claros y concisos.
<br>Solicitar revisión de código a otros colaboradores.
<br>No fusionar cambios sin aprobación.
<br>Probar los cambios antes de solicitar un PR.
<br><br>]]></description><link>desarrollo-de-interfacez\pull-requests.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Pull Requests.md</guid><pubDate>Sat, 01 Mar 2025 10:13:52 GMT</pubDate></item><item><title><![CDATA[Git Push]]></title><description><![CDATA[ 
 <br><br>El comando git push en Git se utiliza para enviar los cambios de un repositorio local a un repositorio remoto. Es una operación fundamental para compartir código con otros desarrolladores y mantener actualizado el código en plataformas como GitHub, GitLab o Bitbucket.<br><br>git push &lt;remoto&gt; &lt;rama&gt;
<br>Si se omiten los parámetros, Git intentará hacer push a la rama predeterminada configurada en el repositorio remoto.<br><br>git push origin main
<br>Este comando envía los cambios de la rama main al repositorio remoto origin.<br><br>
<br>
git push --force (Forzar el Push)

<br>Sobrescribe la versión remota con la local, incluso si hay cambios en el servidor.

git push --force origin main


<br>Precaución: Puede eliminar cambios remotos irreversiblemente.


<br>
git push --set-upstream (Configurar Rama Remota por Primera Vez)

<br>Establece una rama de seguimiento para futuras actualizaciones.

git push --set-upstream origin feature-branch


<br>Luego, se puede hacer git push sin especificar la rama.


<br>
git push --tags (Enviar Etiquetas al Repositorio Remoto)

<br>Envia todas las etiquetas (tags) creadas localmente.

git push --tags


<br><br><br><br>
<br>
Error: "Rejected - non-fast-forward"

<br>Ocurre cuando hay cambios en la rama remota que no están en la local.
<br>Solución:
git pull --rebase origin main
git push origin main




<br>
Autenticación Requerida

<br>Git puede solicitar credenciales al hacer un push.
<br>Se recomienda configurar SSH Keys o usar Git Credential Manager.


]]></description><link>desarrollo-de-interfacez\push.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/push.md</guid><pubDate>Sat, 01 Mar 2025 09:59:51 GMT</pubDate></item><item><title><![CDATA[Ramas en Git]]></title><description><![CDATA[ 
 <br><br>Las ramas en <a data-href="Git" href="\desarrollo-de-interfacez\git.html" class="internal-link" target="_self" rel="noopener nofollow">Git</a> son líneas separadas de desarrollo que permiten trabajar en nuevas funcionalidades, correcciones de errores o versiones experimentales sin afectar la rama principal del proyecto. Son fundamentales para mantener un flujo de trabajo organizado y colaborativo.<br><br>Cuando trabajas en un proyecto, puedes crear una rama a partir de la versión actual de tu <a data-href="Repositorio Servidor" href="\desarrollo-de-interfacez\repositorio-servidor.html" class="internal-link" target="_self" rel="noopener nofollow">Repositorio Servidor</a>, lo que te permite desarrollar nuevas características sin alterar la rama principal. Una vez que la nueva funcionalidad está lista, la rama puede fusionarse de nuevo con la rama principal.<br><br>
<br>
Crear una nueva rama
git branch nombre_rama


<br>
Cambiar a una rama específica
git checkout nombre_rama

o en versiones más recientes de Git:
git switch nombre_rama


<br>
Listar todas las ramas
git branch


<br>
Fusionar una rama con la rama principal
git checkout main
git merge nombre_rama


<br>
Eliminar una rama después de fusionarla
git branch -d nombre_rama


<br><br>
<br>Rama Principal (main o master)

<br>Contiene la versión estable del código.


<br>Ramas de Funcionalidad (feature)

<br>Usadas para desarrollar nuevas características.


<br>Ramas de Corrección de Errores (hotfix)

<br>Para solucionar errores críticos en producción.


<br>Ramas de Desarrollo (develop)

<br>Se usa como base para integrar nuevas funcionalidades antes de pasar a producción.


<br><br>
<br>Permite el desarrollo paralelo sin afectar la rama principal.
<br>Facilita la colaboración en equipos.
<br>Ayuda a probar cambios antes de fusionarlos con el código estable.
<br>Mantiene un historial de cambios ordenado y comprensible.
]]></description><link>desarrollo-de-interfacez\ramas.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Ramas.md</guid><pubDate>Sat, 01 Mar 2025 10:46:25 GMT</pubDate></item><item><title><![CDATA[Realidad Virtual Aumentada]]></title><description><![CDATA[ 
 <br>La Realidad Virtual (VR) y la Realidad Aumentada (AR) son tecnologías que han revolucionado la manera en que interactuamos con el mundo digital. Ambas permiten experiencias inmersivas y enriquecidas, aplicándose en diversos sectores como entretenimiento, educación, medicina e industria. La programación en estos entornos requiere herramientas especializadas y enfoques distintos según la plataforma de desarrollo.<br><br>
<br>Realidad Virtual (VR): Crea un entorno completamente digital en el que el usuario puede interactuar mediante dispositivos como cascos VR (Oculus, HTC Vive, PlayStation VR).
<br>Realidad Aumentada (AR): Superpone elementos digitales en el mundo real, permitiendo interactuar con ellos a través de dispositivos como smartphones, tablets o gafas inteligentes (HoloLens, ARKit, ARCore).
<br><br><br>
<br>Unity: Soporta VR y AR con paquetes como AR Foundation y plugins de Oculus o SteamVR.
<br>Unreal Engine: Ideal para VR de alto rendimiento, utilizado en videojuegos y simulaciones avanzadas.
<br><br>
<br>Oculus SDK: Desarrollo para dispositivos Meta Quest y Rift.
<br>SteamVR SDK: Compatible con varios dispositivos de VR.
<br>OpenXR: Estándar abierto para desarrollo de VR/AR.
<br><br>
<br>ARKit (Apple): Plataforma de desarrollo para iOS con capacidades avanzadas de tracking.
<br>ARCore (Google): Compatible con dispositivos Android para experiencias de AR.
<br>Vuforia: Framework independiente para AR en múltiples plataformas.
<br><br>
<br>C#: Principalmente usado en Unity para lógica y control de eventos.
<br>C++: Utilizado en Unreal Engine para optimización y rendimiento.
<br>Java/Kotlin: Para desarrollo de AR en Android con ARCore.
<br>Swift: Para desarrollo de AR en iOS con ARKit.
<br><br>
<br>Videojuegos y Entretenimiento

<br>Desarrollo de mundos inmersivos y experiencias interactivas.


<br>Educación y Entrenamiento

<br>Simulaciones médicas, entrenamientos empresariales y aprendizaje interactivo.


<br>E-Commerce y Marketing

<br>Experiencias de prueba virtual para productos (muebles, ropa, accesorios).


<br>Medicina y Salud

<br>Cirugías asistidas por AR y terapias de rehabilitación con VR.


<br><br>
<br>Optimización del Rendimiento: La renderización en tiempo real requiere hardware potente y optimización eficiente.
<br>Interfaz y Experiencia de Usuario (UX): Diseño intuitivo para una inmersión cómoda.
<br>Compatibilidad de Dispositivos: Diferencias entre plataformas pueden generar desafíos de integración.
]]></description><link>desarrollo-de-interfacez\realidad-virtual-aumentada.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Realidad Virtual Aumentada.md</guid><pubDate>Fri, 28 Feb 2025 11:24:06 GMT</pubDate></item><item><title><![CDATA[Rebase en Git]]></title><description><![CDATA[ 
 <br><br>El rebase en Git es una operación que permite reescribir la historia de una rama al aplicar sus cambios sobre otra rama base. Se usa principalmente para mantener un historial de commits más limpio y evitar merges innecesarios.<br><br><br>Mientras que merge combina las ramas manteniendo los <a data-href="commit" href="\desarrollo-de-interfacez\commit.html" class="internal-link" target="_self" rel="noopener nofollow">commit</a>s originales, rebase reubica los commits de una rama sobre otra, eliminando bifurcaciones en la historia del proyecto.<br><br>
<br>
Cambiar a la rama que se desea actualizar
git checkout feature-rama

o en versiones recientes de Git:
git switch feature-rama


<br>
Rebasar los cambios sobre la rama principal
git rebase main


<br>
Resolver conflictos (si existen)

<br>Git detendrá el proceso de rebase en caso de conflictos.
<br>Editar los archivos en conflicto y luego ejecutar:
git add archivo_conflictivo.txt
git rebase --continue


<br>Para cancelar el rebase en curso:
git rebase --abort




<br><br>Para editar el historial de commits antes de aplicar el rebase:<br>git rebase -i HEAD~n  # Donde 'n' es el número de commits a modificar
<br>Esto permite modificar, fusionar o eliminar commits antes de aplicar el rebase.<br><br>
<br>No hacer rebase en ramas compartidas: Puede generar problemas si otros colaboradores ya han utilizado la rama.
<br>Úsalo en ramas locales antes de hacer <a data-href="push" href="\desarrollo-de-interfacez\push.html" class="internal-link" target="_self" rel="noopener nofollow">push</a>: Ayuda a limpiar el historial de commits antes de compartirlos.
<br>Rebase vs <a data-href="Merge" href="\desarrollo-de-interfacez\merge.html" class="internal-link" target="_self" rel="noopener nofollow">Merge</a>: Si se desea un historial más limpio y lineal, rebase es la mejor opción. Para conservar la historia completa, merge es más recomendable.
]]></description><link>desarrollo-de-interfacez\rebase.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/rebase.md</guid><pubDate>Sat, 01 Mar 2025 09:58:05 GMT</pubDate></item><item><title><![CDATA[Repositorio Local]]></title><description><![CDATA[ 
 <br><br>Un repositorio local en Git es una versión del proyecto almacenada en la computadora del usuario. Permite realizar cambios en el código, gestionar versiones y trabajar sin conexión a un servidor remoto. Una vez que se han realizado modificaciones y validado los cambios, estos pueden enviarse a un repositorio servidor para sincronización con otros colaboradores.<br><br>
<br>Almacenamiento en la Computadora del Usuario

<br>No requiere conexión a Internet para realizar cambios y gestionar versiones.


<br>Historial de Cambios

<br>Permite registrar y consultar todas las modificaciones realizadas en el código.


<br>Trabajo Independiente

<br>Se puede desarrollar, probar y validar el código antes de compartirlo con un equipo.


<br>Sincronización con un Repositorio Remoto

<br>Se pueden enviar (push) y recibir (pull) cambios desde un servidor remoto como GitHub o GitLab.


<br><br>
<br>
Inicializar un Repositorio Local
git init

Este comando convierte un directorio en un repositorio Git.

<br>
Agregar Archivos al Área de Preparación
git add archivo.txt

O para agregar todos los archivos:
git add .


<br>
Confirmar los Cambios (Commit)
git commit -m "Mensaje descriptivo del cambio"

Guarda los cambios en el historial del repositorio local.

<br>
Ver el Estado del Repositorio
git status

Muestra los archivos modificados y pendientes de confirmación.

<br>
Ver el Historial de Cambios
git log

Permite consultar los commits realizados en el repositorio local.

<br>
Sincronizar con un Repositorio Remoto Asociar un repositorio remoto y subir cambios:
git remote add origin https://github.com/usuario/proyecto.git
git push -u origin main


<br><br>]]></description><link>desarrollo-de-interfacez\repositiorio-local.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Repositiorio Local.md</guid><pubDate>Sat, 01 Mar 2025 09:51:13 GMT</pubDate></item><item><title><![CDATA[Repositorio Servidor]]></title><description><![CDATA[ 
 <br><br>Un repositorio servidor es la versión del proyecto alojada en un servidor centralizado o en la nube, permitiendo la gestión y control de versiones de manera colaborativa. Este tipo de repositorio facilita el acceso a los archivos del proyecto desde múltiples ubicaciones y permite que varios desarrolladores trabajen en paralelo.<br><br>
<br>Accesibilidad Remota: Se puede acceder desde cualquier ubicación con conexión a Internet.
<br>Control de Versiones: Permite registrar cambios y mantener un historial de modificaciones.
<br>Colaboración en Equipo: Varios usuarios pueden contribuir al mismo proyecto simultáneamente.
<br>Seguridad y Respaldo: Al estar alojado en un servidor, ofrece copias de seguridad automáticas y medidas de seguridad avanzadas.
<br>Sincronización con Repositorios Locales: Los desarrolladores pueden clonar el repositorio en sus computadoras y luego subir cambios al servidor.
<br><br>
<br><a data-href="GitHub" href="\desarrollo-de-interfacez\github.html" class="internal-link" target="_self" rel="noopener nofollow">GitHub</a>: Plataforma de alojamiento de código basada en Git.
<br><a data-href="GitLab" href="\desarrollo-de-interfacez\gitlab.html" class="internal-link" target="_self" rel="noopener nofollow">GitLab</a>: Alternativa a GitHub con funciones avanzadas de CI/CD.
<br>Bitbucket: Solución de Atlassian para proyectos privados y empresariales.
<br>Apache Subversion (SVN): Sistema de control de versiones centralizado.
<br><br>
<br>
Clonar un Repositorio
git clone https://servidor.com/repositorio.git


<br>
Subir Cambios al Repositorio Servidor
git add .
git commit -m "Descripción del cambio"
git push origin main


<br>
Actualizar el Proyecto con Cambios del Servidor
git pull origin main


]]></description><link>desarrollo-de-interfacez\repositorio-servidor.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Repositorio Servidor.md</guid><pubDate>Sat, 01 Mar 2025 09:47:02 GMT</pubDate></item><item><title><![CDATA[Testing]]></title><description><![CDATA[ 
 <br>El testing en desarrollo de software es el proceso de evaluación de un sistema o componente para identificar defectos, garantizar su correcto funcionamiento y mejorar su calidad. Su objetivo principal es verificar que el software cumpla con los requisitos definidos y minimizar errores antes de su implementación en producción.<br><br>
<br>Garantiza la calidad del software.
<br>Previene errores y fallos en producción.
<br>Mejora la experiencia del usuario.
<br>Reduce costos al detectar fallos en etapas tempranas.
<br>Facilita el mantenimiento y evolución del software.
<br><br><br>
<br><a data-href="Testing Unitario" href="\desarrollo-de-interfacez\testnotas\testing-unitario.html" class="internal-link" target="_self" rel="noopener nofollow">Testing Unitario</a> Evalúa componentes individuales del software de forma aislada.
<br><a data-href="Testing de Integración" href="\desarrollo-de-interfacez\testnotas\testing-de-integración.html" class="internal-link" target="_self" rel="noopener nofollow">Testing de Integración</a>: Verifica la correcta interacción entre módulos o sistemas.
<br><a data-href="Testing de Sistema" href="\desarrollo-de-interfacez\testnotas\testing-de-sistema.html" class="internal-link" target="_self" rel="noopener nofollow">Testing de Sistema</a>: Evalúa el software como un todo para verificar su funcionalidad completa.
<br><a data-href="Testing de Aceptación" href="\desarrollo-de-interfacez\testnotas\testing-de-aceptación.html" class="internal-link" target="_self" rel="noopener nofollow">Testing de Aceptación</a>: Confirma si el software cumple con los requisitos y expectativas del usuario.
<br><br>
<br><a data-href="Testing Manual" href="\desarrollo-de-interfacez\testnotas\testing-manual.html" class="internal-link" target="_self" rel="noopener nofollow">Testing Manual</a>: Realizado por testers sin herramientas automatizadas.
<br><a data-href="Testing Automatizado" href="\desarrollo-de-interfacez\testnotas\testing-automatizado.html" class="internal-link" target="_self" rel="noopener nofollow">Testing Automatizado</a>: Se ejecuta mediante scripts y herramientas de automatización.
<br><br>
<br><a data-href="Testing de Caja Blanca" href="\desarrollo-de-interfacez\testnotas\testing-de-caja-blanca.html" class="internal-link" target="_self" rel="noopener nofollow">Testing de Caja Blanca</a>: Se basa en el conocimiento del código fuente.
<br><a data-href="Testing de Caja Negra" href="\desarrollo-de-interfacez\testnotas\testing-de-caja-negra.html" class="internal-link" target="_self" rel="noopener nofollow">Testing de Caja Negra</a>: Se enfoca en la funcionalidad sin conocer la implementación interna.
<br><a data-href="Testing de Caja Gris" href="\desarrollo-de-interfacez\testnotas\testing-de-caja-gris.html" class="internal-link" target="_self" rel="noopener nofollow">Testing de Caja Gris</a>: Combinación de caja blanca y negra para un análisis más profundo.
<br><br>
<br><a data-href="Testing de Rendimiento" href="\desarrollo-de-interfacez\testnotas\testing-de-rendimiento.html" class="internal-link" target="_self" rel="noopener nofollow">Testing de Rendimiento</a>: Mide la velocidad, estabilidad y eficiencia del sistema.
<br><a data-href="Testing de Seguridad" href="\desarrollo-de-interfacez\testnotas\testing-de-seguridad.html" class="internal-link" target="_self" rel="noopener nofollow">Testing de Seguridad</a>: Evalúa vulnerabilidades y riesgos en el software.
<br><a data-href="Testing de Usabilidad" href="\desarrollo-de-interfacez\testnotas\testing-de-usabilidad.html" class="internal-link" target="_self" rel="noopener nofollow">Testing de Usabilidad</a>: Se centra en la experiencia del usuario y accesibilidad.
<br><a data-href="Testing de Compatibilidad" href="\desarrollo-de-interfacez\testnotas\testing-de-compatibilidad.html" class="internal-link" target="_self" rel="noopener nofollow">Testing de Compatibilidad</a>: Comprueba el funcionamiento en diferentes dispositivos y entornos.
<br><a data-href="Testing de Regresión" href="\desarrollo-de-interfacez\testnotas\testing-de-regresión.html" class="internal-link" target="_self" rel="noopener nofollow">Testing de Regresión</a>: Asegura que nuevas modificaciones no afecten funcionalidades previas.
<br><br>Algunas herramientas utilizadas en testing incluyen:<br>
<br>JUnit, TestNG (Testing unitario en Java).
<br>Selenium, Cypress (Testing automatizado de interfaz).
<br>JMeter, LoadRunner (Testing de rendimiento).
<br>Postman, SoapUI (Testing de APIs).
]]></description><link>desarrollo-de-interfacez\testing.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Testing.md</guid><pubDate>Sat, 01 Mar 2025 12:20:21 GMT</pubDate></item><item><title><![CDATA[Usabilidad ISO]]></title><description><![CDATA[ 
 <br>La usabilidad, según la norma ISO 9241-11, se define como "el grado en que un producto puede ser utilizado por usuarios específicos para alcanzar objetivos específicos con eficacia, eficiencia y satisfacción en un contexto de uso determinado".<br><br>
<br>Eficacia

<br>Capacidad del sistema para permitir a los usuarios lograr sus objetivos con precisión y completitud.


<br>Eficiencia

<br>Relación entre el esfuerzo utilizado (tiempo, recursos) y el grado de cumplimiento de los objetivos.


<br>Satisfacción

<br>Nivel de comodidad y aceptabilidad experimentado por el usuario al interactuar con el sistema.


<br><br>Según la norma ISO, la usabilidad depende de los siguientes factores:<br>
<br>Características del usuario: Experiencia, conocimientos previos, necesidades y capacidades cognitivas.
<br>Tareas: Complejidad y flujo de actividades requeridas para cumplir un objetivo.
<br>Entorno de uso: Condiciones físicas, tecnológicas y organizativas en las que se utiliza el producto.
<br><br>Para medir la usabilidad de un producto o sistema, se emplean distintas técnicas:<br>
<br>Pruebas con usuarios: Observación de cómo interactúan los usuarios con el sistema.
<br>Cuestionarios y encuestas: Evaluación subjetiva de la satisfacción del usuario.
<br>Métricas de rendimiento: Tiempo de ejecución de tareas, tasa de error, tasa de éxito.
<br><br>
<br>Mejora la experiencia del usuario, aumentando la adopción y la fidelización.
<br>Reduce costos de soporte y capacitación, al hacer que los sistemas sean intuitivos y fáciles de usar.
<br>Optimiza la productividad, ya que los usuarios completan tareas de manera más eficiente.
<br>Minimiza errores y frustraciones, mejorando la accesibilidad y la inclusión.
]]></description><link>desarrollo-de-interfacez\usabilidad-iso.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Usabilidad ISO.md</guid><pubDate>Fri, 28 Feb 2025 10:29:35 GMT</pubDate></item><item><title><![CDATA[Usabilidad y accesibilidad]]></title><description><![CDATA[ 
 <br>Facilidad de uso de un producto<br>Esfuerzo del usaurio en conocer como interactuar <br>Empleo de metaforas para facilitar uso<br><br>
<br>Fleiblidad de uso
<br>Flexibilidad
<br>Facilidad de uso
<br>Robutes que si tiene un fallo que no quede en blanco
]]></description><link>desarrollo-de-interfacez\usabilidad-y-accesibilidad.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Usabilidad y accesibilidad.md</guid><pubDate>Thu, 13 Feb 2025 11:00:08 GMT</pubDate></item><item><title><![CDATA[Wireframes]]></title><description><![CDATA[ 
 <br> Un wireframe es un esquema visual o bosquejo básico de una interfaz de usuario. Se utiliza en la fase inicial del diseño de productos digitales, como sitios web y aplicaciones, para estructurar los elementos sin enfocarse en detalles visuales.<br><br>
<br>Esquemático y simple: Representa la disposición de los elementos sin distracciones visuales como colores o imágenes.
<br>Foco en la funcionalidad: Muestra cómo se organizará la información y cómo navegará el usuario.
<br>Facilita la iteración rápida: Permite cambios rápidos en la estructura antes de entrar en el diseño final.
<br>Puede ser de baja o alta fidelidad:

<br>Baja fidelidad: Dibujos simples en papel o herramientas básicas.
<br>Alta fidelidad: Más detallados, con ciertos elementos interactivos.


<br><br>
<br>Ayuda a definir la jerarquía visual y el flujo de navegación.
<br>Facilita la comunicación entre diseñadores, desarrolladores y clientes.
<br>Ahorra tiempo y recursos al identificar problemas de usabilidad temprano.
<br><br>Algunas herramientas populares para diseñar wireframes son:<br>
<br>Figma
<br>Adobe XD
<br>Balsamiq
<br>Sketch
]]></description><link>desarrollo-de-interfacez\wireframes.html</link><guid isPermaLink="false">DESARROLLO-DE-INTERFACEZ/Wireframes.md</guid><pubDate>Fri, 28 Feb 2025 10:22:48 GMT</pubDate></item><item><title><![CDATA[Comandos de Contenedores]]></title><description><![CDATA[ 
 <br>Listado y funcionamiento de comandos:<br>
<br>docker create (opcional) --name &lt; nombre del contenedor&gt; &lt; imagen que usemos&gt; : crea un contenedor junto a una imagen que usemos. Este devuelve un id para poder ejecutar nuestro contenedor.
<br>docker container create &lt; imagen que usaremos&gt; otra manera de crear un contenedor
<br>docker start &lt; id del container || nombre del contenodr&gt;: iniciamos nuestro contenedor y devuelve el id de nuestro container.
<br>docker ps: devuelve todos los contenedores que esten ejecutandose
<br>docker stop &lt; id de container&gt;: detiene ese contenedor mas no elimina
<br>docker ps -a : devuelve todos los contenedores ya esten activos o no
<br>docker rm &lt; nombre del container&gt;: cuando listas los cotnendosres estos tienen un nombre debes colocarlo para poder elimarlo.
<br>docker create -p&lt; puerto de nuestra maquina fisica que queramos usar&gt; : (importante hay doble punto en el comanod) &lt; puerto interno que usar docker &gt; ... : crea un contenedor en el puerto especifico que nosotros queramos y elegimos el puerto del docker tambien, esto es llamado como <a data-href="Port Mapping" href="\dockercurso\port-mapping.html" class="internal-link" target="_self" rel="noopener nofollow">Port Mapping</a>
<br>docker  logs &lt; nombre de contenedor&gt;: este mostrar todos los logs que tenga ese contenedor
<br>docker logs --follow &lt; nombre contenedor&gt;: este sigue esperando y no permite escribir mas logs sino que queda a la espera de mas logs para salir se usa ctrl + c
<br>docker run &lt; nombre de imagen&gt; : Este es una combinacion de varios <a data-href="Comandos de imagenes" href="\dockercurso\comandos-de-imagenes.html" class="internal-link" target="_self" rel="noopener nofollow">Comandos de imagenes</a> y comandos de contendores:

<br>Si no encuentra la imagen la descarga
<br>Crea un contenedor
<br>Inicia contenedor
<br>Inicia el comando docker logs --follow
<br>Si salimos del comando tambien se detiene la ejecucion del contenedor


<br>docker run -d &lt; nombre de imagen&gt;: hace lo mismo que lo anterior pero sin logs y ni detener la ejecucion del contenedor. Esto se llama modo destapach por eso es "-d".
<br>docker run --name &lt; nombre de contenedor&gt; -p&lt; puerto fisico o virtula nuestro &gt; : &lt; puerto interno de docker&gt; -d (opcional) &lt; nombre de imagen que queremos usar&gt;: Este ejecuta lo mismo que run -d pero con <a data-href="Port Mapping" href="\dockercurso\port-mapping.html" class="internal-link" target="_self" rel="noopener nofollow">Port Mapping</a> y diciendole el nombre que nos interesa.
<br>
]]></description><link>dockercurso\comandos-de-contenedores.html</link><guid isPermaLink="false">DockerCurso/Comandos de Contenedores.md</guid><pubDate>Fri, 29 Mar 2024 18:48:58 GMT</pubDate></item><item><title><![CDATA[Comandos de imagenes]]></title><description><![CDATA[ 
 <br>Listado y descrpcion de comandos:<br>
<br>docker images: lista todas las imágenes
<br>docker pull &lt; aplicacion que queremos&gt; : &lt; version que queramos&gt;: por defecto coloca la ultima version
<br>docker image rm node:&lt; version que queramos elmininar&gt; : para ilimnar una imagen
<br>docker build -t &lt; nombre de aplicacion&gt;: numero que queramos&gt;  &lt; ruta de nuestro proyecto &gt;: sirve para conteruir una aplcacion con la lista de comandos que nosotros allamos hecho de <a data-href="Conectar un contenedor a nuestra app" href="\dockercurso\conectar-un-contenedor-a-nuestra-app.html" class="internal-link" target="_self" rel="noopener nofollow">Conectar un contenedor a nuestra app</a>. Crea una imagen de nuestro proyecto
<br>
<br>Existen imagenes que necesitan <a data-href="variables de configuracion" href="\variables de configuracion" class="internal-link" target="_self" rel="noopener nofollow">variables de configuracion</a> para poder funcionar las imagenes<br>
<br>docker create --name mysqls -p 27070:27070 -e MYSQL_PASSWORD=simanadulto1J -e MYSQL_USER=javi mysql este es un ejemplo que usa variables de configuracion el parametro -e es para decirle a docker que es un variable 
]]></description><link>dockercurso\comandos-de-imagenes.html</link><guid isPermaLink="false">DockerCurso/Comandos de imagenes.md</guid><pubDate>Fri, 29 Mar 2024 18:49:24 GMT</pubDate></item><item><title><![CDATA[Conectar un contenedor a nuestra app]]></title><description><![CDATA[ 
 <br>Debemos crear una carpeta que si o si se debe llamar DockerFile<br>debemos decir de que tipo es una image:<br>
<br>From &lt; tipo de aplicacion &gt;: node , python ,etc. Seguido de : podemos indicar la version que este disponible docker hub.
<br>RUN mkdir -p /home/app: es una ruta de nuestro contenedor y podremos indicar que es el home o index de nuestra aplicacion
<br>COPY . /home/app es desde donde estamos copiamos en la ruta home hasta app  con eso podemos copiar el directorio de nuestro programa 
<br>EXPOSE &lt; puerto del contendor&gt;: se expone un puerto del contendor que puede ejecutarse para poder usarlo
<br>comadon para ejcutar nuestro servicio: puede ser python y el nombre del apalcaicion y ruta o node si es de node y de otra dependiendo de que tecnologia sea se usara una o otra.
<br>CMD ["node","/home/app/index.js"] este es un ejemplo
<br>Podemos usar cualquier comando de linux]]></description><link>dockercurso\conectar-un-contenedor-a-nuestra-app.html</link><guid isPermaLink="false">DockerCurso/Conectar un contenedor a nuestra app.md</guid><pubDate>Fri, 29 Mar 2024 17:54:48 GMT</pubDate></item><item><title><![CDATA[Contenedores]]></title><description><![CDATA[ 
 ]]></description><link>dockercurso\contenedores.html</link><guid isPermaLink="false">DockerCurso/Contenedores.md</guid><pubDate>Sat, 23 Mar 2024 21:37:14 GMT</pubDate></item><item><title><![CDATA[Docker Compose]]></title><description><![CDATA[ 
 <br>es un archivo .yml que contiene la configuracion de neustro contenedores:<br>Primero le decimos la version de nuestro docker:<br>version: "x.x"<br>se puede colocar cualquiera ya sea la uno mas basica la 2 un poco mas nueva y la 3 que contiene caracteristicas mas avznadas<br>seguido de esto debemos decirle que contenedores son los que queremos usar:<br>version: "3.9"
services:
  granja:
  mysqlss:
<br>Dentro services se menciona dentro de cada contenedor tenemos difrentes configuraciones:<br>
<br>build: para decirle donde esta el archivo dockerfile de nuestro proyecto generalmente es "." para decirle que esta en la misma ruta
<br>ports: puertos que queramos usar. <a data-href="Port Mapping" href="\dockercurso\port-mapping.html" class="internal-link" target="_self" rel="noopener nofollow">Port Mapping</a> usamos "" y dentro el puerto, podemos indicar todos los puertos que queramos
<br>links: le indicamos que otros contenedores trabaja nuestra aplicacion, los nombres de contenedores no usamos " " para indicarlo sin ella.
<br>image: le indicamos en que images estan basadas
<br>Ejemplo de uso de todo:<br>version: "3.9"
services:
  granja:
    build: .
    ports:
      - "3000:3000"
    links:
      - mysqlss
  mysqlss:
    image: mysql
    ports:
      - "27000:27000"
    environment:
      - MYSQL_ROOT_PASSWORD=1234
<br>Despues para poder ejeutar nuestro yaml tenemos el comando:<br>
<br>docker compose up
<br>docker compose down: para elimanr todas las images, red y conenedores que alla creado nuestro docker
]]></description><link>dockercurso\docker-compose.html</link><guid isPermaLink="false">DockerCurso/Docker Compose.md</guid><pubDate>Sat, 30 Mar 2024 10:27:15 GMT</pubDate></item><item><title><![CDATA[Docker Network]]></title><description><![CDATA[ 
 <br>Es un conjunto de contendores que se comunican entre si<br>Comandos:<br>
<br>docker network ls: para listar todas las conexiones
<br>docker network create &lt; nombre de network&gt;: creamo una conexion entre contenedores
<br>docker network rm &lt; nombre de network&gt;: eliminamos un netwokr
<br>
]]></description><link>dockercurso\docker-network.html</link><guid isPermaLink="false">DockerCurso/Docker Network.md</guid><pubDate>Fri, 29 Mar 2024 18:40:37 GMT</pubDate></item><item><title><![CDATA[Imagenes]]></title><description><![CDATA[ 
 ]]></description><link>dockercurso\imagenes.html</link><guid isPermaLink="false">DockerCurso/Imagenes.md</guid><pubDate>Sat, 23 Mar 2024 21:37:25 GMT</pubDate></item><item><title><![CDATA[Port Mapping]]></title><description><![CDATA[ 
 <br>Recibimos una conexion en fisico en nuestra maquina y nosotros queremos mapearlo con nuestros contenedores, es decir tenemos contendores que corren que internamente corren en el mismo puerto (ej: 3000) cuando lo conextemos a nuestra maquina usamos port mapping (el primer container 3000, el segundo el 3001) cambiado el puerto en el que se usa]]></description><link>dockercurso\port-mapping.html</link><guid isPermaLink="false">DockerCurso/Port Mapping.md</guid><pubDate>Sat, 23 Mar 2024 22:11:40 GMT</pubDate></item><item><title><![CDATA[Virtualizacion SO y aplicaciones]]></title><description><![CDATA[ 
 ]]></description><link>dockercurso\virtualizacion-so-y-aplicaciones.html</link><guid isPermaLink="false">DockerCurso/Virtualizacion SO y aplicaciones.md</guid><pubDate>Sat, 23 Mar 2024 21:37:32 GMT</pubDate></item><item><title><![CDATA[Volumes]]></title><description><![CDATA[ 
 <br>Parte del sistema de archivos que contiene el contendor esta comparte esa parte con el sistema de archivos anfitrion permitiendo pasar archivos en ambos lados<br>Existe tres tipos de volumes:<br>
<br>Anonimo: solo indicas la ruta, no pueder referenciar para que lo utlize otro contenedor
<br>Anfitrion o host: donde tu quieres que carpeta montar y donde montarla
<br>Nombrado: Es como el anonimo pero tu podras referenciar cuando creas otro contenedor
]]></description><link>dockercurso\volumes.html</link><guid isPermaLink="false">DockerCurso/Volumes.md</guid><pubDate>Sat, 30 Mar 2024 10:54:55 GMT</pubDate></item><item><title><![CDATA[Aspectos Fiscales]]></title><description><![CDATA[ 
 <br>La tributación monetaria dependen del tipo de sociedad que se lleve a cabo pero a grande rasgos existen dos tipos:<br>
<br>Los de personas impuestos de renta a personas físicas (IRPF) y sus variantes estimación objetiva o directa que dependerá de que también vaya el negocio.
<br>Y los impuestos  sobre sociedades (IS) que normalmente es un 25% de la rentas en concepto a impuestos, se paga a la Agencia Tributaria, NO todas las sociedades son 25%.
]]></description><link>empresa-e-iniciativa-empredora\segundotriemtres\aspectos-fiscales.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/SegundoTriemtres/Aspectos Fiscales.md</guid><pubDate>Thu, 13 Feb 2025 11:00:55 GMT</pubDate></item><item><title><![CDATA[Complejidad de la constitución y de la gestión]]></title><description><![CDATA[ 
 <br>Aparte de <a data-href="Los criterios para elegir la forma jurídica" href="\empresa-e-iniciativa-empredora\segundotriemtres\los-criterios-para-elegir-la-forma-jurídica.html" class="internal-link" target="_self" rel="noopener nofollow">Los criterios para elegir la forma jurídica</a> debemos tener en cuenta que existe otros factores como los de los costos que a veces los tramites sale prácticamente gratis, sin necesidad de llamar a una gestora, aparte tenemos que algunas formas jurídicas son obligatorias(Hoteles, agencias de viaje) y que solo tienen una forma, además de que no debemos elegir solo porque uno tiene menos burocracia o no normalmente conduce al fallo.]]></description><link>empresa-e-iniciativa-empredora\segundotriemtres\complejidad-de-la-constitución-y-de-la-gestión.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/SegundoTriemtres/Complejidad de la constitución y de la gestión.md</guid><pubDate>Sun, 21 Jan 2024 19:23:52 GMT</pubDate></item><item><title><![CDATA[El concepto de forma juridica]]></title><description><![CDATA[ 
 <br><br>Dependiendo de las características de la empresa(numero de socios, responsabilidad, el capital) es como será prevista en la Administración.]]></description><link>empresa-e-iniciativa-empredora\segundotriemtres\el-concepto-de-forma-juridica.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/SegundoTriemtres/El concepto de forma juridica.md</guid><pubDate>Sun, 21 Jan 2024 19:08:31 GMT</pubDate></item><item><title><![CDATA[El Emprendedor de Responsabilidad Limitada (ERL)]]></title><description><![CDATA[ 
 <br><br>El Emprendedor de Responsabilidad Limitada (ERL) es una figura jurídica que permite a los autónomos limitar su responsabilidad personal frente a las deudas derivadas de su actividad empresarial. A diferencia del trabajador autónomo tradicional, el ERL protege determinados bienes personales, como la vivienda habitual, ante posibles reclamaciones de acreedores.  <br><br>
<br>Limitación de responsabilidad: El patrimonio personal del emprendedor queda protegido, con excepción de determinadas deudas.  
<br>Registro obligatorio: Es necesario inscribirse en el Registro Mercantil para obtener esta condición.  
<br>Obligación contable: Se requiere llevar contabilidad conforme al Código de Comercio.  
<br>Posibilidad de mantener el régimen fiscal de autónomos: No se constituye como sociedad, lo que permite tributar en el IRPF.  
<br><br>Para acogerse a esta figura, se deben cumplir las siguientes condiciones:  <br>
<br>Inscripción en el Registro Mercantil como emprendedor de responsabilidad limitada.  
<br>Indicación en todas las facturas y documentos de la denominación "Emprendedor de Responsabilidad Limitada" o sus siglas "ERL".  
<br>Protección de la vivienda habitual: La vivienda no debe tener un valor superior a un límite establecido por la normativa vigente.  
<br>Obligación de llevar contabilidad mercantil, algo no exigido a los autónomos convencionales.  
<br><br>
<br>Protección del patrimonio personal, especialmente la vivienda habitual.  
<br>Mayor seguridad jurídica para emprendedores y autónomos.  
<br>Posibilidad de operar como autónomo sin necesidad de constituir una sociedad.  
<br>Mantenimiento del régimen fiscal de autónomos, evitando la fiscalidad más compleja de las sociedades.  
<br><br>
<br>No cubre todas las deudas, ya que las derivadas de impuestos y Seguridad Social siguen siendo responsabilidad personal.  
<br>Mayor carga administrativa, incluyendo la obligación de presentar cuentas anuales en el Registro Mercantil.  
<br>No ofrece la misma imagen corporativa que una sociedad limitada, lo que puede dificultar la captación de inversores o clientes.  
<br><br>El ERL debe cumplir con ciertas obligaciones adicionales respecto a un autónomo tradicional:  <br>
<br>Registro contable conforme al Código de Comercio.  
<br>Presentación de cuentas anuales en el Registro Mercantil.  
<br>Tributación mediante IRPF, a diferencia de las sociedades que tributan por el Impuesto sobre Sociedades.  
]]></description><link>empresa-e-iniciativa-empredora\segundotriemtres\el-emprendedor-de-responsabilidad-limitada.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/SegundoTriemtres/El emprendedor de responsabilidad limitada.md</guid><pubDate>Wed, 19 Feb 2025 09:39:58 GMT</pubDate></item><item><title><![CDATA[El numero de socios]]></title><description><![CDATA[ 
 <br>Un socio es una persona o varias que se unen para formar una sociedad<br>
<br>Un solo socio: empresario solo o  autónomo, o otro tipo de sociedad como la sociedad limitada
<br>Varios socios: Hace una especie de <a data-href="Sociedad" href="\Sociedad" class="internal-link" target="_self" rel="noopener nofollow">Sociedad</a>
<br><br>]]></description><link>empresa-e-iniciativa-empredora\segundotriemtres\el-numero-de-socios.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/SegundoTriemtres/El numero de socios.md</guid><pubDate>Sun, 21 Jan 2024 19:47:37 GMT</pubDate></item><item><title><![CDATA[El trabajador autónomo]]></title><description><![CDATA[ 
 <br>El trabajo autónomo es una modalidad laboral en la que una persona ejerce una actividad económica de manera independiente, sin estar vinculada a una empresa como trabajador asalariado. Los autónomos gestionan su propio negocio, asumiendo la responsabilidad de su actividad y la administración de sus ingresos y gastos.  <br><br>
<br>Independencia laboral: No existe relación de dependencia con un empleador.  
<br>Responsabilidad ilimitada: El autónomo responde con su patrimonio personal ante deudas o responsabilidades de su negocio.  
<br>Gestión propia: Control total sobre la actividad, decisiones y estrategias comerciales.  
<br>Obligaciones fiscales y contables: Debe gestionar impuestos, facturación y declaraciones tributarias.  
<br><br>
<br>Flexibilidad horaria: Posibilidad de organizar el tiempo de trabajo según las necesidades.  
<br>Control sobre el negocio: Decisión total sobre la estrategia y gestión.  
<br>Potencial de crecimiento: Posibilidad de aumentar ingresos sin depender de un salario fijo.  
<br>Diversidad de clientes: Capacidad de trabajar con distintos clientes y sectores.  
<br><br>
<br>Responsabilidad personal: No hay separación entre patrimonio personal y empresarial.  
<br>Ingresos variables: No se garantiza una remuneración fija mensual.  
<br>Carga fiscal y administrativa: Obligación de gestionar impuestos y contabilidad.  
<br>Menor protección social: No se cuenta con prestaciones laborales como vacaciones pagadas o indemnización por despido.  
<br><br><br>Para comenzar una actividad, el trabajador debe registrarse en los organismos competentes:  <br>
<br>Agencia Tributaria: Para obtener el Número de Identificación Fiscal (NIF) y elegir un régimen de tributación.  
<br>Seguridad Social: Inscripción en el Régimen Especial de Trabajadores Autónomos (RETA).  
<br><br>El autónomo debe cumplir con las siguientes obligaciones fiscales:  <br>
<br>Impuesto sobre la Renta de las Personas Físicas (IRPF): Tributa en función de sus ingresos.  
<br>Impuesto sobre el Valor Añadido (IVA): Debe declarar y liquidar el IVA de sus facturas.  
<br>Retenciones e ingresos a cuenta: Aplicables según el tipo de actividad.  
<br><br>
<br>Emisión de facturas: Cumpliendo requisitos legales como datos fiscales y desglose de impuestos.  
<br>Registro de ingresos y gastos: Control contable para la presentación de impuestos.  
<br>Declaraciones periódicas: Presentación trimestral y anual de impuestos.  
<br><br>
<br>Pago de la cuota de autónomos según los ingresos.  
<br>Acceso a prestaciones como baja por enfermedad y jubilación, aunque en condiciones distintas a los trabajadores asalariados.  
]]></description><link>empresa-e-iniciativa-empredora\segundotriemtres\el-trabajador-autónomo.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/SegundoTriemtres/El trabajador autónomo.md</guid><pubDate>Wed, 19 Feb 2025 09:39:02 GMT</pubDate></item><item><title><![CDATA[Empresario Individual:]]></title><description><![CDATA[ 
 <br><br>Es una sola persona que realiza actividades empresariales pero a nombre de su empresa.<br>Puede ser un trabajor autonomo o emprendedor de responsabilidad limtida<br><br>
<br>Persona mayor de edad o emancipada
<br>Responsabilidad Patrimonial Ilimitada
]]></description><link>empresa-e-iniciativa-empredora\segundotriemtres\empresario-individual.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/SegundoTriemtres/Empresario Individual.md</guid><pubDate>Thu, 13 Feb 2025 11:01:40 GMT</pubDate></item><item><title><![CDATA[La Comunidad de Bienes]]></title><description><![CDATA[ 
 <br><br>La Comunidad de Bienes (CB) es una forma jurídica utilizada cuando dos o más personas deciden compartir la propiedad y explotación de un negocio sin constituir una sociedad mercantil. Cada socio, conocido como comunero, aporta bienes, dinero o trabajo y participa en la gestión y beneficios del negocio.  <br><br>
<br>Fácil constitución: No requiere escritura pública ni inscripción en el Registro Mercantil, salvo que se aporten bienes inmuebles.  
<br>Mínimo de dos socios: No tiene un límite máximo de comuneros.  
<br>Responsabilidad ilimitada: Los comuneros responden con su patrimonio personal ante las deudas de la comunidad.  
<br>Régimen fiscal sencillo: No tributa como persona jurídica, sino que los socios lo hacen individualmente en el IRPF.  
<br>Gestión compartida: Las decisiones deben ser consensuadas entre los socios.  
<br><br>Para constituir una Comunidad de Bienes, se deben seguir los siguientes pasos:  <br>
<br>Elaboración de un contrato de constitución, en el que se establezcan las aportaciones, distribución de beneficios y reglas de funcionamiento.  
<br>Alta en la Agencia Tributaria, obteniendo un Número de Identificación Fiscal (NIF) y registrando la actividad económica.  
<br>Alta en la Seguridad Social, inscribiendo a la comunidad y a sus socios en el Régimen Especial de Trabajadores Autónomos (RETA).  
<br>Declaración censal y obtención del IVA e IRPF, según la actividad desarrollada.  
<br>Registro en organismos locales, si la actividad lo requiere (licencias, permisos, etc.).  
<br><br>
<br>Constitución rápida y con pocos requisitos administrativos.  
<br>No requiere un capital mínimo inicial.  
<br>Flexibilidad en la gestión y reparto de beneficios.  
<br>Fácil disolución en caso de cese de la actividad.  
<br><br>
<br>Responsabilidad ilimitada: Los socios responden con su patrimonio personal por las deudas del negocio.  
<br>Dificultad para atraer inversores: No tiene personalidad jurídica propia, lo que limita su credibilidad ante terceros.  
<br>Posibles conflictos entre socios: La toma de decisiones debe ser consensuada, lo que puede generar desacuerdos.  
<br><br>La Comunidad de Bienes tiene obligaciones fiscales similares a las de un autónomo:  <br>
<br>Impuesto sobre la Renta de las Personas Físicas (IRPF): Cada comunero tributa individualmente por los beneficios obtenidos.  
<br>Impuesto sobre el Valor Añadido (IVA): Si la actividad lo requiere, debe declararse y liquidarse periódicamente.  
<br>Declaraciones trimestrales y anuales: Presentación de modelos fiscales según la normativa vigente.  
]]></description><link>empresa-e-iniciativa-empredora\segundotriemtres\la-comunidad-de-bienes.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/SegundoTriemtres/La comunidad de bienes.md</guid><pubDate>Wed, 19 Feb 2025 09:41:13 GMT</pubDate></item><item><title><![CDATA[La Fiscalidad de las Sociedades: El Impuesto sobre Sociedades (IS)]]></title><description><![CDATA[ 
 <br><br>La fiscalidad de las sociedades hace referencia a las obligaciones tributarias que deben cumplir las empresas constituidas como sociedades mercantiles. A diferencia de los autónomos o empresarios individuales, las sociedades tributan a través del Impuesto sobre Sociedades (IS), en lugar del IRPF.  <br><br>El Impuesto sobre Sociedades (IS) es un tributo que grava los beneficios obtenidos por las empresas y entidades jurídicas. Se trata de un impuesto directo y proporcional, cuya base imponible se determina a partir del resultado contable de la empresa, ajustado por ciertos criterios fiscales.  <br><br>Deben tributar por el IS todas las entidades con personalidad jurídica propia, entre ellas:  <br>
<br>Sociedades Anónimas (S.A.)  
<br>Sociedades de Responsabilidad Limitada (S.L.)  
<br>Sociedades Cooperativas  
<br>Fundaciones y asociaciones con actividad económica  
<br>Otras entidades mercantiles y jurídicas  
<br><br>El tipo impositivo aplicado en el IS varía según el tipo de sociedad y su actividad. Algunos ejemplos generales son:  <br>
<br>Tipo general: 25 % sobre la base imponible.  
<br>Empresas de nueva creación: 15 % durante los dos primeros ejercicios con beneficios.  
<br>Sociedades cooperativas: 20 %, con posibles beneficios fiscales adicionales.  
<br>Entidades sin fines lucrativos: Régimen especial con beneficios fiscales, con tipos reducidos del 10 %.  
<br><br>Para determinar la base imponible del IS, se parte del resultado contable de la sociedad, que se obtiene de su cuenta de pérdidas y ganancias. A este resultado se le aplican ajustes fiscales, como:  <br>
<br>Gastos no deducibles (multas, sanciones, donaciones no justificadas).  
<br>Amortizaciones y provisiones permitidas fiscalmente.  
<br>Deducciones y bonificaciones aplicables.  
<br><br>Las empresas sujetas al IS deben cumplir con una serie de obligaciones fiscales, entre ellas:  <br><br>
<br>Se presenta anualmente mediante el modelo 200.  
<br>Se debe presentar incluso si la sociedad no ha tenido actividad.  
<br><br>
<br>Se realizan anticipos del IS mediante el modelo 202, generalmente en abril, octubre y diciembre.  
<br><br>
<br>Aplicables sobre rentas pagadas a terceros (empleados, proveedores, arrendadores).  
<br>Se presentan con modelos como el 111 (retenciones de trabajadores) o 115 (retenciones de alquiler).  
<br><br>
<br>Aunque el IS grava los beneficios, las sociedades también deben liquidar el Impuesto sobre el Valor Añadido (IVA) mediante el modelo 303 (trimestral) y el modelo 390 (resumen anual).  
<br><br>
<br>Presentación obligatoria de las cuentas anuales en el Registro Mercantil.  
<br>Contabilidad conforme al Plan General Contable (PGC).  
<br><br>Las sociedades pueden beneficiarse de ciertas deducciones fiscales, entre ellas:  <br>
<br>Deducción por I+D+i: Para empresas que invierten en innovación y desarrollo.  
<br>Deducciones por inversión en producciones cinematográficas y audiovisuales.  
<br>Bonificaciones para empresas que generan empleo.  
<br>Reducciones por reinversión de beneficios en activos productivos.  
<br><br>]]></description><link>empresa-e-iniciativa-empredora\segundotriemtres\la-fiscalia-de-las-sociedades.-el-is.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/SegundoTriemtres/La fiscalia de las sociedades. El IS.md</guid><pubDate>Wed, 19 Feb 2025 09:58:23 GMT</pubDate></item><item><title><![CDATA[La Fiscalidad de las Empresas Individuales: El IRPF]]></title><description><![CDATA[ 
 <br><br><br>Las empresas individuales, como los autónomos o empresarios individuales, no tributan como una entidad jurídica independiente, sino que sus ingresos se integran en la base imponible del empresario. La principal figura impositiva que afecta a estas empresas es el Impuesto sobre la Renta de las Personas Físicas (IRPF).  <br><br>El Impuesto sobre la Renta de las Personas Físicas (IRPF) es un tributo que grava los ingresos obtenidos por las personas físicas, incluyendo los beneficios generados por actividades económicas. En el caso de los empresarios individuales, los ingresos de su actividad se consideran parte de su renta personal y se tributan bajo este impuesto.  <br><br>Los empresarios individuales pueden tributar en el IRPF mediante distintos regímenes:  <br><br>
<br>Aplicable a empresas individuales con volumen de ingresos elevado.  
<br>Se tributa sobre los beneficios netos, restando gastos deducibles de los ingresos obtenidos.  
<br>Obligación de llevar contabilidad mercantil detallada.  
<br><br>
<br>Para empresarios individuales con ingresos inferiores a un límite establecido por la ley.  
<br>Permite simplificar la contabilidad sin requerir libros mercantiles completos.  
<br>Se aplican gastos deducibles, pero con límites en algunos casos.  
<br><br>
<br>Aplicable a actividades económicas específicas y pequeños empresarios.  
<br>La tributación se basa en parámetros objetivos (metros del local, consumo energético, número de empleados, etc.), sin necesidad de justificar ingresos y gastos reales.  
<br>Menos carga administrativa, pero no siempre es beneficioso si los gastos son elevados.  
<br><br>Para calcular la base imponible del IRPF, los empresarios individuales pueden restar ciertos gastos deducibles, entre ellos:  <br>
<br>Alquiler de local o espacio de trabajo.  
<br>Suministros (agua, electricidad, internet) cuando son necesarios para la actividad.  
<br>Material y herramientas de trabajo.  
<br>Gastos de personal (sueldos, seguridad social, formación).  
<br>Vehículos y transporte si están afectos exclusivamente a la actividad.  
<br>Seguros profesionales y responsabilidad civil.  
<br>Gastos financieros y comisiones bancarias derivadas del negocio.  
<br><br>Los empresarios individuales deben realizar pagos a cuenta del IRPF de forma trimestral a través del modelo 130 (para estimación directa) o el modelo 131 (para módulos).  <br>Además, si trabajan con clientes que aplican retención en factura, esa cantidad se descuenta de los pagos fraccionados.  <br><br><br>
<br>Simplicidad en la gestión fiscal en comparación con sociedades.  
<br>Flexibilidad en los regímenes de tributación según el tipo de actividad.  
<br>Posibilidad de deducciones fiscales que reducen la carga impositiva.  
<br><br>
<br>Tributos progresivos: A mayor beneficio, mayor tipo impositivo.  
<br>No hay separación entre el patrimonio personal y empresarial.  
<br>Obligación de presentar declaraciones trimestrales y anuales.  
]]></description><link>empresa-e-iniciativa-empredora\segundotriemtres\la-fiscalidad-de-las-empresas-individuales.-el-irpf.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/SegundoTriemtres/La Fiscalidad de las Empresas Individuales. El IRPF.md</guid><pubDate>Wed, 19 Feb 2025 09:44:17 GMT</pubDate></item><item><title><![CDATA[La forma jurídicas individuales y las colectividades sin personalidades jurídica propia]]></title><description><![CDATA[ 
 <br>Tenemos varias forma jurídica sino que es la misma para su empresario que responde el solo:<br>
<br><a data-href="Empresario Individual" href="\empresa-e-iniciativa-empredora\segundotriemtres\empresario-individual.html" class="internal-link" target="_self" rel="noopener nofollow">Empresario Individual</a>
]]></description><link>empresa-e-iniciativa-empredora\segundotriemtres\la-forma-jurídicas-individuales-y-las-colectividades-sin-personalidades-jurídica-propia.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/SegundoTriemtres/La forma jurídicas individuales y las colectividades sin personalidades jurídica propia.md</guid><pubDate>Wed, 19 Feb 2025 09:36:05 GMT</pubDate></item><item><title><![CDATA[La responsabilidad patrimonial de los promotores]]></title><description><![CDATA[ 
 <br>La responsabilidad patrimonial se refiere a la obligación que debe tener los promotores con respecto a las deudas de la empresa y su actividad en si.<br>Teniendo dos tipos:<br>
<br>Limitada: Solo los derechos, bienes de la empresa y capital. No tocando nunca bienes personales de sus socios.
<br>Ilimitada: Abarca tanto derechos, bienes de la empresa y capital,  en caso de  no alcanzar usar los bienes personales para saldar la deuda.
<br>Aparte de esto tenemos casos especiales:<br>
<br>Responsabilidad Subsidiaria: Por defecto queda a cargo de una persona 
<br>Responsabilidad Solidaria: Puede caer la deuda a cualquier socio.
<br>Responsabilidad Proporcional: En base a lo aportado por cada socio.
<br>La responsabilidad limitada la usan:<br>
<br>Cooperativas
<br>Sociedad Limitada
<br>Sociedad anónimas
<br>Sociedad Laborales
<br>Empresario de responsabilidad limitada
<br>La Responsabilidad patrimonial ilimitada la usan la forma fiscal:<br>
<br>Empresario
<br>Sociedades Civil
<br>Comunidad de Bienes
]]></description><link>empresa-e-iniciativa-empredora\segundotriemtres\la-responsabilidad-patrimonial-de-los-promotores.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/SegundoTriemtres/La responsabilidad patrimonial de los promotores.md</guid><pubDate>Mon, 22 Jan 2024 12:13:53 GMT</pubDate></item><item><title><![CDATA[La Sociedad Civil]]></title><description><![CDATA[ 
 <br><br>La Sociedad Civil es un contrato mediante el cual dos o más personas se asocian para desarrollar una actividad económica con ánimo de lucro, compartiendo los beneficios y las responsabilidades. A diferencia de las sociedades mercantiles, la Sociedad Civil no tiene personalidad jurídica propia, salvo que se inscriba en el Registro Mercantil.  <br><br>
<br>Fácil constitución: No requiere inscripción en el Registro Mercantil, salvo que se le otorgue personalidad jurídica.  
<br>Mínimo de dos socios: No hay límite máximo de socios.  
<br>Aportaciones flexibles: Los socios pueden aportar dinero, bienes o trabajo.  
<br>Responsabilidad ilimitada: Los socios responden con su patrimonio personal ante las deudas.  
<br>Tributación en el IRPF: Cada socio tributa individualmente por su participación en los beneficios.  
<br><br>Para constituir una Sociedad Civil, se deben seguir estos pasos:  <br>
<br>Elaboración de un contrato de sociedad, especificando las aportaciones de cada socio, la distribución de beneficios y la toma de decisiones.  
<br>Alta en la Agencia Tributaria, obteniendo un Número de Identificación Fiscal (NIF) y registrando la actividad económica.  
<br>Alta en la Seguridad Social, inscribiendo a los socios en el Régimen Especial de Trabajadores Autónomos (RETA).  
<br>Obtención de licencias y permisos locales, si la actividad lo requiere.  
<br>Declaración de impuestos y obligaciones contables, según el régimen fiscal aplicable.  
<br><br>
<br>Simplicidad en la constitución y gestión.  
<br>No se requiere un capital mínimo inicial.  
<br>Flexibilidad en la gestión y reparto de beneficios.  
<br>Menos cargas fiscales y contables que una sociedad mercantil.  
<br><br>
<br>Responsabilidad ilimitada: Los socios responden con su patrimonio personal.  
<br>Menor credibilidad ante terceros: Puede ser más difícil obtener financiación o atraer inversores.  
<br>Riesgo de conflictos entre socios: Es esencial establecer un acuerdo claro sobre la gestión y distribución de beneficios.  
<br><br>La Sociedad Civil tributa de la siguiente manera:  <br>
<br>Impuesto sobre la Renta de las Personas Físicas (IRPF): Cada socio declara su parte proporcional de los beneficios.  
<br>Impuesto sobre el Valor Añadido (IVA): Se aplica si la actividad económica lo requiere.  
<br>Declaraciones trimestrales y anuales: Presentación de modelos fiscales según la normativa vigente.  
]]></description><link>empresa-e-iniciativa-empredora\segundotriemtres\la-sociedad-civil.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/SegundoTriemtres/La sociedad civil.md</guid><pubDate>Wed, 19 Feb 2025 09:42:35 GMT</pubDate></item><item><title><![CDATA[Las necesidades económicas de un proyecto]]></title><description><![CDATA[ 
 <br>Un aspecto importante  es el capital que se aporta para la sociedad en si<br>En la ley dependen del <a data-href="El concepto de forma juridica" href="\empresa-e-iniciativa-empredora\segundotriemtres\el-concepto-de-forma-juridica.html" class="internal-link" target="_self" rel="noopener nofollow">El concepto de forma juridica</a>. Los socios tendrán que aportar un mínimo o no de capital, he de entender que capital y lo aportado por el <a data-href="socio" href="\socio" class="internal-link" target="_self" rel="noopener nofollow">socio</a> puede ser experiencia, bienes, servicio o trabajo que aporte a la sociedad<br>Dependiendo de su tipo de forma jurídica debe aportar:<br>
<br>Empresario solo: 0
<br>Emprendedor de responsabilidad limitada: 0
<br>Sociedad responsabilidad limitada: 3000€
<br>Sociedad Responsabilidad Limitada de Empresa nueva: mínimo 10000 y máximo 120000€
<br>Sociedad Limitada laboral: 3000
<br>Cooperativa : 0
<br>Sociedad Anónima: 60000€
<br>Sociedad Civil: 0
<br>Comunidad de bienes 0
<br>Sociedad Anónima Laboral: 60000€
<br>Sociedad  limitada de formación sucesiva: No cuenta con mínimo pero no puede ser 0€
]]></description><link>empresa-e-iniciativa-empredora\segundotriemtres\las-necesidades-económicas-de-un-proyecto.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/SegundoTriemtres/Las necesidades económicas de un proyecto.md</guid><pubDate>Sun, 21 Jan 2024 20:11:40 GMT</pubDate></item><item><title><![CDATA[Las Sociedades: Tipos, Características y Obligaciones]]></title><description><![CDATA[ 
 <br><br>Una sociedad es una entidad jurídica creada por dos o más personas que acuerdan unir recursos para llevar a cabo una actividad económica con ánimo de lucro. Estas entidades tienen una estructura legal propia, lo que define su régimen de responsabilidad, tributación y gestión.  <br><br>
<br>Personalidad jurídica propia (en la mayoría de los casos), lo que separa el patrimonio de la empresa del de sus socios.  
<br>Contrato de constitución, que establece los derechos y obligaciones de los socios.  
<br>Registro en el Registro Mercantil, obligatorio en la mayoría de las sociedades mercantiles.  
<br>Gestión y toma de decisiones compartida, dependiendo del tipo de sociedad.  
<br>Tributación diferenciada, generalmente sujeta al Impuesto sobre Sociedades.  
<br><br>Existen diferentes tipos de sociedades en función de su estructura, responsabilidad de los socios y régimen fiscal.  <br><br>La Sociedad de Responsabilidad Limitada (S.L.) es una de las formas jurídicas más utilizadas por pequeñas y medianas empresas.  <br>
<br>Responsabilidad: Limitada al capital aportado.  
<br>Capital mínimo: Depende del país, pero suele ser bajo.  
<br>Número de socios: Mínimo de uno (puede ser una S.L. unipersonal).  
<br>Tributación: Impuesto sobre Sociedades.  
<br>Obligaciones contables: Contabilidad más sencilla que una Sociedad Anónima.  
<br>Ventajas:  <br>
<br>Protección del patrimonio personal.  
<br>Menos requisitos formales que una S.A.  
<br>Adecuada para pequeños y medianos negocios.  
<br>Desventajas:  <br>
<br>Menos acceso a financiación externa.  
<br>Mayor carga fiscal y contable que un autónomo.  
<br><br><br>La Sociedad Anónima (S.A.) es una estructura pensada para grandes empresas o negocios que buscan captar inversión mediante la emisión de acciones.  <br>
<br>Responsabilidad: Limitada al capital aportado.  
<br>Capital mínimo: Elevado, definido por la legislación.  
<br>Número de socios: Mínimo de uno, pero ideal para múltiples accionistas.  
<br>Tributación: Impuesto sobre Sociedades.  
<br>Obligaciones contables: Contabilidad más compleja, con auditorías en ciertos casos.  
<br>Ventajas:  <br>
<br>Mayor facilidad para captar inversión.  
<br>Separación clara entre gestión y propiedad.  
<br>Transmisión sencilla de acciones.  
<br>Desventajas:  <br>
<br>Costes de constitución elevados.  
<br>Mayor carga administrativa y contable.  
<br><br><br>La Sociedad Cooperativa es una entidad en la que los socios participan equitativamente en la gestión y en los beneficios.  <br>
<br>Responsabilidad: Limitada al capital aportado.  
<br>Capital mínimo: Variable según el estatuto de la cooperativa.  
<br>Número de socios: Mínimo de dos o tres, según la legislación.  
<br>Tributación: Impuesto sobre Sociedades con beneficios fiscales.  
<br>Obligaciones contables: Reguladas según el tipo de cooperativa.  
<br>Ventajas:  <br>
<br>Gestión democrática y participativa.  
<br>Beneficios fiscales en algunos casos.  
<br>Promueve el trabajo en equipo.  
<br>Desventajas:  <br>
<br>Toma de decisiones más lenta.  
<br>Menos atractiva para inversores externos.  
<br><br><br>La Sociedad Civil es un contrato entre dos o más personas que acuerdan colaborar en una actividad económica sin constituir una sociedad mercantil.  <br>
<br>Responsabilidad: Ilimitada, los socios responden con su patrimonio personal.  
<br>Capital mínimo: No se exige un mínimo.  
<br>Número de socios: Mínimo de dos.  
<br>Tributación: Los socios tributan en el IRPF por sus beneficios.  
<br>Obligaciones contables: Menos exigencias que una S.L. o S.A.  
<br>Ventajas:  <br>
<br>Constitución sencilla y sin grandes costes.  
<br>Menos cargas fiscales y contables que una sociedad mercantil.  
<br>Desventajas:  <br>
<br>Responsabilidad ilimitada.  
<br>No tiene personalidad jurídica propia, lo que puede dificultar la obtención de financiación.  
<br><br><br>La Comunidad de Bienes es una forma jurídica en la que varios socios comparten la propiedad y explotación de un negocio sin constituir una sociedad mercantil.  <br>
<br>Responsabilidad: Ilimitada.  
<br>Capital mínimo: No se exige un mínimo.  
<br>Número de socios: Mínimo de dos.  
<br>Tributación: IRPF de cada socio según su participación en beneficios.  
<br>Obligaciones contables: Similares a las de un autónomo.  
<br>Ventajas:  <br>
<br>Constitución rápida y sin costes elevados.  
<br>Adecuada para pequeños negocios.  
<br>Desventajas:  <br>
<br>Responsabilidad ilimitada.  
<br>Dificultad para atraer inversión externa.  
<br><br><br>Las sociedades tienen una serie de obligaciones fiscales y contables que varían según su tipo:  <br><br>
<br>Las sociedades mercantiles tributan a través del Impuesto sobre Sociedades.  
<br>Las sociedades sin personalidad jurídica (Sociedad Civil, Comunidad de Bienes) tributan en el IRPF de cada socio.  
<br>En todos los casos, deben declarar y liquidar el IVA si realizan actividades sujetas a este impuesto.  
<br><br>
<br>Las S.L. y S.A. deben llevar contabilidad conforme al Código de Comercio y presentar cuentas anuales.  
<br>Las Sociedades Civiles y Comunidades de Bienes tienen menos exigencias contables, similares a las de un autónomo.  
<br><br>Las sociedades deben presentar declaraciones trimestrales y anuales sobre:  <br>
<br>IVA  
<br>Retenciones a trabajadores y profesionales  
<br>Impuesto sobre Sociedades o IRPF  
]]></description><link>empresa-e-iniciativa-empredora\segundotriemtres\las-sociedades.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/SegundoTriemtres/Las Sociedades.md</guid><pubDate>Wed, 19 Feb 2025 09:48:56 GMT</pubDate></item><item><title><![CDATA[Los criterios para elegir la forma jurídica]]></title><description><![CDATA[ 
 <br>Si bien hay muchos criterios existen unos básicos:<br> Criterios Fiscalia]]></description><link>empresa-e-iniciativa-empredora\segundotriemtres\los-criterios-para-elegir-la-forma-jurídica.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/SegundoTriemtres/Los criterios para elegir la forma jurídica.md</guid><pubDate>Thu, 13 Feb 2025 11:02:39 GMT</pubDate></item><item><title><![CDATA[Otros Impuestos que Pagan las Empresas y Sociedades en España]]></title><description><![CDATA[ 
 <br><br>Además del Impuesto sobre Sociedades (IS), las empresas y sociedades en España deben cumplir con diversas obligaciones fiscales que afectan su operativa diaria. Estos tributos pueden ser estatales, autonómicos o municipales y varían según la actividad y el tipo de empresa.  <br><br><br>El IVA es un impuesto indirecto que grava el consumo de bienes y servicios. Las empresas actúan como recaudadoras, trasladando el impuesto a los clientes y luego ingresándolo a la Agencia Tributaria.  <br>
<br>Tipos impositivos del IVA:  

<br>General: 21 % (productos y servicios en general).  
<br>Reducido: 10 % (alimentos, hostelería, transporte).  
<br>Superreducido: 4 % (productos básicos como pan, leche, libros).  


<br>Obligaciones:  

<br>Presentación del modelo 303 (trimestral) y modelo 390 (resumen anual).  
<br>Registro de facturas emitidas y recibidas.  


<br><br>Este impuesto grava las transmisiones de bienes y derechos, así como determinados documentos notariales y mercantiles.  <br>
<br>Transmisiones patrimoniales (ITP): Se aplica a la compraventa de bienes muebles e inmuebles entre particulares y empresas.  
<br>Actos jurídicos documentados (AJD): Aplica a documentos notariales, mercantiles y administrativos.  
<br><br><br>El IAE grava el ejercicio de actividades empresariales, profesionales o artísticas.  <br>
<br>Exención: Empresas con facturación inferior a 1 millón de euros anuales.  
<br>Cuota variable: Depende del tipo de actividad y el municipio.  
<br>Obligación: Presentación del modelo 840 para la inscripción, modificación o baja.  
<br><br>El IBI es un tributo municipal que grava la propiedad de inmuebles, incluidas oficinas, naves industriales y locales comerciales.  <br>
<br>Cálculo: Se basa en el valor catastral del inmueble.  
<br>Pago anual: Obligación del propietario o arrendatario si está pactado en contrato.  
<br><br>Grava la realización de obras, construcciones o reformas que requieran licencia municipal.  <br>
<br>Base imponible: Valor de la obra.  
<br>Porcentaje: Entre el 2 % y el 4 % según el ayuntamiento.  
<br><br><br>Las empresas deben pagar cotizaciones sociales por sus empleados, además de retener una parte del salario del trabajador para su aportación personal.  <br>
<br>
Aportaciones empresariales:  

<br>Contingencias comunes: 23,6 %  
<br>Desempleo: 5,5 %  
<br>Formación profesional: 0,6 %  
<br>Fondo de Garantía Salarial (FOGASA): 0,2 %  


<br>
Obligaciones fiscales:  

<br>Pago mensual a la Seguridad Social.  
<br>Presentación de los modelos de cotización TC1 y TC2.  


<br><br>Las empresas deben retener parte del sueldo de sus empleados y de los pagos a profesionales autónomos.  <br>
<br>Trabajadores: Retenciones según tabla de IRPF, dependiendo del salario y situación familiar.  
<br>Profesionales autónomos: Retención del 15 % en sus facturas (7 % para nuevos autónomos en los primeros años).  
<br>Obligaciones:  

<br>Presentación del modelo 111 (trimestral) y modelo 190 (resumen anual).  


<br><br><br>Afecta a empresas que generan electricidad. Se aplica sobre los ingresos de la producción de energía y tiene un tipo impositivo del 7 %.  <br><br>Desde 2023, las empresas deben pagar un impuesto especial sobre plásticos no reciclables utilizados en envases.  <br>
<br>Base imponible: Peso del plástico en los envases de un solo uso.  
<br>Objetivo: Fomentar el uso de materiales reciclables.  
<br><br>Las empresas en España deben cumplir con múltiples impuestos a nivel estatal, autonómico y local. Un adecuado cumplimiento fiscal permite evitar sanciones y optimizar la carga tributaria. Es recomendable contar con un asesor fiscal para gestionar correctamente estas obligaciones.  ]]></description><link>empresa-e-iniciativa-empredora\segundotriemtres\otros-impuestos.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/SegundoTriemtres/Otros Impuestos.md</guid><pubDate>Wed, 19 Feb 2025 09:59:27 GMT</pubDate></item><item><title><![CDATA[Temario]]></title><description><![CDATA[ 
 <br>
<br><a data-href="El concepto de forma juridica" href="\empresa-e-iniciativa-empredora\segundotriemtres\el-concepto-de-forma-juridica.html" class="internal-link" target="_self" rel="noopener nofollow">El concepto de forma juridica</a>
<br><a data-href="Los criterios para elegir la forma jurídica" href="\empresa-e-iniciativa-empredora\segundotriemtres\los-criterios-para-elegir-la-forma-jurídica.html" class="internal-link" target="_self" rel="noopener nofollow">Los criterios para elegir la forma jurídica</a>

<br><a data-href="Complejidad de la constitución y de la gestión" href="\empresa-e-iniciativa-empredora\segundotriemtres\complejidad-de-la-constitución-y-de-la-gestión.html" class="internal-link" target="_self" rel="noopener nofollow">Complejidad de la constitución y de la gestión</a>
<br><a data-href="El numero de socios" href="\empresa-e-iniciativa-empredora\segundotriemtres\el-numero-de-socios.html" class="internal-link" target="_self" rel="noopener nofollow">El numero de socios</a>
<br><a data-href="Las necesidades económicas de un proyecto" href="\empresa-e-iniciativa-empredora\segundotriemtres\las-necesidades-económicas-de-un-proyecto.html" class="internal-link" target="_self" rel="noopener nofollow">Las necesidades económicas de un proyecto</a>
<br><a data-href="Aspectos Fiscales" href="\empresa-e-iniciativa-empredora\segundotriemtres\aspectos-fiscales.html" class="internal-link" target="_self" rel="noopener nofollow">Aspectos Fiscales</a>
<br><a data-href="La responsabilidad patrimonial de los promotores" href="\empresa-e-iniciativa-empredora\segundotriemtres\la-responsabilidad-patrimonial-de-los-promotores.html" class="internal-link" target="_self" rel="noopener nofollow">La responsabilidad patrimonial de los promotores</a>
<br><a data-href="Otros Aspectos" href="\Otros Aspectos" class="internal-link" target="_self" rel="noopener nofollow">Otros Aspectos</a>


<br><a data-href="La forma jurídicas individuales y las colectividades sin personalidades jurídica propia" href="\empresa-e-iniciativa-empredora\segundotriemtres\la-forma-jurídicas-individuales-y-las-colectividades-sin-personalidades-jurídica-propia.html" class="internal-link" target="_self" rel="noopener nofollow">La forma jurídicas individuales y las colectividades sin personalidades jurídica propia</a>

<br><a data-href="Empresario Individual" href="\empresa-e-iniciativa-empredora\segundotriemtres\empresario-individual.html" class="internal-link" target="_self" rel="noopener nofollow">Empresario Individual</a>
<br><a data-href="El trabajador autónomo" href="\empresa-e-iniciativa-empredora\segundotriemtres\el-trabajador-autónomo.html" class="internal-link" target="_self" rel="noopener nofollow">El trabajador autónomo</a>
<br><a data-href="El emprendedor de responsabilidad limitada" href="\empresa-e-iniciativa-empredora\segundotriemtres\el-emprendedor-de-responsabilidad-limitada.html" class="internal-link" target="_self" rel="noopener nofollow">El emprendedor de responsabilidad limitada</a>
<br><a data-href="La comunidad de bienes" href="\empresa-e-iniciativa-empredora\segundotriemtres\la-comunidad-de-bienes.html" class="internal-link" target="_self" rel="noopener nofollow">La comunidad de bienes</a>
<br><a data-href="La sociedad civil" href="\empresa-e-iniciativa-empredora\segundotriemtres\la-sociedad-civil.html" class="internal-link" target="_self" rel="noopener nofollow">La sociedad civil</a>


<br><a data-href="La Fiscalidad de las Empresas Individuales. El IRPF" href="\empresa-e-iniciativa-empredora\segundotriemtres\la-fiscalidad-de-las-empresas-individuales.-el-irpf.html" class="internal-link" target="_self" rel="noopener nofollow">La Fiscalidad de las Empresas Individuales. El IRPF</a>
<br><a data-href="Las Sociedades" href="\empresa-e-iniciativa-empredora\segundotriemtres\las-sociedades.html" class="internal-link" target="_self" rel="noopener nofollow">Las Sociedades</a>
<br><a data-href="La fiscalia de las sociedades. El IS" href="\empresa-e-iniciativa-empredora\segundotriemtres\la-fiscalia-de-las-sociedades.-el-is.html" class="internal-link" target="_self" rel="noopener nofollow">La fiscalia de las sociedades. El IS</a>
<br><a data-href="Otros Impuestos" href="\empresa-e-iniciativa-empredora\segundotriemtres\otros-impuestos.html" class="internal-link" target="_self" rel="noopener nofollow">Otros Impuestos</a><br>

]]></description><link>empresa-e-iniciativa-empredora\segundotriemtres\temario.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/SegundoTriemtres/Temario.md</guid><pubDate>Wed, 19 Feb 2025 09:49:02 GMT</pubDate></item><item><title><![CDATA[Tramites según su forma jurídica]]></title><description><![CDATA[ 
 <br>Los tramites que se deben llevar a cabo dependiendo de la forma jurídica que adoptamos a parte debemos saber que una vez tengamos hechos esto no podemos ejercer nuestra función como empresa <a data-href="Tramites en marcha" href="\Tramites en marcha" class="internal-link" target="_self" rel="noopener nofollow">Tramites en marcha</a>, para luego saber en <a data-href="¿En donde se realizan estos tramites" href="\¿En donde se realizan estos tramites" class="internal-link" target="_self" rel="noopener nofollow">¿En donde se realizan estos tramites</a><br>1-  Empresario Individual:<br>
<br>DNI de empresario
<br> 2- Comunidad de bienes o sociedad de bienes:<br>
<br>Contrato de publico o privacidad de constitución 
<br>DNI promotores
<br>Solicitud de numero de fiscal(NIF)
<br>Solitud del impuesto sobre transmisiones patrimoniales y actos jurídicos
<br>3- Empresario con responsabilidad limitada:<br>
<br>DNI de empresario
<br>Inscripción registro em el mercado mercantil
<br>Liquidación del impuesto de trasmisión patrimoniales  y actos jurídico documentados<br>
4- Socidades Mercantiles:
<br>Solitud de registro de certificacion negativo del nombre o razon social.(Registro Mercatil Centra RMC)
<br>
]]></description><link>empresa-e-iniciativa-empredora\segundotriemtres\tramites-según-su-forma-jurídica.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/SegundoTriemtres/Tramites según su forma jurídica.md</guid><pubDate>Fri, 09 Feb 2024 11:44:08 GMT</pubDate></item><item><title><![CDATA[Elección Electiva]]></title><description><![CDATA[ 
 <br>La elección electiva dentro del ámbito de <a data-href="Empresas e Iniciativa Emprendedora" href="\empresa-e-iniciativa-empredora\empresas-e-iniciativa-emprendedora.html" class="internal-link" target="_self" rel="noopener nofollow">Empresas e Iniciativa Emprendedora</a> se refiere a la posibilidad de que los estudiantes seleccionen asignaturas optativas relacionadas con el mundo empresarial, el emprendimiento y la gestión de negocios. Estas asignaturas permiten a los alumnos profundizar en conocimientos específicos según sus intereses y objetivos profesionales.<br><br>Optar por una asignatura dentro de esta área permite desarrollar habilidades clave como:<br>
<br>Gestión y administración de negocios.
<br>Planificación y desarrollo de proyectos emprendedores.
<br>Toma de decisiones estratégicas en un entorno empresarial.
<br>Conocimientos en financiamiento, marketing y liderazgo.
<br><br>Dependiendo de la institución educativa, las asignaturas electivas pueden abordar temas como:<br>
<br>Emprendimiento y startups: creación y validación de ideas de negocio.
<br>Gestión empresarial: fundamentos de administración y gestión de recursos.
<br>Marketing digital y ventas: estrategias de posicionamiento y comercialización.
<br>Finanzas para emprendedores: planificación financiera y obtención de capital.
<br>Innovación y tecnología: impacto de la digitalización en los negocios.
<br><br>La elección de una asignatura electiva en Empresas e Iniciativa Emprendedora brinda a los estudiantes herramientas esenciales para desarrollar proyectos propios o integrarse en el mundo empresarial con mayor preparación. Es una oportunidad clave para adquirir conocimientos prácticos que pueden marcar la diferencia en el futuro profesional.]]></description><link>empresa-e-iniciativa-empredora\elección-electiva.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/Elección Electiva.md</guid><pubDate>Wed, 19 Feb 2025 10:01:23 GMT</pubDate></item><item><title><![CDATA[Empresas y sus Formas Jurídicas]]></title><description><![CDATA[ 
 <br><br>La forma jurídica de una empresa determina su estructura legal, fiscal y operativa. Elegir el tipo de empresa adecuado es un paso clave para garantizar su viabilidad y éxito, ya que afecta aspectos como la responsabilidad de los socios, la fiscalidad y la gestión administrativa.<br><br>A la hora de crear un negocio, es fundamental seleccionar la forma jurídica que mejor se adapte a tus necesidades y objetivos. Algunas de las más comunes son:<br><br>
<br>Responsabilidad: Ilimitada (el empresario responde con su patrimonio personal).
<br>Fiscalidad: IRPF (Impuesto sobre la Renta de las Personas Físicas).
<br>Ventajas: Sencillez en la gestión, menor carga burocrática, inicio rápido.
<br>Ideal para: Pequeños negocios, freelancers y profesionales independientes.
<br><br>
<br>Responsabilidad: Limitada al capital aportado.
<br>Fiscalidad: Impuesto de Sociedades.
<br>Ventajas: Protección del patrimonio personal, estructura flexible, imagen más profesional.
<br>Ideal para: Pequeñas y medianas empresas (PYMEs) con varios socios.
<br><br>
<br>Responsabilidad: Limitada al capital aportado.
<br>Fiscalidad: Impuesto de Sociedades.
<br>Ventajas: Posibilidad de captar inversión, acceso a mercados de capitales, adecuada para grandes empresas.
<br>Ideal para: Empresas de gran tamaño con expectativas de crecimiento y financiación externa.
<br><br>
<br>Responsabilidad: Limitada al capital aportado.
<br>Fiscalidad: Beneficios fiscales específicos.
<br>Ventajas: Gestión democrática, incentivos fiscales, fomento del trabajo en equipo.
<br>Ideal para: Empresas con un enfoque social o colectivo.
<br><br>Al tomar esta decisión, es importante considerar los siguientes aspectos:<br>
<br>Nivel de responsabilidad que estás dispuesto a asumir.
<br>Capital disponible para la constitución de la empresa.
<br>Número de socios y su grado de implicación.
<br>Carga fiscal y obligaciones contables.
<br>Perspectivas de crecimiento y financiación a futuro.
]]></description><link>empresa-e-iniciativa-empredora\empresas-de-forma-jurídica.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/Empresas de forma jurídica.md</guid><pubDate>Wed, 19 Feb 2025 09:31:38 GMT</pubDate></item><item><title><![CDATA[Índice:]]></title><description><![CDATA[ 
 <br><br>
<br><a data-href="Elección Electiva" href="\empresa-e-iniciativa-empredora\elección-electiva.html" class="internal-link" target="_self" rel="noopener nofollow">Elección Electiva</a>
<br><a data-href="Empresas de forma jurídica" href="\empresa-e-iniciativa-empredora\empresas-de-forma-jurídica.html" class="internal-link" target="_self" rel="noopener nofollow">Empresas de forma jurídica</a>
<br><a data-href="Guía para la Constitución de una Empresa - Pasos y Requisitos" href="\empresa-e-iniciativa-empredora\guía-para-la-constitución-de-una-empresa-pasos-y-requisitos.html" class="internal-link" target="_self" rel="noopener nofollow">Guía para la Constitución de una Empresa - Pasos y Requisitos</a>
<br><a data-href="Político Cambios en una escuela" href="\empresa-e-iniciativa-empredora\político-cambios-en-una-escuela.html" class="internal-link" target="_self" rel="noopener nofollow">Político Cambios en una escuela</a>
<br><a data-href="Tipos de Empresas y su Fiscalidad" href="\empresa-e-iniciativa-empredora\tipos-de-empresas-y-su-fiscalidad.html" class="internal-link" target="_self" rel="noopener nofollow">Tipos de Empresas y su Fiscalidad</a>
<br>Segundo Trimestre:<br>
<br><a data-href="Temario" href="\empresa-e-iniciativa-empredora\segundotriemtres\temario.html" class="internal-link" target="_self" rel="noopener nofollow">Temario</a>
]]></description><link>empresa-e-iniciativa-empredora\empresas-e-iniciativa-emprendedora.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/Empresas e Iniciativa Emprendedora.md</guid><pubDate>Wed, 19 Feb 2025 10:01:29 GMT</pubDate></item><item><title><![CDATA[Guía para la Constitución de una Empresa - Pasos y Requisitos]]></title><description><![CDATA[ 
 <br><br>
<br>Decidir el tipo de empresa (autónomo, sociedad limitada, sociedad anónima, entre otras) en función de tus necesidades y objetivos.
<br><br>
<br>Verificar la disponibilidad y registrar la denominación social en el Registro Mercantil Central.
<br><br>
<br>Redactar los estatutos sociales que regirán la empresa. En el caso de sociedades, es un requisito obligatorio.
<br><br> Determinar el capital social mínimo, si aplica (por ejemplo, para sociedades limitadas y anónimas).<br><br>
<br>Abrir una cuenta bancaria a nombre de la empresa y depositar el capital social.
<br><br>
<br>Solicitar el NIF ante la Agencia Tributaria.
<br><br>
<br>Elaborar la escritura de constitución de la empresa, que incluirá los estatutos y demás detalles relevantes.
<br><br>
<br>Presentar el modelo 600 ante la Administración Tributaria de la comunidad autónoma correspondiente.
<br><br>
<br>Registrar la escritura de constitución y demás documentos en el Registro Mercantil de la provincia donde tenga su domicilio la empresa.
<br><br>
<br>Realizar el alta en la Agencia Tributaria y en la Seguridad Social para la liquidación de impuestos y cotizaciones sociales.
<br><br>
<br>Obtener las licencias y autorizaciones necesarias para el desarrollo de la actividad económica.
<br><br>
<br>Legalizar y llevar los libros oficiales requeridos por la normativa mercantil.
<br><br>
<br>En el caso de autónomos, darse de alta en el RETA y realizar los trámites correspondientes.
<br><br>
<br>Cada vez más, los trámites de constitución se pueden realizar telemáticamente a través de plataformas en línea, simplificando el proceso y agilizando los tiempos.
<br><br>
<br>Contar con el asesoramiento de profesionales (abogados, gestores, asesores fiscales) para asegurar la correcta realización de todos los trámites y el cumplimiento de la normativa vigente.
]]></description><link>empresa-e-iniciativa-empredora\guía-para-la-constitución-de-una-empresa-pasos-y-requisitos.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/Guía para la Constitución de una Empresa - Pasos y Requisitos.md</guid><pubDate>Fri, 12 Jan 2024 17:30:48 GMT</pubDate></item><item><title><![CDATA[Político Cambios en una escuela]]></title><description><![CDATA[ 
 <br>En España, la política educativa enfrenta desacuerdos crónicos debido a la resistencia al cambio en el sector público, la descentralización política, la polarización partidista y la falta de consenso en torno a modelos educativos, lo que dificulta la implementación de políticas a largo plazo.<br>Financiamiento y apoyo gubernamental,<br>
regulaciones cambiantes, financiamiento inconstante y presiones políticas y sindicales. Inversión en infraestructura educativa, la reducción de la ratio alumno-profesor, la formación profesional para docentes y la promoción de la inclusión<br>Cambios frecuentes en las regulaciones educativas, licencias y normativas gubernamentale<br>Demanda y costos: La demanda de servicios de educación infantil en España puede variar según la ubicación geográfica y la disponibilidad de servicios públicos. Además, los costos asociados a la educación infantil, como las cuotas escolares, pueden ser un desafío para algunas familias y afectar la demanda de servicios privados.<br>Oferta pública de educación infantil: La disponibilidad y la calidad de la educación infantil pública en España pueden competir con las empresas privadas. En algunas áreas, la oferta pública puede ser muy robusta y gratuita, lo que puede afectar la demanda de servicios privados.<br>Tendencias pedagógicas: Las tendencias en la pedagogía y la educación infantil pueden influir en la forma en que las escuelas infantiles diseñan sus programas y enfoques de enseñanza. Mantenerse actualizado con las tendencias educativas puede ser importante para el éxito empresarial.<br>Estabilidad económica y política: La estabilidad económica y política en España puede tener un impacto en la confianza de los inversores y emprendedores para invertir en el sector de la educación infantil.<br>Expectativas de los padres: Las expectativas de los padres con respecto a la educación de sus hijos pueden variar según la región y la cultura. Comprender y satisfacer estas expectativas es esencial para el éxito de una escuela infantil.<br><a data-tooltip-position="top" aria-label="https://elobservatoriosocial.fundacionlacaixa.org/-/la-situacion-en-espana-inf-educacion" rel="noopener nofollow" class="external-link" href="https://elobservatoriosocial.fundacionlacaixa.org/-/la-situacion-en-espana-inf-educacion" target="_blank">La situación en España (fundacionlacaixa.org)</a>]]></description><link>empresa-e-iniciativa-empredora\político-cambios-en-una-escuela.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/Político Cambios en una escuela.md</guid><pubDate>Wed, 04 Oct 2023 09:19:40 GMT</pubDate></item><item><title><![CDATA[Tipos de Empresas y su Fiscalidad]]></title><description><![CDATA[ 
 <br><br><br>
<br>Características:

<br>Único propietario.
<br>Responsabilidad ilimitada.
<br>No existe separación entre el patrimonio personal y empresarial.


<br>Ventajas:

<br>Facilidad en la constitución.
<br>Control directo del negocio.


<br>Desventajas:

<br>Responsabilidad ilimitada.
<br>Menor capacidad para atraer inversores.


<br><br>
<br>Características:

<br>Capital social dividido en participaciones.
<br>Responsabilidad limitada al capital aportado.
<br>Mayor complejidad en su constitución.


<br>Ventajas:

<br>Limitación de la responsabilidad.
<br>Atractiva para inversores.


<br>Desventajas:

<br>Mayor complejidad en la administración.
<br>Requiere un capital social mínimo.


<br><br>
<br>Características:

<br>Capital social dividido en acciones.
<br>Responsabilidad limitada al capital aportado.
<br>Mayor regulación y requisitos que la SL.


<br>Ventajas:

<br>Mayor capacidad para captar inversiones públicas.
<br>Transmisión de acciones más sencilla.


<br>Desventajas:

<br>Mayor complejidad administrativa.
<br>Exige un capital social mínimo más elevado.


<br><br>
<br>Características:

<br>Variante de la SL con simplificaciones para emprendedores.
<br>Menos requisitos de capital.


<br>Ventajas:

<br>Menor capital social requerido.
<br>Procedimientos simplificados.


<br>Desventajas:

<br>Restricciones en términos de capital y actividad.


<br><br><br>
<br>Autónomos:

<br>Tributan por sus ingresos personales.
<br>Deducciones por gastos relacionados con la actividad.


<br><br>
<br>Sociedades:

<br>Grava los beneficios empresariales.
<br>Tipo impositivo estándar y reducido para nuevas empresas.


<br><br>
<br>Autónomos y Sociedades:

<br>Grava las operaciones económicas.
<br>Tipos impositivos generales y reducidos.


<br><br>
<br>Autónomos y Sociedades:

<br>Retenciones sobre pagos a terceros.
<br>Pagos a cuenta del IRPF o IS.


<br><br><br>
<br>Incentivos fiscales:

<br>Deducciones por inversión.
<br>Bonificaciones para nuevas empresas.


<br><br>
<br>Documentación:

<br>Llevar libros contables.
<br>Presentar declaraciones fiscales periódicas.


<br><br>
<br>Asesoramiento:

<br>Consultar a profesionales para optimizar la carga fiscal.
<br>Evaluar beneficios fiscales disponibles.


<br><br>
<br>Elección:

<br>Seleccionar la estructura empresarial según necesidades y objetivos.
<br>Evaluar la fiscalidad de manera proactiva.


<br>Asesoramiento Profesional:

<br>Contar con asesoría legal y fiscal.
<br>Actualizarse constantemente sobre cambios normativos.


]]></description><link>empresa-e-iniciativa-empredora\tipos-de-empresas-y-su-fiscalidad.html</link><guid isPermaLink="false">Empresa-e-Iniciativa-Empredora/Tipos de Empresas y su Fiscalidad.md</guid><pubDate>Wed, 19 Feb 2025 09:34:25 GMT</pubDate></item><item><title><![CDATA[Ingles]]></title><description><![CDATA[ 
 <br>Primer Trimestre:<br>
<br><a data-href="Tema 1" href="\ingles\tema-1.html" class="internal-link" target="_self" rel="noopener nofollow">Tema 1</a>
<br><a data-href="Tema 2" href="\ingles\tema-2.html" class="internal-link" target="_self" rel="noopener nofollow">Tema 2</a>
<br>Hay que colocar a las cartas de anki el tag:<br>tema1-PrimerTrimestre]]></description><link>ingles\ingles.html</link><guid isPermaLink="false">Ingles/Ingles.md</guid><pubDate>Wed, 04 Oct 2023 09:19:40 GMT</pubDate></item><item><title><![CDATA[Tema 1]]></title><description><![CDATA[ 
 <br>El temas uno se trata de <br>word procesing-uses o procesador de texto<br>Vocabulary:<br>con estas palabras, traduce y di en que contexto se usa y da un ejemplo: <br>
<br>
Agenda (Español a Inglés): Calendar

<br>Contexto: La palabra "agenda" se usa comúnmente para referirse a un calendario o lista de tareas programadas.
<br>Ejemplo: "I have a busy agenda today with meetings and appointments."


<br>
Blanck (Español a Inglés): Blank

<br>Contexto: "Blanck" parece ser un error tipográfico. La palabra correcta en inglés es "blank," que significa vacío o en blanco.
<br>Ejemplo: "Please fill out the blank spaces on the form."


<br>
Bussines card (Español a Inglés): Business card

<br>Contexto: Una "business card" es una tarjeta de presentación que se utiliza en contextos profesionales para compartir información de contacto.
<br>Ejemplo: "Here's my business card with my phone number and email."


<br>
Calendar (Español a Inglés): Calendario

<br>Contexto: "Calendar" se utiliza para referirse a una herramienta que muestra días, semanas y meses organizados en un formato específico.
<br>Ejemplo: "I mark important dates on my calendar to stay organized."


<br>
Create (Español a Inglés): Crear

<br>Contexto: "Create" significa producir o generar algo nuevo.
<br>Ejemplo: "I want to create a new website for my business."


<br>
Document (Español a Inglés): Documento

<br>Contexto: Un "document" es un archivo o papel que contiene información escrita o registrada.
<br>Ejemplo: "Please send me the document when it's ready."


<br>
Memo (Español a Inglés): Memorando

<br>Contexto: Un "memo" es una comunicación escrita breve utilizada en entornos empresariales para transmitir información de manera concisa.
<br>Ejemplo: "I received a memo about the upcoming staff meeting."


<br>
Report (Español a Inglés): Informe

<br>Contexto: Un "report" es un documento que presenta información detallada sobre un tema específico.
<br>Ejemplo: "I need to submit a report on our quarterly sales performance."


<br>
Resumé (Español a Inglés): Currículum vitae

<br>Contexto: Un "resumé" es un documento que resume la experiencia laboral y educación de una persona, generalmente utilizado en solicitudes de empleo.
<br>Ejemplo: "I'm updating my resumé for job applications."


<br>
Template (Español a Inglés): Plantilla

<br>Contexto: Una "template" es un documento o archivo preestablecido que sirve como punto de partida para crear otros documentos similares.
<br>Ejemplo: "I used a template to create the presentation slides."


<br>
Word processing (Español a Inglés): Procesamiento de texto

<br>Contexto: "Word processing" se refiere al uso de software para crear, editar y formatear documentos de texto.
<br>Ejemplo: "Microsoft Word is a popular tool for word processing tasks."


<br>Expressing a lack of knowledge]]></description><link>ingles\tema-1.html</link><guid isPermaLink="false">Ingles/Tema 1.md</guid><pubDate>Wed, 04 Oct 2023 09:19:40 GMT</pubDate></item><item><title><![CDATA[Tema 2]]></title><description><![CDATA[ 
 <br>Segundo tema Word procesing actions<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>]]></description><link>ingles\tema-2.html</link><guid isPermaLink="false">Ingles/Tema 2.md</guid><pubDate>Thu, 13 Feb 2025 11:13:08 GMT</pubDate></item><item><title><![CDATA[Casos de uso de Next.js]]></title><description><![CDATA[ 
 <br>
<br>Aplicaciones con SEO optimizado: Blogs, ecommerce, sitios de noticias.
<br>Dashboards y aplicaciones internas: Donde la rapidez es clave y se puede combinar SSR y CSR.
<br>Aplicaciones híbridas: Next.js permite combinar SSR, SSG e ISR según se necesite.
<br>Sitios estáticos con contenido dinámico: Por ejemplo, documentación con datos actualizados mediante ISR.
<br>Plataformas de contenido como redes sociales: Donde se necesita una mezcla entre CSR y SSR.
]]></description><link>next.js\casos-de-uso-de-next.js.html</link><guid isPermaLink="false">Next.js/Casos de uso de Next.js.md</guid><pubDate>Thu, 13 Feb 2025 11:53:01 GMT</pubDate></item><item><title><![CDATA[Casos de uso y mejores prácticas en Next.js]]></title><description><![CDATA[ 
 ]]></description><link>next.js\casos-de-uso-y-mejores-prácticas-en-next.js.html</link><guid isPermaLink="false">Next.js/Casos de uso y mejores prácticas en Next.js.md</guid><pubDate>Thu, 13 Feb 2025 11:54:53 GMT</pubDate></item><item><title><![CDATA[Comparación entre Next.js 14 y 15]]></title><description><![CDATA[ 
 <br>
<br>Next.js 15 sigue evolucionando el modelo de rutas introducido en Next.js 14.
<br>Se han optimizado las capacidades de SSR y SSG en comparación con la versión anterior.
<br>Mayor enfoque en rendimiento y compatibilidad con las últimas versiones de React.
]]></description><link>next.js\comparación-entre-next.js-14-y-15.html</link><guid isPermaLink="false">Next.js/Comparación entre Next.js 14 y 15.md</guid><pubDate>Thu, 13 Feb 2025 11:56:18 GMT</pubDate></item><item><title><![CDATA[Comparación entre Next.js y React puro]]></title><description><![CDATA[ 
 <br>]]></description><link>next.js\comparación-entre-next.js-y-react-puro.html</link><guid isPermaLink="false">Next.js/Comparación entre Next.js y React puro.md</guid><pubDate>Thu, 13 Feb 2025 11:54:41 GMT</pubDate></item><item><title><![CDATA[Indice]]></title><description><![CDATA[ 
 <br>
<br><a data-href="Introducción a Next.js" href="\next.js\introducción-a-next.js.html" class="internal-link" target="_self" rel="noopener nofollow">Introducción a Next.js</a>
<br><a data-href="Ventajas de Next.js sobre React" href="\next.js\ventajas-de-next.js-sobre-react.html" class="internal-link" target="_self" rel="noopener nofollow">Ventajas de Next.js sobre React</a>
<br><a data-href="Casos de uso de Next.js" href="\next.js\casos-de-uso-de-next.js.html" class="internal-link" target="_self" rel="noopener nofollow">Casos de uso de Next.js</a>
<br><a data-href="Novedades en Next.js 14" href="\next.js\novedades-en-next.js-14.html" class="internal-link" target="_self" rel="noopener nofollow">Novedades en Next.js 14</a>

<br><a data-href="App Router y mejoras en la navegación" href="\App Router y mejoras en la navegación" class="internal-link" target="_self" rel="noopener nofollow">App Router y mejoras en la navegación</a>
<br><a data-href="Mejoras en Server Actions" href="\Mejoras en Server Actions" class="internal-link" target="_self" rel="noopener nofollow">Mejoras en Server Actions</a>
<br><a data-href="Optimización del rendimiento en Next.js 14" href="\Optimización del rendimiento en Next.js 14" class="internal-link" target="_self" rel="noopener nofollow">Optimización del rendimiento en Next.js 14</a>


<br><a data-href="Novedades en Next.js 15" href="\next.js\novedades-en-next.js-15.html" class="internal-link" target="_self" rel="noopener nofollow">Novedades en Next.js 15</a>

<br><a data-href="Cambios en el manejo de rutas" href="\Cambios en el manejo de rutas" class="internal-link" target="_self" rel="noopener nofollow">Cambios en el manejo de rutas</a>
<br><a data-href="Avances en SSR y SSG" href="\Avances en SSR y SSG" class="internal-link" target="_self" rel="noopener nofollow">Avances en SSR y SSG</a>
<br><a data-href="Compatibilidad con React Server Components" href="\Compatibilidad con React Server Components" class="internal-link" target="_self" rel="noopener nofollow">Compatibilidad con React Server Components</a>


<br><a data-href="Comparación entre Next.js 14 y 15" href="\next.js\comparación-entre-next.js-14-y-15.html" class="internal-link" target="_self" rel="noopener nofollow">Comparación entre Next.js 14 y 15</a>
<br><a data-href="Casos de uso y mejores prácticas en Next.js" href="\next.js\casos-de-uso-y-mejores-prácticas-en-next.js.html" class="internal-link" target="_self" rel="noopener nofollow">Casos de uso y mejores prácticas en Next.js</a>
<br><a data-href="Comparación entre Next.js y React puro" href="\next.js\comparación-entre-next.js-y-react-puro.html" class="internal-link" target="_self" rel="noopener nofollow">Comparación entre Next.js y React puro</a>
<br><a data-href="Recursos y documentación adicional" href="\next.js\recursos-y-documentación-adicional.html" class="internal-link" target="_self" rel="noopener nofollow">Recursos y documentación adicional</a>
]]></description><link>next.js\indice.html</link><guid isPermaLink="false">Next.js/Indice.md</guid><pubDate>Thu, 13 Feb 2025 11:54:05 GMT</pubDate></item><item><title><![CDATA[Introducción a Next.js]]></title><description><![CDATA[ 
 <br>Next.js es un framework de React creado por Vercel que ofrece características avanzadas para construir aplicaciones modernas. Su mayor ventaja es la posibilidad de elegir entre diferentes estrategias de renderización: Server-Side Rendering (SSR), Static Site Generation (SSG), Client-Side Rendering (CSR) e Incremental Static Regeneration (ISR).]]></description><link>next.js\introducción-a-next.js.html</link><guid isPermaLink="false">Next.js/Introducción a Next.js.md</guid><pubDate>Thu, 13 Feb 2025 11:28:33 GMT</pubDate></item><item><title><![CDATA[Novedades en Next.js 14]]></title><description><![CDATA[ 
 <br>
<br>App Router: Introduce mejoras en la gestión de rutas con el sistema de app/.
<br>Server Actions: Se integran nuevas funcionalidades para mejorar la interactividad en el servidor sin necesidad de API Routes.
<br>Optimización del rendimiento: Mejoras en la rehidratación y carga de componentes.
<br>Mejor soporte para React Server Components (RSC).
]]></description><link>next.js\novedades-en-next.js-14.html</link><guid isPermaLink="false">Next.js/Novedades en Next.js 14.md</guid><pubDate>Thu, 13 Feb 2025 11:55:59 GMT</pubDate></item><item><title><![CDATA[Novedades en Next.js 15]]></title><description><![CDATA[ 
 <br>
<br>Mejoras en la gestión de rutas: Nueva estructura más eficiente.
<br>Optimización de SSR y SSG: Mayor control sobre la renderización en el servidor.
<br>Compatibilidad extendida con React Server Components.
<br>Soporte mejorado para Edge Functions y Middleware.
]]></description><link>next.js\novedades-en-next.js-15.html</link><guid isPermaLink="false">Next.js/Novedades en Next.js 15.md</guid><pubDate>Thu, 13 Feb 2025 11:56:09 GMT</pubDate></item><item><title><![CDATA[Recursos y documentación adicional]]></title><description><![CDATA[ 
 <br>
<br><a data-tooltip-position="top" aria-label="https://nextjs.org/docs" rel="noopener nofollow" class="external-link" href="https://nextjs.org/docs" target="_blank">Documentación oficial de Next.js</a>
<br><a data-tooltip-position="top" aria-label="https://github.com/vercel/next.js" rel="noopener nofollow" class="external-link" href="https://github.com/vercel/next.js" target="_blank">Repositorio en GitHub</a>
<br><a data-tooltip-position="top" aria-label="https://nextjs.org/learn" rel="noopener nofollow" class="external-link" href="https://nextjs.org/learn" target="_blank">Ejemplos y tutoriales</a>
<br><a data-tooltip-position="top" aria-label="https://vercel.com/blog" rel="noopener nofollow" class="external-link" href="https://vercel.com/blog" target="_blank">Blog de Vercel</a>
]]></description><link>next.js\recursos-y-documentación-adicional.html</link><guid isPermaLink="false">Next.js/Recursos y documentación adicional.md</guid><pubDate>Thu, 13 Feb 2025 11:55:13 GMT</pubDate></item><item><title><![CDATA[Ventajas de Next.js sobre React]]></title><description><![CDATA[ 
 <br>
<br>Renderizado en el servidor (SSR): A diferencia de React puro, que solo hace renderizado en el cliente, Next.js puede pre-renderizar páginas en el servidor, mejorando el rendimiento y el SEO.
<br>Static Site Generation (SSG): Permite generar páginas estáticas en el momento de la construcción (build time), lo que mejora la velocidad de carga.
<br>Incremental Static Regeneration (ISR): Genera páginas estáticas con la posibilidad de actualizar solo ciertas partes sin necesidad de hacer un build completo.
<br>API Routes: Permite manejar endpoints dentro de la misma aplicación sin necesidad de un backend adicional.
<br>Mejor rendimiento: Gracias a su optimización automática de imágenes, carga progresiva de JavaScript y otros beneficios.
<br>Soporte para React Server Components (RSC): Ayuda a reducir el tamaño del bundle en el cliente.
<br>Optimización automática: Next.js optimiza el código y la carga de recursos sin intervención manual.
]]></description><link>next.js\ventajas-de-next.js-sobre-react.html</link><guid isPermaLink="false">Next.js/Ventajas de Next.js sobre React.md</guid><pubDate>Thu, 13 Feb 2025 11:52:45 GMT</pubDate></item><item><title><![CDATA[Activiti]]></title><description><![CDATA[ 
 <br> Activiti es un motor de flujo de trabajo y gestión de procesos empresariales (BPM) basado en Java. Si bien está diseñado principalmente para aplicaciones empresariales y entornos de servidor, es posible integrarlo en una aplicación Android para manejar flujos de trabajo y automatización de procesos.<br><br>Para usar Activiti en Android, se deben agregar las dependencias necesarias en el archivo build.gradle:<br>implementation 'org.activiti:activiti-engine:7.1.0.M6'
<br>Dado que Activiti requiere una base de datos, puedes optar por usar una base de datos embebida como H2 o SQLite en Android.<br><br>Para inicializar el motor de Activiti en Android, se puede usar la configuración predeterminada:<br>ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();
<br>Esto cargará la configuración predeterminada de Activiti, asegurando que el motor esté listo para ejecutar flujos de trabajo.<br><br>Un proceso en Activiti se define usando BPMN 2.0. Se puede crear un proceso en un archivo XML:<br>&lt;definitions ...&gt;
    &lt;process id="simpleProcess" name="Simple Process"&gt;
        &lt;startEvent id="start"/&gt;
        &lt;sequenceFlow sourceRef="start" targetRef="end"/&gt;
        &lt;endEvent id="end"/&gt;
    &lt;/process&gt;
&lt;/definitions&gt;
<br>Luego, se despliega el proceso en Android:<br>RepositoryService repositoryService = processEngine.getRepositoryService();
repositoryService.createDeployment()
    .addClasspathResource("simpleProcess.bpmn20.xml")
    .deploy();
<br>Para iniciar una instancia del proceso:<br>RuntimeService runtimeService = processEngine.getRuntimeService();
runtimeService.startProcessInstanceByKey("simpleProcess");
<br><br>
<br>Rendimiento: Activiti está diseñado para servidores, por lo que en dispositivos móviles puede ser pesado. Se recomienda evaluar si su uso es viable.
<br>Persistencia: Android tiene restricciones de almacenamiento y ejecución en segundo plano, lo que puede afectar la persistencia de los procesos.
<br>Seguridad: Asegurar la integridad de los procesos es fundamental, especialmente si se manejan datos sensibles.
]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\activiti.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Activiti.md</guid><pubDate>Sun, 02 Mar 2025 10:20:01 GMT</pubDate></item><item><title><![CDATA[Adapter]]></title><description><![CDATA[ 
 <br>Es el que estrae los datos y dice donde van, que se van usar en el <a data-href="Recicly View" href="\programacion-de-multimedia-y-dispositivos-moviles\recicly-view.html" class="internal-link" target="_self" rel="noopener nofollow">Recicly View</a><br>Para usarlo extendemos de RecyclerView,Adapter &lt; NombreDeLaClaseHolder&gt;<br>Ejemplo:<br>package com.example.estudioandroid.todoapp  
  
import android.view.ViewGroup  
import androidx.recyclerview.widget.RecyclerView  
  
class CategoryAdapter (private val categies:List&lt;TaskCategory&gt;):RecyclerView.Adapter&lt;CatagoryViewholder&gt;(){  
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CatagoryViewholder {  
        TODO("Not yet implemented")  //Crea en viewHolder
    }  

	override fun getItemCount(): Int = categies.size //Retorna el tamaño de la lista
    
    override fun onBindViewHolder(holder: CatagoryViewholder, position: Int) {  
        TODO("Not yet implemented")  //Coloca la informacion en vieHolder Cread
    }  
  
  
}
<br>Antes de crear viewHolder debemos tener el layout del item<br>Por lo que debemos crear un xml con el diseño del ítem que va repetir<br>
override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CatagoryViewholder {  
    val view = LayoutInflater.from(parent.context).inflate(R.layout.item_task_category,parent,false)  
    return CatagoryViewholder(view)  
}  
<br>En este devemos incializar una view que le pasaremos de parametro a nuestro holder para que la pinte<br>Layput Infalte busacr xml con item que allamaos creado como estamos en otro contexto no podemos usar this debemos decir contexto padre y R en debe busacr por id buscamos por layout, entrando en el directorio layout y buscando el nombre que le digmos<br>override fun onBindViewHolder(holder: CatagoryViewholder, position: Int) {  
    holder.render(categories[position])  
}
<br>Este recorre dentro de nuestra lista por detrás y ira pintando con la función render que nosotros creamos en nuestro <a data-href="holder" href="\programacion-de-multimedia-y-dispositivos-moviles\holder.html" class="internal-link" target="_self" rel="noopener nofollow">holder</a>]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\adapter.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Adapter.md</guid><pubDate>Thu, 09 Nov 2023 12:09:46 GMT</pubDate></item><item><title><![CDATA[Aplicación Básica]]></title><description><![CDATA[ 
 <br><br><br>El primer paso es definir los modelos de datos utilizando data classes, que permiten almacenar la información de manera estructurada y eficiente.<br><br>Para el diseño de la interfaz, Google recomienda el uso de ConstraintLayout, ya que permite organizar los elementos de manera flexible y eficiente.<br><br>
<br>Uso de CardView en lugar de ConstraintLayout para resaltar elementos visuales.
<br>Medidas relativas con <a data-href="dp" href="\programacion-de-multimedia-y-dispositivos-moviles\dp.html" class="internal-link" target="_self" rel="noopener nofollow">dp</a> para asegurar compatibilidad con diferentes tamaños de pantalla.
<br>Jerarquía del diseño:

<br>ConstraintLayout como vista padre.
<br>Elementos visuales como <a data-href="ImgView" href="\programacion-de-multimedia-y-dispositivos-moviles\imgview.html" class="internal-link" target="_self" rel="noopener nofollow">ImgView</a> y <a data-href="TextView" href="\TextView" class="internal-link" target="_self" rel="noopener nofollow">TextView</a>.
<br>Definición de tamaños de texto con <a data-href="SP" href="\programacion-de-multimedia-y-dispositivos-moviles\sp.html" class="internal-link" target="_self" rel="noopener nofollow">SP</a>.
<br>Uso de herramientas de diseño como tools:text para visualizar el contenido en Android Studio.


<br><br>Se realiza una petición a la API para obtener los datos que se mostrarán en la aplicación.<br><br>Se utiliza RecyclerView para mostrar listas de datos de manera optimizada y fluida.<br><br>El Adapter es responsable de conectar los datos con la interfaz gráfica, asegurando que los elementos se muestren correctamente en la lista.<br><br>
<br>ViewHolder (VH) Personalizado: Se define una clase interna para optimizar la gestión de vistas.
<br>Uso de <a data-href="inner Clase" href="\programacion-de-multimedia-y-dispositivos-moviles\inner-clase.html" class="internal-link" target="_self" rel="noopener nofollow">inner Clase</a>: Se crea una clase interna dentro del adaptador para manejar las vistas de cada elemento.
<br>Con este flujo, se logra estructurar una aplicación básica en Android de manera eficiente y modular.]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\aplicación-básica.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Aplicación Básica.md</guid><pubDate>Sun, 02 Mar 2025 10:59:07 GMT</pubDate></item><item><title><![CDATA[Arquitectura Limpia]]></title><description><![CDATA[ 
 <br><br>Arquitectura Limpia (Clean Architecture) es un patrón de diseño propuesto por Robert C. Martin (Uncle Bob) que busca organizar el código en capas bien definidas para mejorar la mantenibilidad, escalabilidad y testabilidad de las aplicaciones.<br><br><br>
<br>Separación de responsabilidades → Cada capa tiene un propósito claro.
<br>Independencia de frameworks → La lógica de negocio no depende de detalles de implementación.
<br>Testabilidad → Facilita la escritura de pruebas unitarias y de integración.
<br>Independencia de UI → La lógica de negocio no depende de la interfaz de usuario.
<br>Reglas de dependencia → Las capas internas nunca dependen de las externas.
<br><br><br>La arquitectura se divide en tres capas principales:<br><br>
<br>Contiene la lógica de negocio pura.
<br>Es independiente de frameworks y UI.
<br>Incluye casos de uso (Use Cases) y interfaces de repositorios.
<br>Ejemplo:<br>class ObtenerUsuariosUseCase(private val repositorio: UsuarioRepositorio) {
    fun ejecutar(): List&lt;Usuario&gt; {
        return repositorio.obtenerUsuarios()
    }
}
<br><br>
<br>Maneja la persistencia y acceso a datos.
<br>Implementa los repositorios definidos en la capa de dominio.
<br>Puede incluir fuentes de datos como bases de datos locales (Room) o APIs remotas (Retrofit).
<br>Ejemplo:<br>class UsuarioRepositorioImpl(private val api: UsuarioApi) : UsuarioRepositorio {
    override fun obtenerUsuarios(): List&lt;Usuario&gt; {
        return api.obtenerUsuariosRemotos()
    }
}
<br><br>
<br>Contiene la lógica relacionada con la UI.
<br>Utiliza ViewModel para interactuar con los casos de uso.
<br>Comunica los datos con la interfaz gráfica (Compose, XML).
<br>Ejemplo:<br>class UsuarioViewModel(private val obtenerUsuariosUseCase: ObtenerUsuariosUseCase) : ViewModel() {
    private val _usuarios = MutableLiveData&lt;List&lt;Usuario&gt;&gt;()
    val usuarios: LiveData&lt;List&lt;Usuario&gt;&gt; get() = _usuarios

    fun cargarUsuarios() {
        _usuarios.value = obtenerUsuariosUseCase.ejecutar()
    }
}
<br><br><br>
<br>UI (View / ViewModel) solicita datos a la capa de dominio.
<br>La capa de dominio ejecuta un caso de uso, que accede a la capa de datos.
<br>La capa de datos obtiene la información de una base de datos o API y la devuelve a la capa de dominio.
<br>La capa de dominio retorna los datos procesados a la UI para ser mostrados.
<br><br><br>✅ Código modular y reutilizable ✅ Fácil mantenimiento y escalabilidad ✅ Pruebas unitarias más sencillas ✅ Menor acoplamiento entre capas ✅ Separación clara entre lógica de negocio y UI]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\arquitectura-limpia.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Arquitectura Limpia.md</guid><pubDate>Sun, 02 Mar 2025 11:17:02 GMT</pubDate></item><item><title><![CDATA[CamelCase]]></title><description><![CDATA[ 
 <br><br>CamelCase es una convención de nomenclatura utilizada en programación en la que las palabras dentro de un identificador se escriben sin espacios y cada palabra, excepto la primera en algunos casos, comienza con una letra mayúscula.<br><br>Existen dos variantes principales:<br>
<br>
Lower Camel Case (camelCase):

<br>La primera palabra empieza con minúscula y las siguientes con mayúscula.
<br>Se usa comúnmente para nombres de variables y métodos.

Ejemplo:
var nombreCompleto = "Juan Pérez"
fun obtenerDatosUsuario() {}


<br>
Upper Camel Case (PascalCase):

<br>Todas las palabras comienzan con mayúscula.
<br>Se usa en nombres de clases y tipos de datos.

Ejemplo:
class UsuarioPremium {}
data class ProductoEnStock(val nombre: String, val precio: Double)


<br><br><br>
<br>Legibilidad: Facilita la comprensión del código.
<br>Estandarización: Sigue convenciones adoptadas en múltiples lenguajes de programación.
<br>Evita errores: Reduce la ambigüedad en nombres de variables y funciones.
<br><br><br>
<br>camelCase: Para nombres de variables y funciones.
<br>PascalCase: Para nombres de clases, interfaces y data class.
<br>Ejemplo de código con convenciones correctas:<br>class Persona(val nombreCompleto: String) {
    fun obtenerEdad(): Int {
        return 30
    }
}
<br>]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\camelcase.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/CamelCase.md</guid><pubDate>Sun, 02 Mar 2025 11:04:59 GMT</pubDate></item><item><title><![CDATA[Clase]]></title><description><![CDATA[ 
 <br><br>En Kotlin son paradigma que muestra la construcción de un <a data-href="objeto" href="\acceso-a-datos\objeto.html" class="internal-link" target="_self" rel="noopener nofollow">objeto</a> ya sea nuestro o nativamente<br><br>En java las clases tienen sus <a data-href="Métodos" href="\programacion-de-multimedia-y-dispositivos-moviles\métodos.html" class="internal-link" target="_self" rel="noopener nofollow">Métodos</a> y función constructora en <a data-href="Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Kotlin</a> la función constructora pasa a cambiar su forma de hacerlo en la propia firma de la clase le pasamos los parámetros que usamos en nuestra clase y después definimos nuestros parámetros y usamos un método llamado init():<br>class NombreDeClase (var parametros:String){

	var variableDentroDeClase : String

	init(var parametro:String){
		this.variableDentroDeClase = parametro
	}
	
}


var clase : NombreDeClase = NombreDeClase(parametro)
<br>Como se puede ver se pasa el parámetro en ambos entonces usamos la <a data-href="Variables kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\variables-kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Variables kotlin</a> y init() le da valor a nuestra variable dentro de una nuestra clase<br><br>Se puede generar diferentes "<a data-href="constructores" href="\programacion-de-multimedia-y-dispositivos-moviles\constructores.html" class="internal-link" target="_self" rel="noopener nofollow">constructores</a>" , aquí el como:<br>class NombreDeClase (var parametros:String){

	var variableDentroDeClase : String
	var variable2 : String

	init(var parametro:String){
		this.variableDentroDeClase = parametro
	}

	fun sobreCargar(var p1,var p2){
		super(p1)
		this.variable2 = p2
	}
	
}


var clase : NombreDeClase = NombreDeClase(parametro)
var clase : NombreDeClase = NombreDeClase(parametro,parametro2)
<br>Como se ve al hacer el llamado de init() con super() llama a la función init() y luego sigue con el flujo siempre se diferencia con la firma y el nombre.<br>En <a data-href="kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">kotlin</a> llamamos <a data-href="simple class" href="\programacion-de-multimedia-y-dispositivos-moviles\simple-class.html" class="internal-link" target="_self" rel="noopener nofollow">simple class</a> a una clase normal a todo eso]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\clase.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Clase.md</guid><pubDate>Sun, 02 Mar 2025 11:01:37 GMT</pubDate></item><item><title><![CDATA[Component]]></title><description><![CDATA[ 
 <br>En <a data-href="Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Kotlin</a>, un "componente" generalmente se refiere a una parte de un objeto que puede ser extraída y descompuesta en partes más pequeñas. Esto se logra mediante el uso de la función componentN (donde "N" es un número) que se puede implementar en una clase para permitir la desestructuración de objetos en Kotlin.<br>Un componente se utiliza principalmente en la desestructuración de objetos. Esto significa que puedes dividir un objeto en sus partes componentes y asignar esas partes a variables individuales. Por ejemplo, puedes utilizar componentes para extraer los valores de una clase de datos en variables individuales.<br>Aquí hay un ejemplo simple de cómo funciona:<br>kotlinCopy code:<br>data class Persona(val nombre: String, val edad: Int)

fun main() {
    val persona = Persona("Juan", 30)
    
    val (nombre, edad) = persona // Desestructuración
    
    println("Nombre: $nombre, Edad: $edad")
}

<br>En este ejemplo, nombre y edad son componentes de la clase Persona. La desestructuración se realiza automáticamente gracias a la función component1() y component2() generada automáticamente por Kotlin para la clase Persona.<br>Entonces, en <a data-href="Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Kotlin</a>, un componente se refiere a las partes que componen un objeto que pueden ser desestructuradas y asignadas a <a data-href="Variables kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\variables-kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Variables kotlin</a> individuales de una manera simple y legible. Esta característica es especialmente útil cuando trabajas con estructuras de datos o <a data-href="Clase" href="\programacion-de-multimedia-y-dispositivos-moviles\clase.html" class="internal-link" target="_self" rel="noopener nofollow">Clase</a> de datos.]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\component.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Component.md</guid><pubDate>Sun, 02 Mar 2025 11:08:04 GMT</pubDate></item><item><title><![CDATA[ConstraintLayout]]></title><description><![CDATA[ 
 <br><br>ConstraintLayout es un tipo de diseño flexible y optimizado en Android que permite posicionar y dimensionar vistas de manera eficiente mediante restricciones (constraints). Es recomendado para crear interfaces complejas sin necesidad de anidar múltiples LinearLayout o RelativeLayout, mejorando el rendimiento de la aplicación.<br><br>
<br>Optimización del rendimiento: Reduce la cantidad de vistas anidadas, mejorando la velocidad de renderizado.
<br>Flexibilidad: Permite colocar elementos con restricciones relativas a otras vistas o al contenedor.
<br>Compatibilidad con herramientas visuales: Integración con el Editor de Diseño de Android Studio para una construcción visual más intuitiva.
<br>Adaptabilidad: Facilita la creación de diseños responsivos para diferentes tamaños de pantalla.
<br><br>Las restricciones (constraints) permiten definir la relación entre una vista y otros elementos en la interfaz. Algunas de las más utilizadas son:<br>
<br>app:layout_constraintStart_toStartOf → Alinear al borde izquierdo de otra vista.
<br>app:layout_constraintEnd_toEndOf → Alinear al borde derecho de otra vista.
<br>app:layout_constraintTop_toTopOf → Alinear al borde superior de otra vista.
<br>app:layout_constraintBottom_toBottomOf → Alinear al borde inferior de otra vista.
<br>app:layout_constraintBaseline_toBaselineOf → Alinear con la línea base de otra vista (útil para texto).
<br><br>&lt;androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"&gt;

    &lt;TextView
        android:id="@+id/textView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Hola, ConstraintLayout!"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" /&gt;

&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;
<br><br>
<br>Chains (Cadenas): Permiten distribuir vistas equitativamente en una dirección (horizontal o vertical).
<br>Guidelines (Guías): Ayudan a alinear elementos sin necesidad de otra vista de referencia.
<br>Bias (Desplazamiento porcentual): Permite mover una vista dentro de sus restricciones con un porcentaje (layout_constraintHorizontal_bias).
]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\constraintlayout.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/ConstraintLayout.md</guid><pubDate>Sun, 02 Mar 2025 10:57:21 GMT</pubDate></item><item><title><![CDATA[constructores]]></title><description><![CDATA[ 
 <br><br>En <a data-href="Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Kotlin</a>, un constructor es una función especial utilizada para inicializar objetos de una clase. Existen dos tipos principales de constructores:<br>
<br>Constructor Primario: Se define directamente en la declaración de la clase.
<br>Constructor Secundario: Se define dentro del cuerpo de la clase para proporcionar inicializaciones adicionales.
<br><br><br>El constructor primario se declara en la cabecera de la clase y permite inicializar propiedades sin necesidad de bloques adicionales.<br>class Persona(val nombre: String, val edad: Int)
<br><br>val persona = Persona("Juan", 25)
println("Nombre: ${persona.nombre}, Edad: ${persona.edad}")
<br>Salida:<br>Nombre: Juan, Edad: 25
<br>Si es necesario realizar inicializaciones adicionales, se puede usar el bloque init:<br>class Usuario(val nombre: String, val email: String) {
    init {
        println("Usuario creado: $nombre con email $email")
    }
}
<br><br><br>Los constructores secundarios permiten definir múltiples formas de inicializar un objeto.<br>class Estudiante {
    var nombre: String
    var edad: Int

    constructor(nombre: String) {
        this.nombre = nombre
        this.edad = 18 // Valor por defecto
    }

    constructor(nombre: String, edad: Int) {
        this.nombre = nombre
        this.edad = edad
    }
}
<br><br>val estudiante1 = Estudiante("Carlos")
val estudiante2 = Estudiante("Ana", 22)
<br><br><br>]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\constructores.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/constructores.md</guid><pubDate>Sun, 02 Mar 2025 11:01:07 GMT</pubDate></item><item><title><![CDATA[Corrutinas (hilos kotlin)]]></title><description><![CDATA[ 
 <br><br>Las corrutinas en <a data-href="Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Kotlin</a> son una forma eficiente de manejar tareas asíncronas sin bloquear el hilo principal. Se utilizan para ejecutar operaciones de larga duración, como llamadas a API, acceso a bases de datos y procesamiento de datos pesados.<br><br><br>Para utilizar corrutinas en Android, es necesario agregar las dependencias en build.gradle:<br>dependencies {
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"
}
<br><br><br><br>Se utiliza cuando no se necesita un valor de retorno:<br>import kotlinx.coroutines.*

fun main() {
    GlobalScope.launch {
        delay(1000L)
        println("Corrutina ejecutada después de 1 segundo")
    }
    println("Hilo principal sigue ejecutándose")
    Thread.sleep(2000L) // Espera suficiente para ver la salida
}
<br><br>Se usa cuando se requiere obtener un resultado:<br>fun main() = runBlocking {
    val resultado = async {
        delay(1000L)
        "Resultado obtenido"
    }
    println(resultado.await()) // Espera y obtiene el resultado
}
<br><br><br>En Android, las corrutinas deben ejecutarse en un ViewModel dentro de viewModelScope para que se cancelen automáticamente cuando el ViewModel se destruye:<br>import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.launch

class MiViewModel : ViewModel() {
    fun cargarDatos() {
        viewModelScope.launch {
            val datos = obtenerDatos()
            println(datos)
        }
    }

    private suspend fun obtenerDatos(): String {
        delay(2000L) // Simula una tarea de larga duración
        return "Datos cargados"
    }
}
<br><br><br>withContext permite cambiar de un hilo a otro dentro de una corrutina:<br>import kotlinx.coroutines.*

suspend fun cargarDatos(): String {
    return withContext(Dispatchers.IO) { // Cambia a un hilo de fondo
        delay(2000L)
        "Datos obtenidos"
    }
}
<br><br><br>Se pueden capturar errores usando try-catch:<br>viewModelScope.launch {
    try {
        val resultado = obtenerDatos()
        println(resultado)
    } catch (e: Exception) {
        println("Error: ${e.message}")
    }
}
<br><br><br>Para emitir múltiples valores de forma asíncrona, se usa Flow:<br>import kotlinx.coroutines.flow.*

fun obtenerNumeros(): Flow&lt;Int&gt; = flow {
    for (i in 1..5) {
        delay(1000L)
        emit(i)
    }
}

fun main() = runBlocking {
    obtenerNumeros().collect { println("Número recibido: $it") }
}
]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\corrutinas-(hilos-kotlin).html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Corrutinas (hilos kotlin).md</guid><pubDate>Sun, 02 Mar 2025 11:21:36 GMT</pubDate></item><item><title><![CDATA[DataClass]]></title><description><![CDATA[ 
 <br><br>En Kotlin, una data class es una clase especializada utilizada para almacenar datos de manera eficiente. Se diferencia de las clases tradicionales porque proporciona automáticamente funcionalidades como:<br>
<br>equals() y hashCode() para comparación de objetos.
<br>toString() para representación en texto.
<br>copy() para clonar objetos con modificaciones.
<br>componentN() para descomposición en variables.
<br><br>Para definir una data class, se usa la palabra clave data antes de class:<br>data class Usuario(val nombre: String, val edad: Int)
<br><br><br>val usuario = Usuario("Juan", 25)
println(usuario) // Salida: Usuario(nombre=Juan, edad=25)
<br><br>val usuario1 = Usuario("Ana", 30)
val usuario2 = Usuario("Ana", 30)
println(usuario1 == usuario2) // Salida: true (comparación de contenido, no de referencia)
<br><br>val usuarioOriginal = Usuario("Luis", 40)
val usuarioModificado = usuarioOriginal.copy(edad = 45)
println(usuarioModificado) // Salida: Usuario(nombre=Luis, edad=45)
<br><br>val (nombre, edad) = usuario
println("Nombre: $nombre, Edad: $edad") // Salida: Nombre: Juan, Edad: 25
<br><br>
<br>Debe tener al menos un parámetro en el constructor primario.
<br>Todos los parámetros deben declararse como val o var.
<br>No puede ser open, abstract, sealed o inner.
]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\dataclass.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/DataClass.md</guid><pubDate>Sun, 02 Mar 2025 10:55:14 GMT</pubDate></item><item><title><![CDATA[dp]]></title><description><![CDATA[ 
 <br>Unidad de Medida "dp" en Android<br>En el desarrollo de aplicaciones para Android, "dp" (density-independent pixels o píxeles independientes de densidad) es una unidad de medida utilizada para definir dimensiones de interfaz de usuario de manera consistente en diferentes dispositivos con diversas densidades de pantalla.<br><br>El "dp" es una unidad de medida basada en la densidad de píxeles de la pantalla del dispositivo. Se introdujo para garantizar que los elementos de la interfaz mantengan un tamaño visualmente consistente, independientemente del tamaño y resolución de la pantalla.<br><br>La conversión entre dp y píxeles reales depende de la densidad de la pantalla del dispositivo. Se calcula con la siguiente fórmula:<br>px = dp * (dpi / 160)
<br>Donde:<br>
<br>px es el tamaño en píxeles reales.
<br>dp es el tamaño en píxeles independientes de densidad.
<br>dpi es la densidad de la pantalla en puntos por pulgada.
<br>160 es la densidad base (mdpi).
<br>Ejemplo: Si un dispositivo tiene una densidad de 320 dpi (xhdpi), un elemento de 100 dp se renderizará como:<br>100 dp * (320 / 160) = 200 px
<br><br>Android clasifica las densidades de pantalla en varias categorías:<br>
<br>ldpi (Low Density, ~120 dpi)
<br>mdpi (Medium Density, ~160 dpi) → Base de referencia
<br>hdpi (High Density, ~240 dpi)
<br>xhdpi (Extra High Density, ~320 dpi)
<br>xxhdpi (Extra Extra High Density, ~480 dpi)
<br>xxxhdpi (Extra Extra Extra High Density, ~640 dpi)
<br>El uso de "dp" permite que las dimensiones de la interfaz escalen adecuadamente en cada densidad de pantalla sin necesidad de definir tamaños específicos en píxeles.<br><br>Cuando se define un tamaño en XML usando dp, se hace de la siguiente manera:<br>&lt;TextView
    android:layout_width="200dp"
    android:layout_height="50dp"
    android:text="Ejemplo DP" /&gt;
<br>Este elemento tendrá un tamaño coherente en diferentes dispositivos.<br><br>]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\dp.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/dp.md</guid><pubDate>Sun, 02 Mar 2025 10:19:03 GMT</pubDate></item><item><title><![CDATA[Flow]]></title><description><![CDATA[ 
 <br><br>Flow es una API de <a data-href="Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Kotlin</a> que permite manejar flujos de datos asíncronos de manera eficiente y reactiva. Es una evolución de las corrutinas para gestionar múltiples valores de manera secuencial y optimizada.<br><br><br>Flow es útil cuando necesitamos recibir múltiples valores a lo largo del tiempo, como:<br>
<br>Datos en tiempo real desde una base de datos.
<br>Actualizaciones periódicas (sensores, GPS, WebSockets).
<br>Streams de datos en segundo plano.
<br><br><br><br><br>Un Flow se define usando la función flow {} y emit() para enviar datos:<br>import kotlinx.coroutines.flow.*
import kotlinx.coroutines.*

fun obtenerNumeros(): Flow&lt;Int&gt; = flow {
    for (i in 1..5) {
        delay(1000L) // Simula un proceso asíncrono
        emit(i) // Emite valores uno por uno
    }
}
<br><br><br>Para recibir los datos emitidos por el Flow, usamos collect() dentro de una corrutina:<br>fun main() = runBlocking {
    obtenerNumeros().collect { numero -&gt;
        println("Número recibido: $numero")
    }
}
<br>Salida esperada:<br>Número recibido: 1
Número recibido: 2
Número recibido: 3
Número recibido: 4
Número recibido: 5
<br><br><br>Flow permite operaciones intermedias para modificar datos antes de ser emitidos.<br><br>val numerosCuadrados = obtenerNumeros().map { it * it }
<br><br>val soloPares = obtenerNumeros().filter { it % 2 == 0 }
<br><br>El buffer() permite ejecutar el Flow de manera más eficiente sin bloquear el collect().<br>val flujoRapido = obtenerNumeros().buffer()
<br><br>fun main() = runBlocking {
    obtenerNumeros()
        .filter { it % 2 == 0 }
        .map { "Número procesado: $it" }
        .collect { println(it) }
}
<br>Salida:<br>Número procesado: 2
Número procesado: 4
<br><br><br>Se usa StateFlow o SharedFlow en un ViewModel para manejar datos de forma reactiva.<br>class UsuarioViewModel : ViewModel() {
    private val _usuarios = MutableStateFlow&lt;List&lt;String&gt;&gt;(emptyList())
    val usuarios: StateFlow&lt;List&lt;String&gt;&gt; get() = _usuarios

    fun cargarUsuarios() {
        viewModelScope.launch {
            val datos = listOf("Juan", "Ana", "Carlos")
            _usuarios.value = datos
        }
    }
}
<br>Y en la Activity o Fragment:<br>usuarioViewModel.usuarios.collect { lista -&gt;
    println("Usuarios recibidos: $lista")
}
]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\flow.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Flow.md</guid><pubDate>Sun, 02 Mar 2025 11:32:52 GMT</pubDate></item><item><title><![CDATA[holder]]></title><description><![CDATA[ 
 <br>Es el que le dice al <a data-href="Recicly View" href="\programacion-de-multimedia-y-dispositivos-moviles\recicly-view.html" class="internal-link" target="_self" rel="noopener nofollow">Recicly View</a> como pintar los elementos<br>Generalmente hacemos que herede de ReciclerView.ViewHolder(Vista) , quedando de la siguiente manera:<br>package com.example.estudioandroid.todoapp  
  
import android.view.View  
import androidx.recyclerview.widget.RecyclerView  
  
class CatagoryViewholder (view:View): RecyclerView.ViewHolder(view){  
  
  
}
<br>Dentro holder creamos una función que normalmente se llama render() y que recibe nuestra clase creada <a data-href="SealedClass" href="\SealedClass" class="internal-link" target="_self" rel="noopener nofollow">SealedClass</a> .]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\holder.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/holder.md</guid><pubDate>Sun, 02 Mar 2025 10:21:01 GMT</pubDate></item><item><title><![CDATA[ImgView]]></title><description><![CDATA[ 
 <br><br>ImageView es un componente de la interfaz de usuario en Android que permite mostrar imágenes en la pantalla de la aplicación. Se puede utilizar para mostrar imágenes desde los recursos de la aplicación o cargar imágenes dinámicamente desde la web o almacenamiento interno.<br><br>Para agregar un ImageView en el archivo de diseño XML, se puede definir de la siguiente manera:<br>&lt;ImageView
    android:id="@+id/imagenEjemplo"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:src="@drawable/imagen" /&gt;
<br><br>
<br>android:src → Define la imagen que se mostrará en ImageView.
<br>android:scaleType → Controla cómo la imagen se ajusta dentro del ImageView.
<br>android:adjustViewBounds → Permite ajustar los límites de la imagen según su relación de aspecto.
<br><br>También se puede modificar la imagen de un ImageView en código Kotlin:<br>val imageView: ImageView = findViewById(R.id.imagenEjemplo)
imageView.setImageResource(R.drawable.nueva_imagen)
<br><br>scaleType define cómo la imagen se ajusta dentro del ImageView. Algunos valores comunes son:<br><br><br>Para cargar imágenes desde una URL, se pueden utilizar bibliotecas como Glide o Picasso:<br><br>Glide.with(this)
    .load("https://ejemplo.com/imagen.jpg")
    .into(imageView)
<br><br>Picasso.get()
    .load("https://ejemplo.com/imagen.jpg")
    .into(imageView)
]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\imgview.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/ImgView.md</guid><pubDate>Sun, 02 Mar 2025 10:58:09 GMT</pubDate></item><item><title><![CDATA[Init]]></title><description><![CDATA[ 
 <br>En <a data-href="Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Kotlin</a>, init() es un bloque de inicialización primario que se utiliza para ejecutar código de inicialización cuando se crea una instancia de una clase. Es un componente opcional de una clase y se coloca dentro del cuerpo de la clase, generalmente después de la declaración de las propiedades de la clase. El bloque init() se ejecuta inmediatamente después de que se ha llamado al constructor primario de la clase.<br>Puedes usar init() para realizar cualquier tipo de inicialización necesaria para una instancia de la clase. Esto es especialmente útil cuando necesitas realizar cálculos o configuraciones adicionales antes de que el objeto esté listo para su uso. Aquí tienes un ejemplo de cómo se utiliza init():<br>class MiClase(nombre: String, edad: Int) {
    val nombre: String
    val edad: Int
    
    init {
        // Código de inicialización que se ejecuta cuando se crea una instancia de la clase
        this.nombre = nombre
        this.edad = edad
    }
    
    fun mostrarInformacion() {
        println("Nombre: $nombre, Edad: $edad")
    }
}

<br>En este ejemplo, la clase MiClase tiene dos propiedades: nombre y edad. El bloque init() se utiliza para inicializar estas propiedades cuando se crea una instancia de la clase. Cuando se llama al constructor primario, el código dentro de init() se ejecuta y establece los valores de las propiedades.<br>Puedes usar init() para realizar cualquier tarea de inicialización que necesites, como la validación de datos, la asignación de valores predeterminados, la configuración de conexiones a bases de datos u otras operaciones personalizadas.<br>Además del bloque init(), en <a data-href="Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Kotlin</a> también puedes tener varios constructores secundarios que te permiten proporcionar diferentes formas de inicializar un objeto de clase. Los constructores secundarios también pueden utilizar <a data-href="init" href="\programacion-de-multimedia-y-dispositivos-moviles\init.html" class="internal-link" target="_self" rel="noopener nofollow">init</a>() para realizar tareas de inicialización adicionales, además de las realizadas en el constructor primario. Esto proporciona flexibilidad en la forma en que se pueden crear objetos de una clase y permite una variedad de opciones de inicialización.<br>class MiClase(nombre: String, edad: Int) {
    val nombre: String
    val edad: Int
    
    init {
	        // Código de inicialización que se ejecuta cuando se crea una instancia de la clase
        this.nombre = nombre
        this.edad = edad
    }
	
    
    fun mostrarInformacion() {
        println("Nombre: $nombre, Edad: $edad")
    }
}

]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\init.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Init.md</guid><pubDate>Sun, 02 Mar 2025 10:25:31 GMT</pubDate></item><item><title><![CDATA[inner Clase]]></title><description><![CDATA[ 
 <br><br>En <a data-href="Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Kotlin</a>, una inner class (clase interna) es una clase anidada dentro de otra clase que puede acceder a los miembros de la clase externa. Se declara usando la palabra clave inner y permite una relación más estrecha entre ambas clases.<br><br>Para definir una inner class, se usa la palabra clave inner antes de class:<br>class Externa(val mensaje: String) {
    inner class Interna {
        fun mostrarMensaje() {
            println("Mensaje desde la clase interna: $mensaje")
        }
    }
}
<br><br>Para instanciar una inner class, es necesario crear primero una instancia de la clase externa:<br>fun main() {
    val externa = Externa("Hola desde la clase externa")
    val interna = externa.Interna()
    interna.mostrarMensaje()
}
<br>Salida:<br>Mensaje desde la clase interna: Hola desde la clase externa
<br><br>En Kotlin, existen nested classes (clases anidadas) y inner classes (clases internas). La diferencia principal es que:<br>
<br>Nested Class: Es estática por defecto y no puede acceder a los miembros de la clase externa.
<br>Inner Class: Usa inner y sí puede acceder a los miembros de la clase externa.
<br>Ejemplo de una Nested Class:<br>class Externa {
    class Anidada {
        fun mensaje() = "Soy una clase anidada"
    }
}

fun main() {
    val anidada = Externa.Anidada()
    println(anidada.mensaje())
}
<br><br>Se recomienda usar inner class cuando:<br>
<br>La clase interna necesita acceder a los atributos o métodos de la clase externa.
<br>Se desea encapsular una funcionalidad relacionada dentro de la clase principal.
<br>Se busca mejorar la organización y modularidad del código.
]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\inner-clase.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/inner Clase.md</guid><pubDate>Sun, 02 Mar 2025 10:58:55 GMT</pubDate></item><item><title><![CDATA[Java vs Kotlin]]></title><description><![CDATA[ 
 <br><br><br>Java y <a data-href="Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Kotlin</a> son dos lenguajes de programación utilizados en el desarrollo de aplicaciones Android. Java ha sido el lenguaje predominante durante años, mientras que Kotlin ha ganado popularidad debido a sus características modernas y su sintaxis más concisa. Ambos lenguajes tienen sus ventajas y desventajas, y la elección entre ellos dependerá del contexto del proyecto y las preferencias del desarrollador.<br><br>Java fue desarrollado por Sun Microsystems en la década de 1990 y se convirtió en uno de los lenguajes más utilizados a nivel mundial. Kotlin, en cambio, fue creado por JetBrains y anunciado en 2011, siendo adoptado oficialmente por Google como un lenguaje de primera clase para Android en 2017.<br><br>Una de las mayores ventajas de Kotlin es su interoperabilidad con Java. Esto significa que se pueden usar ambas tecnologías en un mismo proyecto sin problemas, lo que facilita la migración de código y el uso de bibliotecas escritas en Java dentro de Kotlin.<br><br>Kotlin se caracteriza por su sintaxis más concisa y expresiva en comparación con Java. Reduce la cantidad de código repetitivo y mejora la legibilidad. Por ejemplo:<br>Kotlin:<br>val nombre = "Juan"
println("Hola, $nombre!")
<br>Java:<br>String nombre = "Juan";
System.out.println("Hola, " + nombre + "!");
<br><br>En Java, las referencias pueden ser nulas, lo que puede llevar a errores comunes como NullPointerException. Kotlin introduce un sistema de tipos seguro que diferencia entre variables que pueden ser nulas y aquellas que no:<br>Kotlin:<br>var cadena: String? = null
val longitud = cadena?.length // Uso del operador seguro '?'
<br>Java:<br>String cadena = null;
int longitud = (cadena != null) ? cadena.length() : 0; // Evitar NullPointerException
<br><br>Kotlin permite agregar funciones a clases existentes sin necesidad de modificar su código fuente, algo que en Java solo se puede lograr mediante herencia o utilidades externas.<br>Kotlin:<br>fun String.reverso(): String {
    return this.reversed()
}

val palabra = "kotlin"
println(palabra.reverso()) // Salida: "niltok"
<br>En Java, este tipo de funcionalidad requiere crear una clase de utilidad externa.<br><br>Kotlin admite la inferencia de tipos, lo que significa que el compilador puede determinar automáticamente el tipo de una variable sin que el programador lo especifique explícitamente.<br>Kotlin:<br>val numero = 42 // El compilador infiere que es de tipo Int
<br>Java:<br>int numero = 42;
<br><br>Kotlin tiene una sintaxis más limpia y expresiva para trabajar con lambdas y funciones de orden superior, mientras que en Java, aunque soporta estas características desde Java 8, su sintaxis sigue siendo más verbosa.<br>Kotlin:<br>val numeros = listOf(1, 2, 3, 4, 5)
val cuadrados = numeros.map { it * it }
<br>Java:<br>List&lt;Integer&gt; numeros = Arrays.asList(1, 2, 3, 4, 5);
List&lt;Integer&gt; cuadrados = numeros.stream()
    .map(numero -&gt; numero * numero)
    .collect(Collectors.toList());
<br><br>Java ha sido el lenguaje principal para Android desde sus inicios, pero con el tiempo, Kotlin ha ganado terreno debido a su mayor eficiencia y el respaldo de Google. Actualmente, Android Studio tiene soporte nativo para Kotlin y muchas bibliotecas modernas están optimizadas para este lenguaje.]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\java-vs-kotlin.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Java vs Kotlin.md</guid><pubDate>Sun, 02 Mar 2025 10:31:41 GMT</pubDate></item><item><title><![CDATA[Jerarquía De Carpetas]]></title><description><![CDATA[ 
 <br><br><br>Cuando se abre un proyecto en Android Studio, es posible visualizar su estructura de dos maneras:<br>
<br>Vista Android: Muestra una organización simplificada del proyecto.
<br>Vista Project: Muestra la estructura completa con todos los archivos y directorios, lo que puede resultar más complejo.
<br><br>Un proyecto en Android Studio se organiza en tres carpetas principales:<br><br>Esta carpeta contiene el archivo AndroidManifest.xml, donde se definen:<br>
<br>Actividades (&lt;activity&gt;)
<br>Permisos (&lt;uses-permission&gt;)
<br>Servicios
<br>Estilos y configuraciones globales de la aplicación
<br><br>Aquí se encuentran las clases de la aplicación, incluyendo:<br>
<br>Actividades (Activity)
<br>Fragmentos (Fragment)
<br>Clases auxiliares y controladores de lógica de negocio
<br>Pruebas unitarias (en test y androidTest)
<br><br>Contiene todos los elementos gráficos y de diseño de la aplicación:<br>
<br>drawable/ → Iconos e imágenes.
<br>layout/ → Archivos XML que definen la estructura de la interfaz de usuario.
<br>mipmap/ → Iconos de la aplicación en diferentes resoluciones.
<br>values/ → Archivos XML con cadenas de texto (strings.xml), colores, estilos y dimensiones reutilizables.

<br>themes.xml → Define los estilos visuales de la aplicación.


]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\jerarquía-de-carpetas.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Jerarquía De Carpetas.md</guid><pubDate>Sun, 02 Mar 2025 10:32:59 GMT</pubDate></item><item><title><![CDATA[JetPack Compose]]></title><description><![CDATA[ 
 <br><br>Jetpack Compose es un moderno sistema de creación de interfaces de usuario declarativas para Android. Simplifica el desarrollo de interfaces al permitir que los desarrolladores definan la apariencia y el comportamiento de la UI utilizando un enfoque basado en funciones y estados.<br>A diferencia del enfoque imperativo tradicional basado en XML y Views, Jetpack Compose sigue el paradigma declarativo, donde la UI se describe en función del estado actual de la aplicación y se actualiza automáticamente cuando dicho estado cambia.<br><br>Jetpack Compose se compone de varias partes fundamentales:<br><br>Es la parte inmutable de Compose, encargada de interpretar el código y generar los elementos visuales en pantalla. Se integra con el sistema de Android para optimizar la renderización y mejorar el rendimiento de la interfaz de usuario.<br><br>Aquí es donde el desarrollador define la apariencia y estructura de la UI utilizando funciones composables (@Composable). Algunos elementos clave incluyen:<br>
<br>Text() → Muestra texto en pantalla.
<br>Button() → Crea botones interactivos.
<br>Column(), Row(), Box() → Organizan los elementos en la pantalla de forma flexible.
<br>Modifier → Permite ajustar el diseño, el tamaño y el comportamiento de los elementos UI.
<br><br>
<br>Menos código: Reduce la necesidad de escribir archivos XML.
<br>Más intuitivo: Usa funciones en Kotlin para definir la UI.
<br>Reutilizable y modular: Facilita la creación de componentes reutilizables.
<br>Compatibilidad con Views: Se puede integrar con el sistema tradicional de vistas.
<br>Optimizado para animaciones: Simplifica la creación de transiciones y efectos visuales.
]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\jetpack-compose.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/JetPack Compose.md</guid><pubDate>Sun, 02 Mar 2025 10:34:18 GMT</pubDate></item><item><title><![CDATA[Kotlin]]></title><description><![CDATA[ 
 <br><br>Kotlin es un lenguaje de programación moderno, conciso y seguro que surge como una evolución de Java, ofreciendo una sintaxis más amigable y menos restrictiva. Fue desarrollado por JetBrains y se integró oficialmente en el ecosistema de Android en 2017, convirtiéndose en el lenguaje principal para el desarrollo de aplicaciones en Android Studio.<br><br>
<br>Conciso: Reduce la cantidad de código necesario en comparación con Java.
<br>Seguro: Maneja de manera nativa la nulabilidad, reduciendo los errores de NullPointerException.
<br>Interoperable con Java: Permite combinar código Java y Kotlin en el mismo proyecto sin inconvenientes.
<br>Orientado a objetos y funcional: Admite ambos paradigmas de programación.
<br>Soporte de Google: Es el lenguaje recomendado para el desarrollo en Android.
<br><br>Kotlin es el lenguaje preferido para el desarrollo de aplicaciones Android gracias a su integración nativa con Android Studio. Permite escribir código más limpio y eficiente, facilitando la creación de aplicaciones modernas y optimizadas.<br><br>A diferencia de Java, Kotlin introduce una sintaxis más clara y expresiva. Por ejemplo, en Kotlin se pueden declarar variables sin especificar el tipo explícitamente:<br>Kotlin:<br>val mensaje = "Hola, Kotlin!" // El tipo String se infiere automáticamente
println(mensaje)
<br>Java:<br>String mensaje = "Hola, Kotlin!";
System.out.println(mensaje);
<br>Para ver mas hay una nota mas completa de ello <a data-href="Java vs Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\java-vs-kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Java vs Kotlin</a>.]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\kotlin.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Kotlin.md</guid><pubDate>Sun, 02 Mar 2025 10:35:29 GMT</pubDate></item><item><title><![CDATA[Lista API]]></title><description><![CDATA[ 
 <br><br>Una API (Interfaz de Programación de Aplicaciones) proporciona una manera estructurada de acceder a datos y funcionalidades de un sistema. En el caso de las listas de API, se utilizan para recuperar, organizar y devolver conjuntos de datos en el formato deseado, permitiendo su uso en aplicaciones y sistemas.<br><br>Las listas de API permiten:<br>
<br>Acceder a colecciones de datos desde un servidor.
<br>Ordenar y filtrar los datos según criterios específicos.
<br>Convertir respuestas en objetos estructurados para su fácil manejo.
<br>Integrar la información en interfaces de usuario de forma eficiente.
<br><br>Un endpoint de API que devuelve una lista de objetos puede verse así:<br>Solicitud a la API:<br>GET /usuarios
<br>Respuesta JSON:<br>[
  { "id": 1, "nombre": "Juan", "edad": 30 },
  { "id": 2, "nombre": "María", "edad": 25 }
]
<br>Estos datos pueden ser manipulados en la aplicación para mostrarlos en una interfaz de usuario, aplicando filtros o paginación según sea necesario.]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\lista-api.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Lista API.md</guid><pubDate>Sun, 02 Mar 2025 10:36:02 GMT</pubDate></item><item><title><![CDATA[Listas]]></title><description><![CDATA[ 
 <br><br>En Kotlin, las listas son estructuras de datos utilizadas para almacenar y manipular colecciones de elementos. Existen dos tipos principales de listas:<br>
<br>List (Inmutable): No permite modificar sus elementos después de la creación.
<br>MutableList (Mutable): Permite agregar, eliminar o modificar elementos.
<br><br><br>Las listas inmutables no pueden modificarse después de su creación.<br>val numeros = listOf(1, 2, 3, 4, 5)
println(numeros) // Salida: [1, 2, 3, 4, 5]
<br><br>Las listas mutables permiten la modificación de sus elementos.<br>val numerosMutables = mutableListOf(1, 2, 3)
numerosMutables.add(4)
numerosMutables.remove(2)
println(numerosMutables) // Salida: [1, 3, 4]
<br><br><br>val nombres = listOf("Ana", "Juan", "Luis")
nombres.forEach { println(it) }
<br><br>val numeros = listOf(1, 2, 3, 4, 5)
val pares = numeros.filter { it % 2 == 0 }
println(pares) // Salida: [2, 4]
<br><br>val numeros = listOf(1, 2, 3, 4)
val cuadrados = numeros.map { it * it }
println(cuadrados) // Salida: [1, 4, 9, 16]
<br><br>val numeros = listOf(5, 3, 1, 4, 2)
val ordenados = numeros.sorted()
println(ordenados) // Salida: [1, 2, 3, 4, 5]
<br><br>Puedes convertir una lista inmutable en mutable y viceversa:<br>val inmutable = listOf(1, 2, 3)
val mutable = inmutable.toMutableList()
mutable.add(4)
println(mutable) // Salida: [1, 2, 3, 4]
]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\listas.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Listas.md</guid><pubDate>Sun, 02 Mar 2025 10:48:58 GMT</pubDate></item><item><title><![CDATA[Llamado a base de datos]]></title><description><![CDATA[ 
 <br><br>En Kotlin, la forma recomendada de interactuar con una base de datos en Android es mediante la librería Room, que es parte de Jetpack y simplifica el acceso a bases de datos SQLite.<br><br><br>En el archivo build.gradle:<br>dependencies {
    implementation "androidx.room:room-runtime:2.5.0"
    kapt "androidx.room:room-compiler:2.5.0"
}
<br>También, habilitar kapt en el build.gradle:<br>apply plugin: 'kotlin-kapt'
<br><br><br>Las entidades representan las tablas de la base de datos:<br>import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "usuarios")
data class Usuario(
    @PrimaryKey(autoGenerate = true) val id: Int = 0,
    val nombre: String,
    val edad: Int
)
<br><br><br>El DAO contiene las consultas SQL para interactuar con la base de datos:<br>import androidx.room.*

@Dao
interface UsuarioDao {
    @Insert
    suspend fun insertarUsuario(usuario: Usuario)

    @Query("SELECT * FROM usuarios")
    suspend fun obtenerUsuarios(): List&lt;Usuario&gt;

    @Delete
    suspend fun eliminarUsuario(usuario: Usuario)
}
<br><br><br>Se define la base de datos heredando de RoomDatabase:<br>import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase

@Database(entities = [Usuario::class], version = 1)
abstract class UsuarioDatabase : RoomDatabase() {
    abstract fun usuarioDao(): UsuarioDao

    companion object {
        @Volatile
        private var instancia: UsuarioDatabase? = null

        fun obtenerInstancia(context: Context): UsuarioDatabase {
            return instancia ?: synchronized(this) {
                val nuevaInstancia = Room.databaseBuilder(
                    context.applicationContext,
                    UsuarioDatabase::class.java,
                    "usuario_db"
                ).build()
                instancia = nuevaInstancia
                nuevaInstancia
            }
        }
    }
}
<br><br><br>Para acceder a la base de datos desde una ViewModel, se utiliza CoroutineScope:<br>import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.launch

class UsuarioViewModel(private val database: UsuarioDatabase) : ViewModel() {
    fun agregarUsuario(usuario: Usuario) {
        viewModelScope.launch {
            database.usuarioDao().insertarUsuario(usuario)
        }
    }

    fun obtenerUsuarios(callback: (List&lt;Usuario&gt;) -&gt; Unit) {
        viewModelScope.launch {
            val usuarios = database.usuarioDao().obtenerUsuarios()
            callback(usuarios)
        }
    }
}
<br><br><br>Finalmente, en la MainActivity:<br>class MainActivity : AppCompatActivity() {
    private lateinit var usuarioViewModel: UsuarioViewModel

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        
        val database = UsuarioDatabase.obtenerInstancia(this)
        usuarioViewModel = UsuarioViewModel(database)

        // Insertar usuario
        usuarioViewModel.agregarUsuario(Usuario(nombre = "Juan", edad = 25))

        // Obtener usuarios
        usuarioViewModel.obtenerUsuarios { usuarios -&gt;
            usuarios.forEach { println(it) }
        }
    }
}
]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\llamado-a-base-de-datos.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Llamado a base de datos.md</guid><pubDate>Sun, 02 Mar 2025 11:17:26 GMT</pubDate></item><item><title><![CDATA[Llamado de api kotlin]]></title><description><![CDATA[ 
 <br><br>Para realizar peticiones HTTP en Kotlin, la mejor práctica es utilizar Retrofit, una librería que simplifica la comunicación con servicios web RESTful.<br><br><br>En el archivo build.gradle:<br>dependencies {
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0' // Conversión automática de JSON
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.3' // Para logs de peticiones
}
<br><br><br>Se define una data class para representar la estructura de la respuesta JSON:<br>data class Usuario(
    val id: Int,
    val nombre: String,
    val email: String
)
<br><br><br>Esta interfaz especifica los endpoints y métodos de la API:<br>import retrofit2.Call
import retrofit2.http.GET
import retrofit2.http.Path

interface ApiService {
    @GET("usuarios")
    fun obtenerUsuarios(): Call&lt;List&lt;Usuario&gt;&gt;

    @GET("usuarios/{id}")
    fun obtenerUsuarioPorId(@Path("id") id: Int): Call&lt;Usuario&gt;
}
<br><br><br>Se debe configurar una instancia de Retrofit con la URL base:<br>import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

object RetrofitClient {
    private const val BASE_URL = "https://api.ejemplo.com/"

    val instancia: ApiService by lazy {
        Retrofit.Builder()
            .baseUrl(BASE_URL)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(ApiService::class.java)
    }
}
<br><br><br>Se usa LiveData y CoroutineScope para manejar la respuesta de forma asíncrona:<br>import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.launch
import retrofit2.await

class UsuarioViewModel : ViewModel() {
    val usuariosLiveData = MutableLiveData&lt;List&lt;Usuario&gt;&gt;()

    fun obtenerUsuarios() {
        viewModelScope.launch {
            try {
                val respuesta = RetrofitClient.instancia.obtenerUsuarios().await()
                usuariosLiveData.postValue(respuesta)
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
    }
}
<br><br><br>class MainActivity : AppCompatActivity() {
    private lateinit var usuarioViewModel: UsuarioViewModel

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        
        usuarioViewModel = UsuarioViewModel()
        
        usuarioViewModel.obtenerUsuarios()
        usuarioViewModel.usuariosLiveData.observe(this) { usuarios -&gt;
            usuarios.forEach { println(it) }
        }
    }
}
]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\llamado-de-api-kotlin.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Llamado de api kotlin.md</guid><pubDate>Sun, 02 Mar 2025 11:19:32 GMT</pubDate></item><item><title><![CDATA[Material Design]]></title><description><![CDATA[ 
 <br><br>Material Design es un sistema de diseño desarrollado por Google que proporciona principios, componentes y guías para crear interfaces de usuario atractivas, intuitivas y accesibles. Se basa en la física del mundo real, utilizando sombras, profundidad y animaciones para mejorar la experiencia del usuario.<br><br><br>
<br>Material es la metáfora → Usa propiedades físicas como profundidad, iluminación y movimiento.
<br>Énfasis en la interactividad → Proporciona transiciones y animaciones naturales.
<br>Adaptabilidad → Se ajusta a diferentes tamaños de pantalla y dispositivos.
<br>Diseño jerárquico → Usa tipografía, color y espaciado para mejorar la usabilidad.
<br><br><br>Material Design proporciona una variedad de componentes para construir interfaces modernas:<br><br>
<br>Button: Botón estándar.
<br>FloatingActionButton (FAB): Botón flotante con énfasis en acciones principales.
<br>&lt;com.google.android.material.button.MaterialButton
    android:text="Click me"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content" /&gt;
<br><br>Se utilizan para agrupar información de manera organizada.<br>&lt;androidx.cardview.widget.CardView
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"&gt;
    &lt;TextView android:text="Contenido de la tarjeta" /&gt;
&lt;/androidx.cardview.widget.CardView&gt;
<br><br>
<br>Toolbar: Barra de navegación superior.
<br>Navigation Drawer: Menú lateral deslizable.
<br>&lt;com.google.android.material.appbar.MaterialToolbar
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:title="Mi Aplicación" /&gt;
<br><br>Mejora los campos de entrada con etiquetas flotantes y validaciones.<br>&lt;com.google.android.material.textfield.TextInputLayout
    android:layout_width="match_parent"
    android:layout_height="wrap_content"&gt;
    &lt;com.google.android.material.textfield.TextInputEditText
        android:hint="Ingrese su nombre" /&gt;
&lt;/com.google.android.material.textfield.TextInputLayout&gt;
<br><br><br>Para usar los componentes de Material Design en Android, se debe agregar la dependencia en build.gradle:<br>dependencies {
    implementation 'com.google.android.material:material:1.7.0'
}
<br>También se debe configurar el tema en themes.xml:<br>&lt;style name="Theme.MiApp" parent="Theme.MaterialComponents.Light"&gt;
    &lt;!-- Personalización de colores y estilos --&gt;
&lt;/style&gt;
]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\material-design.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Material Design.md</guid><pubDate>Sun, 02 Mar 2025 11:16:00 GMT</pubDate></item><item><title><![CDATA[Métodos]]></title><description><![CDATA[ 
 <br><br>Los métodos en Kotlin son funciones que definen comportamientos o acciones dentro de una clase o interfaz. Permiten que los <a data-href="objeto" href="\acceso-a-datos\objeto.html" class="internal-link" target="_self" rel="noopener nofollow">objeto</a>s interactúen y realicen operaciones específicas según su propósito. Se pueden definir en una clase, heredar de una clase padre o implementar desde una interfaz.<br><br>Los métodos en <a data-href="Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Kotlin</a> se declaran dentro de una clase utilizando la palabra clave fun. A continuación, se muestra un ejemplo de una clase con métodos básicos:<br>class Supervisor(var nombre: String, var apellido: String) {
    // Método para supervisar
    fun supervisar() {
        println("Estoy supervisando.")
    }

    // Método de presentación
    fun presentacion() {
        println("Hola, mi nombre es $nombre $apellido.")
    }
}
<br><br>Para utilizar un método de una clase, se debe crear una instancia del objeto y luego invocar el método correspondiente:<br>fun main() {
    val supervisor = Supervisor("Juan", "Pérez")
    supervisor.presentacion()
    supervisor.supervisar()
}
<br><br>Los métodos pueden recibir parámetros para realizar operaciones dinámicas:<br>fun calcularSalario(base: Double, bono: Double): Double {
    return base + bono
}
<br><br>Si un método devuelve un valor, se debe especificar el tipo de retorno:<br>fun obtenerNombreCompleto(): String {
    return "$nombre $apellido"
}
<br><br>Kotlin permite agregar métodos a clases existentes sin modificar su código fuente:<br>fun String.reverso(): String {
    return this.reversed()
}

fun main() {
    val palabra = "Kotlin"
    println(palabra.reverso()) // Salida: "niltok"
}
]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\métodos.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Métodos.md</guid><pubDate>Sun, 02 Mar 2025 10:49:42 GMT</pubDate></item><item><title><![CDATA[Programación de Servicios y Procesos]]></title><description><![CDATA[ 
 <br><br><br><br>
<br><a data-href="Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Kotlin</a>
<br><a data-href="Java vs Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\java-vs-kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Java vs Kotlin</a>
<br><a data-href="PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Variables kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\variables-kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Variables kotlin</a>
<br><a data-href="Clase" href="\programacion-de-multimedia-y-dispositivos-moviles\clase.html" class="internal-link" target="_self" rel="noopener nofollow">Clase</a>
<br><a data-href="DataClass" href="\programacion-de-multimedia-y-dispositivos-moviles\dataclass.html" class="internal-link" target="_self" rel="noopener nofollow">DataClass</a>
<br><a data-href="Listas" href="\programacion-de-multimedia-y-dispositivos-moviles\listas.html" class="internal-link" target="_self" rel="noopener nofollow">Listas</a>
<br><a data-href="Sets" href="\programacion-de-multimedia-y-dispositivos-moviles\sets.html" class="internal-link" target="_self" rel="noopener nofollow">Sets</a>
<br><a data-href="Component" href="\programacion-de-multimedia-y-dispositivos-moviles\component.html" class="internal-link" target="_self" rel="noopener nofollow">Component</a>
<br><a data-href="Métodos" href="\programacion-de-multimedia-y-dispositivos-moviles\métodos.html" class="internal-link" target="_self" rel="noopener nofollow">Métodos</a>
<br><a data-href="Init" href="\programacion-de-multimedia-y-dispositivos-moviles\init.html" class="internal-link" target="_self" rel="noopener nofollow">Init</a>
<br><a data-href="Activiti" href="\programacion-de-multimedia-y-dispositivos-moviles\activiti.html" class="internal-link" target="_self" rel="noopener nofollow">Activiti</a>
<br><a data-href="Recicly View" href="\programacion-de-multimedia-y-dispositivos-moviles\recicly-view.html" class="internal-link" target="_self" rel="noopener nofollow">Recicly View</a>
<br><a data-href="Vistas - View" href="\programacion-de-multimedia-y-dispositivos-moviles\vistas-view.html" class="internal-link" target="_self" rel="noopener nofollow">Vistas - View</a>
<br><a data-href="Adapter" href="\programacion-de-multimedia-y-dispositivos-moviles\adapter.html" class="internal-link" target="_self" rel="noopener nofollow">Adapter</a>
<br><a data-href="Lista API" href="\programacion-de-multimedia-y-dispositivos-moviles\lista-api.html" class="internal-link" target="_self" rel="noopener nofollow">Lista API</a>
<br><a data-href="Jerarquía De Carpetas" href="\programacion-de-multimedia-y-dispositivos-moviles\jerarquía-de-carpetas.html" class="internal-link" target="_self" rel="noopener nofollow">Jerarquía De Carpetas</a>
<br><a data-href="Aplicación Básica" href="\programacion-de-multimedia-y-dispositivos-moviles\aplicación-básica.html" class="internal-link" target="_self" rel="noopener nofollow">Aplicación Básica</a>
<br><a data-href="Temas  de segundo trimestre" href="\programacion-de-multimedia-y-dispositivos-moviles\temas-de-segundo-trimestre.html" class="internal-link" target="_self" rel="noopener nofollow">Temas  de segundo trimestre</a>]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\pmdm.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/PMDM.md</guid><pubDate>Sun, 02 Mar 2025 10:59:22 GMT</pubDate></item><item><title><![CDATA[primitivo]]></title><description><![CDATA[ 
 <br><br>En Kotlin, los tipos de datos primitivos son aquellos que representan valores básicos como números, caracteres y booleanos. A diferencia de Java, en Kotlin todos los tipos primitivos son representados como clases envolventes (Wrapper Classes) en tiempo de ejecución cuando es necesario, lo que permite un manejo más eficiente de la memoria.<br><br><br>Los tipos primitivos en Kotlin se dividen en las siguientes categorías:<br><br><br>Ejemplo de uso:<br>val numeroEntero: Int = 42
val numeroDecimal: Double = 3.14
<br><br>El tipo Boolean solo puede tener dos valores: true o false.<br>val esActivo: Boolean = true
<br><br>El tipo Char representa un único carácter y se define entre comillas simples (' ').<br>val letra: Char = 'A'
<br><br>Aunque String no es un tipo primitivo, se usa para representar secuencias de caracteres.<br>val mensaje: String = "Hola, Kotlin!"
<br><br><br>En <a data-href="Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Kotlin</a>, la conversión entre tipos primitivos no es implícita, por lo que se deben usar funciones de conversión:<br>val numero: Int = 10
val numeroDouble: Double = numero.toDouble() // Conversión explícita
<br>Funciones de conversión disponibles:<br>
<br>toByte()
<br>toShort()
<br>toInt()
<br>toLong()
<br>toFloat()
<br>toDouble()
<br>toChar()
]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\primitivo.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/primitivo.md</guid><pubDate>Sun, 02 Mar 2025 11:12:12 GMT</pubDate></item><item><title><![CDATA[Recicly View]]></title><description><![CDATA[ 
 <br><br>RecyclerView es un componente de Android que permite mostrar listas o colecciones de datos de manera eficiente. Su principal ventaja es la reutilización de vistas, evitando la creación innecesaria de elementos y optimizando el uso de memoria y rendimiento.<br>A diferencia de ListView, RecyclerView recicla las vistas existentes, sobrescribiendo su contenido en lugar de crear nuevas instancias, lo que reduce el consumo de recursos.<br><br>Un RecyclerView está compuesto por varios elementos clave:<br><br>Define la manera en que los elementos se organizan en pantalla. Existen diferentes tipos:<br>
<br>LinearLayoutManager → Disposición en lista vertical u horizontal.
<br>GridLayoutManager → Disposición en cuadrícula.
<br>StaggeredGridLayoutManager → Cuadrícula con tamaños variables.
<br><br>El Adapter se encarga de proporcionar los datos a RecyclerView y vincularlos con las vistas correspondientes. Define cómo se mostrará cada elemento de la lista.<br><br>Es una clase que almacena referencias a las vistas de cada ítem, evitando llamadas repetidas a findViewById() y mejorando el rendimiento.<br><br><br>En el archivo XML, se debe incluir un RecyclerView con un id para poder referenciarlo en código:<br>&lt;androidx.recyclerview.widget.RecyclerView
    android:id="@+id/recyclerView"
    android:layout_width="match_parent"
    android:layout_height="match_parent" /&gt;
<br><br>El ViewHolder define la estructura visual de cada ítem de la lista:<br>class ItemViewHolder(view: View) : RecyclerView.ViewHolder(view) {
    val textView: TextView = view.findViewById(R.id.textView)
}
<br><br>El Adapter conecta los datos con el RecyclerView:<br>class ItemAdapter(private val lista: List&lt;String&gt;) : RecyclerView.Adapter&lt;ItemViewHolder&gt;() {
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ItemViewHolder {
        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_layout, parent, false)
        return ItemViewHolder(view)
    }
    
    override fun onBindViewHolder(holder: ItemViewHolder, position: Int) {
        holder.textView.text = lista[position]
    }
    
    override fun getItemCount(): Int = lista.size
}
<br><br>En la actividad principal, inicializamos el RecyclerView y asignamos su Adapter:<br>class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        
        val recyclerView: RecyclerView = findViewById(R.id.recyclerView)
        recyclerView.layoutManager = LinearLayoutManager(this)
        recyclerView.adapter = ItemAdapter(listOf("Elemento 1", "Elemento 2", "Elemento 3"))
    }
}
<br><br>RecyclerView es una herramienta fundamental para mostrar listas en Android de manera eficiente. Su sistema de reutilización de vistas mejora el rendimiento y facilita la gestión de grandes cantidades de datos, haciéndolo una mejor alternativa a ListView en la mayoría de los casos.]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\recicly-view.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Recicly View.md</guid><pubDate>Sun, 02 Mar 2025 10:50:56 GMT</pubDate></item><item><title><![CDATA[Sets]]></title><description><![CDATA[ 
 <br>Un "set" es una estructura de datos en programación que representa una colección de elementos en la que cada elemento es único, es decir, no puede haber duplicados en el conjunto. Los conjuntos se utilizan para almacenar una colección de elementos donde la presencia de duplicados no tiene sentido o debe evitarse. Los elementos en un conjunto no están ordenados, lo que significa que no tienen un índice específico y no se puede acceder a ellos por posición.<br>En un conjunto, los elementos no están indexados y no se garantiza un orden específico, lo que significa que no puedes acceder a los elementos por su posición. En cambio, se utilizan para verificar la presencia o ausencia de elementos específicos y para garantizar que no haya duplicados en una colección.<br>En muchos lenguajes de programación, incluyendo Kotlin, Java, Python y otros, los conjuntos se implementan como colecciones de elementos únicos. Algunas operaciones comunes en un conjunto incluyen:<br>
<br>Agregar un elemento: Agregar un elemento único al conjunto.
<br>Eliminar un elemento: Eliminar un elemento específico del conjunto.
<br>Verificar la existencia de un elemento: Comprobar si un elemento está presente en el conjunto.
<br>Tamaño del conjunto: Obtener el número de elementos únicos en el conjunto.
<br>Iterar sobre elementos: Recorrer los elementos del conjunto (aunque no en un orden específico).
<br>Un ejemplo de cómo se puede usar un conjunto en <a data-href="Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Kotlin</a>:<br>kotlinCopy code<br>val miSet = mutableSetOf("manzana", "banana", "cereza", "manzana")  miSet.add("dátil") // Agregar un elemento miSet.remove("banana") // Eliminar un elemento  if ("cereza" in miSet) {     println("La cereza está en el conjunto.") }  println("Tamaño del conjunto: ${miSet.size}")  for (elemento in miSet) {     println(elemento) }<br>En este ejemplo, miSet es un conjunto que contiene elementos únicos. Se agregan elementos, se elimina un elemento, se verifica la existencia de un elemento y se recorre el conjunto. Como resultado, solo se mostrarán elementos únicos y no habrá duplicados.]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\sets.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Sets.md</guid><pubDate>Sun, 02 Mar 2025 10:51:09 GMT</pubDate></item><item><title><![CDATA[simple class]]></title><description><![CDATA[ 
 <br><br>Una Singleton Class (clase única) es un patrón de diseño que permite que una clase tenga una única instancia en toda la ejecución del programa. Esto es útil cuando se necesita un punto de acceso global a una instancia, como para manejar configuraciones, bases de datos o controladores de red.<br>En <a data-href="Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Kotlin</a>, el patrón Singleton se implementa de forma sencilla utilizando la palabra clave object.<br><br><br>Kotlin proporciona una forma directa de definir un Singleton con object, evitando la necesidad de constructores manuales:<br>object Configuracion {
    var modoOscuro: Boolean = false
    fun mostrarConfiguracion() {
        println("Modo oscuro: $modoOscuro")
    }
}
<br><br>No es necesario instanciar la clase, ya que object garantiza una única instancia global:<br>fun main() {
    Configuracion.mostrarConfiguracion() // Salida: Modo oscuro: false
    Configuracion.modoOscuro = true
    Configuracion.mostrarConfiguracion() // Salida: Modo oscuro: true
}
<br><br><br>Si se quiere definir un Singleton dentro de una clase normal, se puede usar companion object:<br>class BaseDatos private constructor() {
    companion object {
        private var instancia: BaseDatos? = null
        fun obtenerInstancia(): BaseDatos {
            if (instancia == null) {
                instancia = BaseDatos()
            }
            return instancia!!
        }
    }
}
<br><br>val db1 = BaseDatos.obtenerInstancia()
val db2 = BaseDatos.obtenerInstancia()
println(db1 == db2) // Salida: true (ambas referencias apuntan al mismo objeto)
<br><br><br>
<br>Para almacenar configuraciones globales en la aplicación.
<br>Para gestionar conexiones de base de datos o API.
<br>Para manejar cache o almacenamiento temporal de datos.
<br>Para servicios compartidos como autenticación o logs.
]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\simple-class.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/simple class.md</guid><pubDate>Sun, 02 Mar 2025 11:04:40 GMT</pubDate></item><item><title><![CDATA[SP]]></title><description><![CDATA[ 
 <br><br>sp (Scale-independent Pixels) es una unidad de medida utilizada en Android para definir el tamaño del texto dentro de componentes como <a data-href="TextView" href="\TextView" class="internal-link" target="_self" rel="noopener nofollow">TextView</a>. A diferencia de <a data-href="dp" href="\programacion-de-multimedia-y-dispositivos-moviles\dp.html" class="internal-link" target="_self" rel="noopener nofollow">dp</a> (Density-independent Pixels), sp ajusta el tamaño del texto según la configuración de accesibilidad del usuario, asegurando una mejor legibilidad en diferentes dispositivos.<br><br><br><br>Para definir el tamaño del texto en XML:<br>&lt;TextView
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="Ejemplo de Texto"
    android:textSize="16sp" /&gt;
<br>O en código Kotlin:<br>textView.textSize = 16f // La unidad predeterminada es sp
<br><br>Usar sp en lugar de dp para el texto permite que la aplicación respete las configuraciones de accesibilidad del usuario, mejorando la experiencia para personas con dificultades visuales.]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\sp.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/SP.md</guid><pubDate>Sun, 02 Mar 2025 10:52:54 GMT</pubDate></item><item><title><![CDATA[String]]></title><description><![CDATA[ 
 <br><br>En Kotlin, un String es una secuencia de caracteres inmutable. Se utiliza para representar texto y ofrece diversas funciones para su manipulación.<br><br><br>Un String en Kotlin se puede definir de la siguiente manera:<br>val mensaje: String = "Hola, Kotlin!"
<br>También se pueden declarar sin especificar el tipo explícitamente:<br>val saludo = "Bienvenido a Kotlin"
<br><br><br>Kotlin permite incrustar variables dentro de un String usando el símbolo $:<br>val nombre = "Juan"
val mensaje = "Hola, $nombre!"
println(mensaje) // Salida: Hola, Juan!
<br>También se pueden incluir expresiones dentro de un String usando ${ }:<br>val a = 5
val b = 10
println("La suma de $a y $b es ${a + b}") // Salida: La suma de 5 y 10 es 15
<br><br><br>Kotlin permite definir cadenas multilínea con triple comillas ("""):<br>val texto = """
    Esto es un string
    en varias líneas.
""".trimIndent()
<br>trimIndent() elimina espacios innecesarios al inicio de cada línea.<br><br><br><br>val mensaje = "Hola"
println(mensaje.length) // Salida: 4
<br><br>val texto = "Kotlin"
println(texto.uppercase()) // Salida: KOTLIN
println(texto.lowercase()) // Salida: kotlin
<br><br>val palabra = "Kotlin"
println(palabra[0]) // Salida: K
<br><br>val frase = "Aprendiendo Kotlin"
println(frase.substring(0, 10)) // Salida: Aprendiendo
<br><br>val mensaje = "Hola Mundo"
println(mensaje.replace("Mundo", "Kotlin")) // Salida: Hola Kotlin
<br><br>val texto = "Programación en Kotlin"
println(texto.contains("Kotlin")) // Salida: true
<br><br>val datos = "Juan,Pedro,Ana"
val nombres = datos.split(",")
println(nombres) // Salida: [Juan, Pedro, Ana]
]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\string.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/String.md</guid><pubDate>Sun, 02 Mar 2025 11:12:47 GMT</pubDate></item><item><title><![CDATA[Temas  de segundo trimestre]]></title><description><![CDATA[ 
 <br>
<br><a data-href="PMDM" href="\programacion-de-multimedia-y-dispositivos-moviles\pmdm.html" class="internal-link" target="_self" rel="noopener nofollow">PMDM</a>
<br><a data-href="Material Design" href="\programacion-de-multimedia-y-dispositivos-moviles\material-design.html" class="internal-link" target="_self" rel="noopener nofollow">Material Design</a> 
<br><a data-href="Arquitectura Limpia" href="\programacion-de-multimedia-y-dispositivos-moviles\arquitectura-limpia.html" class="internal-link" target="_self" rel="noopener nofollow">Arquitectura Limpia</a>
<br><a data-href="JetPack Compose" href="\programacion-de-multimedia-y-dispositivos-moviles\jetpack-compose.html" class="internal-link" target="_self" rel="noopener nofollow">JetPack Compose</a>
<br><a data-href="Llamado a base de datos" href="\programacion-de-multimedia-y-dispositivos-moviles\llamado-a-base-de-datos.html" class="internal-link" target="_self" rel="noopener nofollow">Llamado a base de datos</a>
<br><a data-href="Llamado de api kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\llamado-de-api-kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Llamado de api kotlin</a>
<br><a data-href="Corrutinas (hilos kotlin)" href="\programacion-de-multimedia-y-dispositivos-moviles\corrutinas-(hilos-kotlin).html" class="internal-link" target="_self" rel="noopener nofollow">Corrutinas (hilos kotlin)</a>
<br><a data-href="Flow" href="\programacion-de-multimedia-y-dispositivos-moviles\flow.html" class="internal-link" target="_self" rel="noopener nofollow">Flow</a>
]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\temas-de-segundo-trimestre.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Temas  de segundo trimestre.md</guid><pubDate>Sun, 02 Mar 2025 11:32:47 GMT</pubDate></item><item><title><![CDATA[tipo de clase]]></title><description><![CDATA[ 
 <br><br>En Kotlin, las clases son fundamentales para la programación orientada a objetos y ofrecen diferentes tipos según su propósito y comportamiento.<br><br><br>Son la base de la programación en <a data-href="Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Kotlin</a> y permiten definir atributos y métodos.<br>class Persona(val nombre: String, val edad: Int) {
    fun presentarse() {
        println("Hola, mi nombre es $nombre y tengo $edad años.")
    }
}
<br><br><br>Son clases especializadas en almacenar datos, generando automáticamente métodos como equals(), hashCode(), toString(), y copy().<br>data class Usuario(val id: Int, val nombre: String)
<br><br><br>No pueden ser instanciadas directamente y se utilizan como base para otras clases que deben implementar sus métodos abstractos.<br>abstract class Figura {
    abstract fun calcularArea(): Double
}

class Circulo(val radio: Double) : Figura() {
    override fun calcularArea() = Math.PI * radio * radio
}
<br><br><br>Definen un contrato que otras clases deben implementar, permitiendo herencia múltiple.<br>interface Dibujable {
    fun dibujar()
}

class Cuadrado : Dibujable {
    override fun dibujar() {
        println("Dibujando un cuadrado")
    }
}
<br><br><br>Son clases restringidas donde solo pueden ser heredadas dentro del mismo archivo, ideales para modelar estados.<br>sealed class Estado {
    object Exito : Estado()
    object Error : Estado()
}
<br><br><br>Una clase que tiene una única instancia en toda la aplicación.<br>object Configuracion {
    var modoOscuro: Boolean = false
}
<br><br><br>Permite definir una clase dentro de otra y acceder a los miembros de la clase externa.<br>class Externa(val mensaje: String) {
    inner class Interna {
        fun mostrarMensaje() = mensaje
    }
}
<br><br><br>Kotlin ofrece diversos tipos de clases según el contexto y necesidad del proyecto. Desde clases simples hasta especializadas como data class, sealed class, o object, cada tipo tiene ventajas específicas para mejorar la estructura y eficiencia del código.]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\tipo-de-clase.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/tipo de clase.md</guid><pubDate>Sun, 02 Mar 2025 11:13:51 GMT</pubDate></item><item><title><![CDATA[Variables kotlin]]></title><description><![CDATA[ 
 <br><br>Las variables en <a data-href="Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Kotlin</a> pueden ser mutables o inmutables, y su tipo de dato puede ser inferido automáticamente por el compilador.<br>val constante = "Esto es una constante"
var variable = "Esto es una variable"
<br><br>
<br>val (inmutable): No puede ser reasignado después de su inicialización.
<br>var (mutable): Puede cambiar su valor en tiempo de ejecución.
<br>Esto permite definir constantes y valores dinámicos según el <a data-href="flujo de código" href="\flujo de código" class="internal-link" target="_self" rel="noopener nofollow">flujo de código</a>.<br><br>En <a data-href="Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Kotlin</a>, no es necesario declarar explícitamente el tipo de dato cuando es un <a data-href="primitivo" href="\programacion-de-multimedia-y-dispositivos-moviles\primitivo.html" class="internal-link" target="_self" rel="noopener nofollow">primitivo</a> o <a data-href="String" href="\programacion-de-multimedia-y-dispositivos-moviles\string.html" class="internal-link" target="_self" rel="noopener nofollow">String</a>, ya que el compilador lo infiere automáticamente:<br>var numero = 2 // Kotlin infiere que es un Int
var texto = "Hola" // Kotlin infiere que es un String
<br>Sin embargo, cuando se trata de una clase personalizada o un <a data-href="tipo de clase" href="\programacion-de-multimedia-y-dispositivos-moviles\tipo-de-clase.html" class="internal-link" target="_self" rel="noopener nofollow">tipo de clase</a>, es recomendable declarar el tipo explícitamente:<br>var supervisor: Supervisor = Supervisor()
<br><br><br>En <a data-href="Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Kotlin</a>, las variables cuentan con métodos de acceso (get) y modificación (set) de forma nativa. Aunque normalmente no es necesario definirlos manualmente, se pueden personalizar:<br>class Supervisor {
    var nombre: String = ""
        get() = if (field.isEmpty()) "Sin nombre" else field
        set(value) {
            field = if (value.isEmpty()) "Sin nombre" else value
        }
}
<br>Explicación:<br>
<br>get(): Si nombre está vacío, devuelve "Sin nombre".
<br>set(value): Si el nuevo valor es vacío, asigna "Sin nombre" en su lugar.
<br>Uso en código:<br>val supervisor = Supervisor()
println(supervisor.nombre) // Salida: "Sin nombre"

supervisor.nombre = "Carlos"
println(supervisor.nombre) // Salida: "Carlos"
<br><br><br>Uno de los beneficios de <a data-href="Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Kotlin</a> es la gestión segura de valores nulos para evitar NullPointerException. Para permitir valores null, se debe usar ? en la declaración de la variable:<br>var nombre: String? = null
<br>Esto obliga a realizar comprobaciones antes de acceder al valor:<br>println(nombre?.length) // Usa el operador seguro `?.`
<br>Si nombre es null, la expresión devolverá null en lugar de lanzar una excepción, garantizando la <a data-href="exception safety" href="\exception safety" class="internal-link" target="_self" rel="noopener nofollow">exception safety</a>.<br><br><br>En <a data-href="Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Kotlin</a>, los nombres de variables y funciones siguen la convención CamelCase, donde la primera palabra empieza en minúscula y las siguientes en mayúscula:<br>var miVariableEjemplo = "Ejemplo en CamelCase"
<br><br><br>En <a data-href="Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Kotlin</a>, se pueden concatenar cadenas de diferentes formas:<br>
<br>Usando +:
<br>val saludo = "Hola, " + "Mundo"
<br>
<br>Usando concat():
<br>val saludo = "Hola".concat(", Mundo")
<br>
<br>Usando Interpolación de Strings:
<br>val nombre = "Juan"
println("Hola, mi nombre es $nombre")
<br>La interpolación permite insertar variables dentro de una cadena sin necesidad de concatenarlas manualmente.<br><br><br>Las variables en <a data-href="Kotlin" href="\programacion-de-multimedia-y-dispositivos-moviles\kotlin.html" class="internal-link" target="_self" rel="noopener nofollow">Kotlin</a> ofrecen un sistema flexible y seguro para manejar datos. Gracias a la inferencia de tipos, null safety, y getters/setters personalizados, el lenguaje proporciona herramientas modernas y eficientes para la manipulación de valores en el <a data-href="flujo de código" href="\flujo de código" class="internal-link" target="_self" rel="noopener nofollow">flujo de código</a>.]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\variables-kotlin.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Variables kotlin.md</guid><pubDate>Sun, 02 Mar 2025 11:03:20 GMT</pubDate></item><item><title><![CDATA[Vistas - View]]></title><description><![CDATA[ 
 <br><br>En Android, una vista (View) es un componente de la interfaz de usuario que representa un elemento visual en la pantalla. Puede ser un botón, un cuadro de texto, una imagen o cualquier otro elemento con el que el usuario pueda interactuar.<br><br>Existen diferentes tipos de vistas en Android, entre las más utilizadas se encuentran:<br><br>
<br>TextView: Muestra texto en pantalla.
<br>EditText: Campo de entrada para que el usuario escriba texto.
<br>Button: Botón interactivo.
<br>ImageView: Muestra imágenes.
<br>CheckBox: Casilla de verificación.
<br>RadioButton: Botón de selección única dentro de un grupo.
<br><br>Las vistas de contenedor organizan otras vistas dentro de la interfaz:<br>
<br>LinearLayout: Organiza elementos en una fila o columna.
<br>RelativeLayout: Permite posicionar vistas en relación con otras.
<br>ConstraintLayout: Permite un diseño flexible con restricciones.
<br>FrameLayout: Contiene una única vista superpuesta sobre otras.
<br><br>
<br>RecyclerView: Optimizado para listas de gran tamaño.
<br>WebView: Muestra contenido web dentro de la aplicación.
<br>CardView: Tarjetas con sombras y esquinas redondeadas.
<br><br>Las vistas se pueden definir en archivos XML dentro de la carpeta res/layout/:<br>&lt;TextView
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="Hola, Android!" /&gt;
<br><br>También se pueden crear vistas mediante código en Kotlin:<br>val textView = TextView(this)
textView.text = "Hola, Android!"
setContentView(textView)
<br><br>Las vistas pueden detectar interacciones del usuario, como clics o toques:<br>button.setOnClickListener {
    Toast.makeText(this, "Botón presionado", Toast.LENGTH_SHORT).show()
}
]]></description><link>programacion-de-multimedia-y-dispositivos-moviles\vistas-view.html</link><guid isPermaLink="false">PROGRAMACION-DE-MULTIMEDIA-Y-DISPOSITIVOS-MOVILES/Vistas - View.md</guid><pubDate>Sun, 02 Mar 2025 10:56:01 GMT</pubDate></item><item><title><![CDATA[Android - Java]]></title><description><![CDATA[ 
 <br>Android es un sistema operativo basado en Linux diseñado para dispositivos móviles. Java fue durante años el lenguaje principal para el desarrollo de aplicaciones Android, proporcionando una plataforma estable y robusta para crear aplicaciones móviles.<br><br>Para desarrollar aplicaciones en Android con Java, se necesitan las siguientes herramientas:<br>
<br>Android Studio: Entorno de desarrollo oficial para Android.
<br>SDK de Android: Contiene las bibliotecas y herramientas necesarias.
<br>Emulador o dispositivo físico: Para probar las aplicaciones.
<br><br>Un proyecto Android tiene una estructura definida que incluye:<br>
<br>Manifiesto (AndroidManifest.xml): Define permisos, componentes y configuraciones de la app.
<br>Carpeta res: Contiene recursos como imágenes, layouts y strings.
<br>Carpeta java: Contiene el código fuente de la aplicación.
<br>Carpeta layout: Contiene los archivos XML para la interfaz de usuario.
<br><br>Una Actividad (Activity) representa una pantalla en la aplicación. Se hereda de AppCompatActivity.<br><br>import android.os.Bundle;
import androidx.appcompat.app.AppCompatActivity;
import android.widget.TextView;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        TextView textView = findViewById(R.id.textView);
        textView.setText("¡Hola, Android!");
    }
}
<br><br>Las interfaces de usuario en Android se definen en XML y se asocian a las actividades.<br><br>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"&gt;

    &lt;TextView
        android:id="@+id/textView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Texto de ejemplo" /&gt;
&lt;/LinearLayout&gt;
<br><br>Los intents permiten la comunicación entre actividades o incluso con otras aplicaciones.<br><br>MainActivity.java<br>import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button btn = findViewById(R.id.button);
        btn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(MainActivity.this, SecondActivity.class);
                startActivity(intent);
            }
        });
    }
}
<br>SecondActivity.java<br>import android.os.Bundle;
import androidx.appcompat.app.AppCompatActivity;

public class SecondActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_second);
    }
}
<br><br>Para evitar bloqueos en la UI, las operaciones pesadas deben ejecutarse en hilos secundarios.<br><br>import android.os.AsyncTask;
import android.os.Bundle;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    private TextView textView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        textView = findViewById(R.id.textView);
        new MiTarea().execute();
    }

    private class MiTarea extends AsyncTask&lt;Void, Void, String&gt; {
        @Override
        protected String doInBackground(Void... voids) {
            return "Tarea completada";
        }

        @Override
        protected void onPostExecute(String result) {
            textView.setText(result);
        }
    }
}
]]></description><link>programacion-de-servicios-y-procesos\android-java.html</link><guid isPermaLink="false">PROGRAMACION-DE-SERVICIOS-Y-PROCESOS/Android - Java.md</guid><pubDate>Sun, 16 Feb 2025 11:14:20 GMT</pubDate></item><item><title><![CDATA[API REST (Representational State Transfer)]]></title><description><![CDATA[ 
 <br><br>Una API REST (Application Programming Interface - Representational State Transfer) es un conjunto de reglas y convenciones para el diseño de servicios web que permiten la comunicación entre clientes y servidores utilizando el protocolo HTTP.<br><br>
<br>Cliente-Servidor: Separa las responsabilidades del cliente y del servidor.
<br>Sin estado (Stateless): Cada petición del cliente debe contener toda la información necesaria.
<br>Cacheable: Permite mejorar el rendimiento mediante almacenamiento en caché.
<br>Interfaz uniforme: Usa métodos HTTP estándar.
<br>Sistema en capas: La arquitectura REST permite intermediarios como balanceadores de carga y proxies.
<br><br>Las API REST utilizan los métodos HTTP para definir acciones sobre los recursos:<br>
<br>GET: Obtener información de un recurso.
<br>POST: Crear un nuevo recurso.
<br>PUT: Actualizar un recurso existente.
<br>DELETE: Eliminar un recurso.
<br><br>Spring Boot facilita la creación de servicios REST en Java.<br><br>Se puede crear un proyecto en Spring Initializr con las dependencias:<br>
<br>Spring Web
<br>Spring Boot DevTools
<br><br>import org.springframework.web.bind.annotation.*;
import java.util.*;

@RestController
@RequestMapping("/usuarios")
public class UsuarioController {
    private List&lt;String&gt; usuarios = new ArrayList&lt;&gt;(Arrays.asList("Juan", "Maria", "Carlos"));
    
    @GetMapping
    public List&lt;String&gt; obtenerUsuarios() {
        return usuarios;
    }
    
    @PostMapping
    public String agregarUsuario(@RequestBody String usuario) {
        usuarios.add(usuario);
        return "Usuario agregado";
    }
}
<br><br>Las API REST pueden ser consumidas por aplicaciones web, móviles o clientes de escritorio. Ejemplo de consumo con cURL:<br># Obtener usuarios
curl -X GET http://localhost:8080/usuarios

# Agregar un usuario
curl -X POST -H "Content-Type: application/json" -d "\"Pedro\"" http://localhost:8080/usuarios
<br><br>Para proteger una API REST se pueden utilizar:<br>
<br>Autenticación con JWT (JSON Web Token).
<br>OAuth2 para autorización de terceros.
<br>CORS para permitir o restringir accesos desde dominios específicos.
<br><br>Las API REST permiten la comunicación eficiente entre sistemas utilizando HTTP. Con herramientas como Spring Boot, se pueden construir servicios escalables y seguros de manera sencilla.]]></description><link>programacion-de-servicios-y-procesos\api-rest.html</link><guid isPermaLink="false">PROGRAMACION-DE-SERVICIOS-Y-PROCESOS/API - REST.md</guid><pubDate>Sun, 16 Feb 2025 11:42:38 GMT</pubDate></item><item><title><![CDATA[Cifrado Clásico]]></title><description><![CDATA[ 
 <br><br>El cifrado clásico comprende los métodos de criptografía utilizados antes del desarrollo de los sistemas computacionales modernos. Estos métodos se basaban en la sustitución y transposición de caracteres para ocultar mensajes, proporcionando una base para la criptografía actual.<br><br><br>Consisten en reemplazar cada letra del mensaje original por otra según un patrón fijo.<br><br>
<br>Desplaza cada letra del alfabeto un número fijo de posiciones.
<br>Ejemplo con desplazamiento de 3:

<br>Texto original: HOLA
<br>Texto cifrado: KROD


<br>Fórmula matemática:
C = (P + k) mod 26

  donde C es la letra cifrada, P la letra en texto claro y k el desplazamiento.
<br><br>
<br>Invierte el alfabeto, sustituyendo A por Z, B por Y, etc.
<br>Ejemplo:

<br>Texto original: HOLA
<br>Texto cifrado: SLDZ


<br><br>
<br>Usa una clave repetitiva para cifrar el mensaje.
<br>La clave se usa en un esquema de cifrado César variable.
<br>Ejemplo con clave KEY:

<br>Texto original: HOLA
<br>Clave repetida: KEYK
<br>Texto cifrado: RIJQ


<br><br>Estos cifrados reordenan los caracteres del mensaje original sin cambiar las letras.<br><br>
<br>Se escribe el mensaje en una cuadrícula y se reorganizan las columnas.
<br>Ejemplo:
MENSAJE: "HOLA MUNDO"
MATRIZ:
H O L A
M U N D
O


<br>Reorganizando las columnas se obtiene HML OU ADN O.


<br><br>
<br>Alterna caracteres en diferentes líneas y luego los concatena.
<br>Ejemplo con 3 líneas:
H   L   O   N   O
 O M U D


<br>Texto cifrado: HLONO OMUD


<br><br>
<br>Fácilmente rompibles con técnicas modernas como el análisis de frecuencia.
<br>No usan claves complejas.
<br>Vulnerables al criptoanálisis manual.
<br><br>
<br>Fueron la base de la criptografía moderna.
<br>Son usados en educación y en desafíos de seguridad.
<br>Algunos se siguen empleando en sistemas de ofuscación ligera.
<br><br>Los métodos de cifrado clásico proporcionan una comprensión fundamental de la criptografía. Aunque han sido reemplazados por algoritmos modernos, siguen siendo útiles para estudios académicos y retos criptográficos.]]></description><link>programacion-de-servicios-y-procesos\cifrados-clasico.html</link><guid isPermaLink="false">PROGRAMACION-DE-SERVICIOS-Y-PROCESOS/Cifrados clasico.md</guid><pubDate>Sun, 16 Feb 2025 12:04:53 GMT</pubDate></item><item><title><![CDATA[Conexiones de Servicios]]></title><description><![CDATA[ 
 <br><br>Las conexiones de servicios permiten la comunicación entre aplicaciones y servidores en una red. Estas conexiones pueden establecerse a través de diversos protocolos como HTTP, FTP, WebSockets, RPC, y gRPC, dependiendo del tipo de servicio y requisitos de comunicación.<br><br><br>HTTP y HTTPS son protocolos ampliamente utilizados para la comunicación entre clientes y servidores.<br>Ejemplo de conexión HTTP en Java:<br>import java.io.*;
import java.net.*;

public class ClienteHTTP {
    public static void main(String[] args) throws IOException {
        URL url = new URL("https://api.ejemplo.com/datos");
        HttpURLConnection conexion = (HttpURLConnection) url.openConnection();
        conexion.setRequestMethod("GET");
        
        BufferedReader entrada = new BufferedReader(new InputStreamReader(conexion.getInputStream()));
        String linea;
        while ((linea = entrada.readLine()) != null) {
            System.out.println(linea);
        }
        entrada.close();
    }
}
<br><br>FTP se usa para la transferencia de archivos entre servidores y clientes.<br>Ejemplo en Java usando Apache Commons Net:<br>import org.apache.commons.net.ftp.FTPClient;
import java.io.IOException;

public class ClienteFTP {
    public static void main(String[] args) {
        FTPClient ftp = new FTPClient();
        try {
            ftp.connect("ftp.ejemplo.com");
            ftp.login("usuario", "clave");
            ftp.logout();
            ftp.disconnect();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
<br><br>WebSockets permiten la comunicación en tiempo real entre clientes y servidores.<br>Ejemplo de conexión WebSocket en Java:<br>import javax.websocket.*;
import java.net.URI;

@ClientEndpoint
public class ClienteWebSocket {
    @OnMessage
    public void mensaje(String mensaje) {
        System.out.println("Mensaje recibido: " + mensaje);
    }

    public static void main(String[] args) throws Exception {
        WebSocketContainer container = ContainerProvider.getWebSocketContainer();
        container.connectToServer(ClienteWebSocket.class, new URI("ws://servidor.com/socket"));
    }
}
<br><br>RPC (Remote Procedure Call) y gRPC permiten la ejecución de funciones en servidores remotos como si fueran locales.<br>Ejemplo de conexión gRPC en Java:<br>import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import ejemplo.GrpcServiceGrpc;
import ejemplo.Request;
import ejemplo.Response;

public class ClienteGRPC {
    public static void main(String[] args) {
        ManagedChannel canal = ManagedChannelBuilder.forAddress("localhost", 50051).usePlaintext().build();
        GrpcServiceGrpc.GrpcServiceBlockingStub stub = GrpcServiceGrpc.newBlockingStub(canal);
        
        Request request = Request.newBuilder().setMensaje("Hola gRPC").build();
        Response response = stub.enviarMensaje(request);
        System.out.println("Respuesta: " + response.getRespuesta());
        canal.shutdown();
    }
}
<br><br>Para proteger las conexiones, es recomendable:<br>
<br>Usar HTTPS/TLS para cifrar datos.
<br>Autenticación con tokens (JWT, OAuth2) para validar clientes.
<br>Firewalls y control de acceso para restringir conexiones sospechosas.
<br><br>Las conexiones de servicios son fundamentales para la comunicación en aplicaciones distribuidas. Dependiendo del caso de uso, se pueden utilizar HTTP, WebSockets, FTP, RPC o gRPC para garantizar eficiencia y seguridad en la comunicación entre servidores y clientes.]]></description><link>programacion-de-servicios-y-procesos\conexiones-de-servicios.html</link><guid isPermaLink="false">PROGRAMACION-DE-SERVICIOS-Y-PROCESOS/Conexiones de Servicios.md</guid><pubDate>Sun, 16 Feb 2025 11:40:56 GMT</pubDate></item><item><title><![CDATA[Criptografía Simétrica y Asimétrica]]></title><description><![CDATA[ 
 <br><br>La criptografía es una disciplina que permite proteger la información mediante técnicas de cifrado y descifrado. Se clasifica principalmente en dos tipos: criptografía simétrica y criptografía asimétrica.<br><br>En la criptografía simétrica, se utiliza la misma clave para cifrar y descifrar los datos. Es rápida y eficiente, pero tiene el problema de la distribución segura de claves.<br><br>
<br>Uso de una única clave para cifrado y descifrado.
<br>Alta velocidad en comparación con la criptografía asimétrica.
<br>Riesgo en la distribución de claves, ya que si la clave es interceptada, se compromete la seguridad de la comunicación.
<br><br>
<br>AES (Advanced Encryption Standard): Algoritmo moderno y seguro con claves de 128, 192 y 256 bits.
<br>DES (Data Encryption Standard): Antiguo estándar con una clave de 56 bits (considerado inseguro hoy en día).
<br>3DES (Triple DES): Variación de DES que aplica el cifrado tres veces para mayor seguridad.
<br>RC4: Algoritmo de flujo utilizado en protocolos como WEP (ahora obsoleto).
<br><br>from Crypto.Cipher import AES
import base64

clave = b'0123456789abcdef'  # Clave de 16 bytes
cifrador = AES.new(clave, AES.MODE_ECB)
texto = "Mensaje Secreto  ".encode('utf-8')  # Debe ser múltiplo de 16
cifrado = cifrador.encrypt(texto)
print("Texto cifrado:", base64.b64encode(cifrado))
<br><br>En la criptografía asimétrica, se utiliza un par de claves: una clave pública para cifrar y una clave privada para descifrar. Es más segura para la transmisión de datos, pero más lenta en comparación con la simétrica.<br><br>
<br>Uso de dos claves (pública y privada).
<br>Mayor seguridad en la distribución de claves.
<br>Más lenta que la criptografía simétrica debido a la complejidad de los cálculos matemáticos.
<br><br>
<br>RSA (Rivest-Shamir-Adleman): Algoritmo ampliamente utilizado para cifrado y firma digital.
<br>ECC (Elliptic Curve Cryptography): Ofrece seguridad equivalente a RSA con claves más pequeñas.
<br>Diffie-Hellman: Utilizado para el intercambio seguro de claves en redes.
<br><br>from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import base64

# Generar claves
clave = RSA.generate(2048)
clave_publica = clave.publickey().export_key()
clave_privada = clave.export_key()

# Cifrar mensaje
cifrador = PKCS1_OAEP.new(RSA.import_key(clave_publica))
mensaje = "Mensaje Secreto".encode('utf-8')
cifrado = cifrador.encrypt(mensaje)
print("Texto cifrado:", base64.b64encode(cifrado))
<br><br><br><br>
<br>Comunicaciones seguras: HTTPS, VPN, correos cifrados.
<br>Autenticación: Firmas digitales y certificados SSL/TLS.
<br>Almacenamiento seguro: Bases de datos cifradas y discos encriptados.
<br>Intercambio seguro de claves: Para proteger la transmisión de información en redes públicas.
<br><br>La criptografía simétrica es eficiente para proteger datos en almacenamiento y transferencia rápida, mientras que la criptografía asimétrica es más segura para la autenticación e intercambio de claves. La combinación de ambas técnicas es clave en la seguridad informática moderna.]]></description><link>programacion-de-servicios-y-procesos\criptografía-simétrica-y-asimétrica.html</link><guid isPermaLink="false">PROGRAMACION-DE-SERVICIOS-Y-PROCESOS/Criptografía Simétrica y Asimétrica.md</guid><pubDate>Sun, 16 Feb 2025 11:48:12 GMT</pubDate></item><item><title><![CDATA[Cross-Site Scripting (XSS)]]></title><description><![CDATA[ 
 <br><br>El Cross-Site Scripting (XSS) es un tipo de vulnerabilidad de seguridad web que permite a un atacante inyectar código malicioso en una página web vista por otros usuarios. Este ataque puede usarse para robar datos, secuestrar sesiones o redirigir a los usuarios a sitios maliciosos.<br><br><br>
<br>Ocurre cuando los datos proporcionados por el usuario son incluidos en la respuesta HTTP sin ser validados.
<br>Se activa cuando la víctima hace clic en un enlace malicioso que contiene el script.
<br>Ejemplo:
<br>&lt;a href="http://ejemplo.com/?search=&lt;script&gt;alert('XSS')&lt;/script&gt;"&gt;Haz clic aquí&lt;/a&gt;
<br><br>
<br>El código malicioso se guarda en la base de datos del servidor y se ejecuta cada vez que otro usuario accede a la página afectada.
<br>Es más peligroso porque persiste en la aplicación.
<br>Ejemplo:
<br>&lt;form action="/comentarios" method="post"&gt;
    &lt;input type="text" name="comentario" value="&lt;script&gt;alert('XSS')&lt;/script&gt;"&gt;
    &lt;input type="submit" value="Enviar"&gt;
&lt;/form&gt;
<br><br>
<br>Se produce cuando una aplicación web manipula el Document Object Model (DOM) sin validar la entrada del usuario.
<br>El ataque se ejecuta en el navegador sin que el servidor participe directamente.
<br>Ejemplo:
<br>var input = document.location.hash;
document.write("&lt;p&gt;" + input + "&lt;/p&gt;");
<br>Si un usuario visita http://ejemplo.com/#&lt;script&gt;alert('XSS')&lt;/script&gt;, el script malicioso se ejecutará.<br><br>
<br>Robo de cookies y credenciales
<br>Secuestro de sesiones de usuario
<br>Desfiguración de páginas web
<br>Distribución de malware
<br><br><br>
<br>Usar listas blancas de caracteres permitidos.
<br>Escapar caracteres especiales antes de renderizarlos.
<br>No confiar en la entrada del usuario.
<br>Ejemplo en PHP con htmlspecialchars():<br>$input = htmlspecialchars($_GET['data'], ENT_QUOTES, 'UTF-8');
<br><br>
<br>Content Security Policy (CSP): Restringe la ejecución de scripts en la página.
<br>Content-Security-Policy: default-src 'self'; script-src 'self';
<br>
<br>HttpOnly Cookies: Evita que JavaScript acceda a las cookies de sesión.
<br>Set-Cookie: session=xyz123; HttpOnly
<br><br>
<br>En JavaScript, evitar innerHTML y preferir textContent:
<br>document.getElementById("output").textContent = userInput;
<br><br>
<br>Frameworks como React.js y Angular tienen protección contra XSS por defecto.
<br><br>El XSS es una de las vulnerabilidades más comunes en la seguridad web. Implementar una validación estricta de entrada, escapar los datos correctamente y aplicar políticas de seguridad adecuadas ayuda a prevenir estos ataques y proteger a los usuarios.]]></description><link>programacion-de-servicios-y-procesos\cross-site.html</link><guid isPermaLink="false">PROGRAMACION-DE-SERVICIOS-Y-PROCESOS/Cross-site.md</guid><pubDate>Sun, 16 Feb 2025 12:03:02 GMT</pubDate></item><item><title><![CDATA[DNS Spoofing e Inyección de Código]]></title><description><![CDATA[ 
 <br><br>El DNS Spoofing y la inyección de código son técnicas utilizadas por atacantes para manipular el tráfico de Internet y comprometer la seguridad de los usuarios. Estas vulnerabilidades pueden permitir la interceptación de datos, el redireccionamiento a sitios maliciosos y la ejecución de código arbitrario en sistemas vulnerables.<br><br><br>El DNS Spoofing es un ataque en el que se manipula el sistema de nombres de dominio (DNS) para redirigir a los usuarios a sitios web maliciosos en lugar de los legítimos.<br><br>
<br>
Cache Poisoning (Envenenamiento de Caché)

<br>Se inyectan registros DNS falsos en la memoria caché del servidor DNS.
<br>Hace que el servidor DNS devuelva direcciones IP incorrectas para dominios legítimos.


<br>
Man-in-the-Middle (MitM) en DNS

<br>Un atacante intercepta y modifica las respuestas DNS entre el usuario y el servidor DNS.


<br>
Compromiso de Servidores DNS

<br>Un atacante obtiene acceso a un servidor DNS y modifica sus registros.


<br><br>
<br>Redirección a sitios falsos para robo de credenciales.
<br>Distribución de malware a través de sitios web infectados.
<br>Intercepción de tráfico web para espionaje o manipulación de datos.
<br><br>
<br>Uso de DNSSEC (Domain Name System Security Extensions) para verificar la autenticidad de respuestas DNS.
<br>Evitar el uso de servidores DNS públicos no confiables.
<br>Utilizar VPNs para proteger la resolución de nombres de dominio.
<br>Configurar firewalls y filtros DNS que bloqueen respuestas sospechosas.
<br><br><br>La inyección de código es una técnica de ataque en la que un atacante introduce código malicioso en una aplicación vulnerable para ejecutarlo en el servidor o en el cliente.<br><br>
<br>
Inyección SQL (SQLi)

<br>Se manipulan consultas SQL para acceder, modificar o eliminar datos en bases de datos.
<br>Ejemplo de SQLi:

SELECT * FROM usuarios WHERE usuario = '' OR '1'='1';


<br>
Inyección de Comandos (Command Injection)

<br>Se inyectan comandos del sistema operativo en una aplicación vulnerable.
<br>Ejemplo en un formulario mal protegido:

; rm -rf /


<br>
Inyección de Código en HTML/JavaScript (XSS - Cross-Site Scripting)

<br>Se inyecta código JavaScript malicioso en sitios web.
<br>Ejemplo:

&lt;script&gt;alert('Hacked!');&lt;/script&gt;


<br><br>
<br>Robo de datos y credenciales.
<br>Compromiso de bases de datos y servidores.
<br>Control remoto de sistemas vulnerables.
<br><br>
<br>Validación y saneamiento de entradas de usuario.
<br>Uso de consultas parametrizadas para bases de datos.
<br>Implementación de cabeceras de seguridad HTTP.
<br>Escapar caracteres especiales en la salida.
<br><br>El DNS Spoofing y la inyección de código son ataques graves que pueden comprometer la seguridad de los usuarios y sistemas. Implementar buenas prácticas de seguridad como el uso de DNSSEC, validación de entradas y configuración adecuada de servidores puede mitigar significativamente estos riesgos.]]></description><link>programacion-de-servicios-y-procesos\dns-spoofing-e-inyeccion.html</link><guid isPermaLink="false">PROGRAMACION-DE-SERVICIOS-Y-PROCESOS/DNS Spoofing e inyeccion.md</guid><pubDate>Sun, 16 Feb 2025 12:09:18 GMT</pubDate></item><item><title><![CDATA[Protocolo FTP (File Transfer Protocol)]]></title><description><![CDATA[ 
 <br><br>El Protocolo de Transferencia de Archivos (FTP) es un protocolo de red utilizado para la transferencia de archivos entre un cliente y un servidor. Funciona sobre el protocolo TCP/IP y permite la gestión remota de archivos en servidores.<br><br>
<br>Cliente-Servidor: FTP sigue un modelo cliente-servidor, donde el cliente inicia la conexión y el servidor responde a las solicitudes.
<br>Autenticación: Puede requerir credenciales de usuario y contraseña o permitir conexiones anónimas.
<br>Modos de transferencia:

<br>Activo: El cliente abre un puerto para la transferencia y el servidor se conecta a él.
<br>Pasivo: El servidor abre un puerto y el cliente se conecta a este.


<br>Canales de comunicación:

<br>Canal de control: Se utiliza para comandos y respuestas entre cliente y servidor.
<br>Canal de datos: Se usa para transferir archivos.


<br>Soporta transferencia de archivos en texto o binario.
<br><br><br>En este modo:<br>
<br>El cliente se conecta al puerto 21 del servidor (canal de control).
<br>Cuando el cliente solicita una transferencia, el servidor inicia la conexión hacia el cliente en un puerto dinámico.
<br>El firewall del cliente puede bloquear la conexión entrante si no está configurado correctamente.
<br><br>
<br>El cliente se conecta al puerto 21 del servidor.
<br>El servidor responde con un puerto en el que está escuchando para la transferencia de datos.
<br>El cliente se conecta a este puerto para descargar o subir archivos.
<br>Es más compatible con firewalls y NAT.
<br><br>FTP utiliza comandos en texto plano para interactuar con el servidor. Algunos de los comandos más comunes son:<br>
<br>USER &lt;usuario&gt;: Iniciar sesión con un nombre de usuario.
<br>PASS &lt;contraseña&gt;: Enviar la contraseña para autenticación.
<br>LIST: Listar archivos y directorios del servidor.
<br>RETR &lt;archivo&gt;: Descargar un archivo del servidor.
<br>STOR &lt;archivo&gt;: Subir un archivo al servidor.
<br>DELE &lt;archivo&gt;: Eliminar un archivo.
<br>QUIT: Cerrar la sesión FTP.
<br><br>FTP por defecto no cifra la información, por lo que las credenciales y los datos pueden ser interceptados. Para mejorar la seguridad se utilizan variantes como:<br>
<br>FTPS (FTP sobre SSL/TLS): Añade cifrado mediante TLS para proteger datos.
<br>SFTP (Secure File Transfer Protocol): No es una extensión de FTP, sino que usa SSH para la transferencia segura.
<br><br>Para instalar y configurar un servidor FTP en Linux se pueden seguir estos pasos:<br>
<br>
Instalar vsftpd:
sudo apt update
sudo apt install vsftpd


<br>
Configurar el servidor editando /etc/vsftpd.conf.

<br>
Habilitar y reiniciar el servicio:
sudo systemctl enable vsftpd
sudo systemctl restart vsftpd


<br>
Abrir puertos en el firewall si es necesario:
sudo ufw allow 21/tcp


<br><br>En Java, la biblioteca Apache Commons Net permite implementar clientes FTP fácilmente.<br><br>import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;
import java.io.FileOutputStream;
import java.io.IOException;

public class ClienteFTP {
    public static void main(String[] args) {
        String servidor = "ftp.ejemplo.com";
        String usuario = "usuario";
        String contraseña = "clave";
        
        FTPClient ftp = new FTPClient();
        try {
            ftp.connect(servidor);
            ftp.login(usuario, contraseña);
            ftp.setFileType(FTP.BINARY_FILE_TYPE);
            
            FileOutputStream archivo = new FileOutputStream("archivo_descargado.txt");
            ftp.retrieveFile("archivo_remoto.txt", archivo);
            
            ftp.logout();
            ftp.disconnect();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
<br><br>El protocolo FTP es una solución efectiva para la transferencia de archivos en redes, aunque en entornos modernos se prefieren alternativas más seguras como FTPS y SFTP. Su implementación en servidores y clientes sigue siendo relevante en diversas aplicaciones, desde hosting hasta sistemas de almacenamiento en la nube.]]></description><link>programacion-de-servicios-y-procesos\ftp.html</link><guid isPermaLink="false">PROGRAMACION-DE-SERVICIOS-Y-PROCESOS/FTP.md</guid><pubDate>Sun, 16 Feb 2025 11:38:06 GMT</pubDate></item><item><title><![CDATA[Hash en Seguridad Informática]]></title><description><![CDATA[ 
 <br><br>El hash es una función criptográfica que transforma una entrada de datos en una cadena de longitud fija, conocida como digest. Es ampliamente utilizado en seguridad informática para almacenar contraseñas, verificar integridad de datos y en criptografía.<br><br>Para ser considerada segura, una función hash debe cumplir con:<br>
<br>Determinismo: La misma entrada siempre produce el mismo hash.
<br>Eficiencia: El cálculo del hash debe ser rápido.
<br>Preimagen resistente: No debe ser posible obtener la entrada original a partir del hash.
<br>Resistencia a colisiones: Dos entradas diferentes no deben generar el mismo hash.
<br>Avalancha: Un pequeño cambio en la entrada debe producir un hash completamente diferente.
<br><br><br><br>import hashlib

texto = "Seguridad Informática"
hash_sha256 = hashlib.sha256(texto.encode()).hexdigest()
print("SHA-256 Hash:", hash_sha256)
<br><br><br>Las contraseñas no deben almacenarse en texto plano. Se usa hashing con sal (salted hashing) para mayor seguridad.<br>Ejemplo con Bcrypt en Python:<br>import bcrypt

password = "mi_secreta_contraseña".encode()
salt = bcrypt.gensalt()
hashed_password = bcrypt.hashpw(password, salt)
print("Hash almacenado:", hashed_password)
<br><br>Se usa hashing para comprobar que un archivo no ha sido alterado.<br>import hashlib

def calcular_hash(archivo):
    hasher = hashlib.sha256()
    with open(archivo, 'rb') as f:
        while chunk := f.read(4096):
            hasher.update(chunk)
    return hasher.hexdigest()

print("Hash del archivo:", calcular_hash("archivo.txt"))
<br><br>Las funciones hash son usadas en criptografía para garantizar la autenticidad de los mensajes y firmas digitales.<br><br>
<br>Ataques de Preimagen: Intento de encontrar una entrada que produzca un hash específico.
<br>Ataques de Colisión: Buscar dos entradas diferentes que produzcan el mismo hash.
<br>Ataques de Diccionario y Fuerza Bruta: Usados para descifrar contraseñas hash almacenadas sin protección adecuada.
<br><br>Las funciones hash son esenciales en seguridad informática, pero deben usarse correctamente. Algoritmos antiguos como MD5 y SHA-1 han sido comprometidos y deben evitarse. Para almacenamiento seguro de contraseñas, Bcrypt es una mejor opción, y para integridad de datos, SHA-256 sigue siendo una opción confiable.]]></description><link>programacion-de-servicios-y-procesos\hash.html</link><guid isPermaLink="false">PROGRAMACION-DE-SERVICIOS-Y-PROCESOS/Hash.md</guid><pubDate>Sun, 16 Feb 2025 11:49:33 GMT</pubDate></item><item><title><![CDATA[Hilos - Java]]></title><description><![CDATA[ 
 <br>En Java, un hilo (Thread) es la unidad más pequeña de ejecución dentro de un proceso. Los hilos permiten ejecutar múltiples tareas en paralelo dentro de una misma aplicación, aprovechando mejor los recursos del sistema y mejorando el rendimiento.<br><br>Existen dos formas principales de crear un hilo en Java:<br>
<br>Extendiendo la clase Thread
<br>Implementando la interfaz Runnable
<br><br>class MiHilo extends Thread {
    public void run() {
        System.out.println("Hilo en ejecución: " + Thread.currentThread().getName());
    }
}

public class HilosEjemplo {
    public static void main(String[] args) {
        MiHilo hilo1 = new MiHilo();
        hilo1.start(); // Inicia la ejecución del hilo
    }
}
<br><br>class MiRunnable implements Runnable {
    public void run() {
        System.out.println("Hilo en ejecución: " + Thread.currentThread().getName());
    }
}

public class HilosEjemplo {
    public static void main(String[] args) {
        Thread hilo1 = new Thread(new MiRunnable());
        hilo1.start(); // Inicia la ejecución del hilo
    }
}
<br><br>Al trabajar con hilos, existen varios métodos útiles que permiten su control:<br>
<br>start(): Inicia la ejecución del hilo.
<br>run(): Contiene el código que ejecutará el hilo.
<br>sleep(milisegundos): Detiene el hilo por el tiempo especificado.
<br>join(): Espera a que el hilo actual termine su ejecución.
<br>isAlive(): Verifica si el hilo aún está en ejecución.
<br>Ejemplo de uso de sleep() y join():<br>class HiloEjemplo extends Thread {
    public void run() {
        try {
            for (int i = 1; i &lt;= 5; i++) {
                System.out.println("Iteración " + i + " de " + Thread.currentThread().getName());
                Thread.sleep(1000); // Pausa de 1 segundo
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

public class Main {
    public static void main(String[] args) {
        HiloEjemplo hilo1 = new HiloEjemplo();
        HiloEjemplo hilo2 = new HiloEjemplo();
        
        hilo1.start();
        try {
            hilo1.join(); // Espera a que termine hilo1 antes de iniciar hilo2
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        hilo2.start();
    }
}
<br><br>Para una mejor gestión de hilos, Java proporciona la API ExecutorService, que permite manejar grupos de hilos de manera eficiente.<br>import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

class Tarea implements Runnable {
    public void run() {
        System.out.println("Ejecutando tarea en hilo: " + Thread.currentThread().getName());
    }
}

public class ExecutorExample {
    public static void main(String[] args) {
        ExecutorService executor = Executors.newFixedThreadPool(3);
        for (int i = 0; i &lt; 5; i++) {
            executor.execute(new Tarea());
        }
        executor.shutdown();
    }
}
<br><br>Cuando múltiples hilos acceden a la misma variable o recurso compartido, pueden ocurrir condiciones de carrera. Para evitar esto, se utiliza la sincronización con synchronized.<br>class Contador {
    private int count = 0;

    public synchronized void incrementar() {
        count++;
    }

    public int getCount() {
        return count;
    }
}

public class SincronizacionEjemplo {
    public static void main(String[] args) throws InterruptedException {
        Contador contador = new Contador();
        
        Runnable tarea = () -&gt; {
            for (int i = 0; i &lt; 1000; i++) {
                contador.incrementar();
            }
        };
        
        Thread hilo1 = new Thread(tarea);
        Thread hilo2 = new Thread(tarea);
        
        hilo1.start();
        hilo2.start();
        hilo1.join();
        hilo2.join();
        
        System.out.println("Valor final del contador: " + contador.getCount());
    }
}
]]></description><link>programacion-de-servicios-y-procesos\hilos-java.html</link><guid isPermaLink="false">PROGRAMACION-DE-SERVICIOS-Y-PROCESOS/Hilos - Java.md</guid><pubDate>Sun, 16 Feb 2025 11:12:40 GMT</pubDate></item><item><title><![CDATA[Phishing]]></title><description><![CDATA[ 
 <br><br>El phishing es una técnica de ciberataque basada en la suplantación de identidad para engañar a los usuarios y obtener información confidencial, como credenciales, datos bancarios o información personal. Se realiza a través de correos electrónicos, mensajes de texto, redes sociales o sitios web falsificados.<br><br>
<br>
Phishing por Correo Electrónico

<br>Se envían correos falsos que imitan a empresas legítimas.
<br>Contienen enlaces a sitios fraudulentos o archivos adjuntos maliciosos.


<br>
Spear Phishing

<br>Ataque dirigido a individuos específicos.
<br>Utiliza información personal para hacer el ataque más convincente.


<br>
Whaling

<br>Variante del spear phishing dirigida a altos ejecutivos y personas de alto perfil.


<br>
Smishing (SMS Phishing)

<br>Uso de mensajes de texto fraudulentos para engañar a los usuarios.


<br>
Vishing (Voice Phishing)

<br>Llamadas telefónicas donde los atacantes se hacen pasar por entidades legítimas.


<br>
Pharming

<br>Manipulación del DNS para redirigir a los usuarios a sitios web falsificados sin que lo noten.


<br><br>
<br>Remitente sospechoso: Verificar la dirección del correo electrónico.
<br>Errores gramaticales o de ortografía: Indicativo de un intento de fraude.
<br>Urgencia excesiva: Mensajes que buscan generar pánico para que el usuario actúe rápidamente.
<br>Enlaces sospechosos: Pasar el cursor sobre los enlaces para verificar si redirigen a sitios legítimos.
<br>Solicitudes inusuales: Empresas legítimas nunca solicitan credenciales o datos sensibles por correo electrónico o SMS.
<br><br>Correo Falso:<br>De: soporte@banco-falso.com
Asunto: ¡Alerta de Seguridad! Verifique su Cuenta

Estimado Cliente,

Detectamos actividad sospechosa en su cuenta. Para evitar el bloqueo, haga clic en el siguiente enlace e inicie sesión:

[https://banco-falso.com/verificar](https://banco-falso.com/verificar)

Atentamente,
Soporte de Seguridad Bancaria
<br><br>
<br>No hacer clic en enlaces sospechosos.
<br>No descargar archivos adjuntos de remitentes desconocidos.
<br>Verificar las URL antes de ingresar credenciales.
<br>Activar la autenticación en dos pasos (2FA) para mayor seguridad.
<br>Usar software de seguridad y mantenerlo actualizado.
<br>Denunciar intentos de phishing a las entidades correspondientes.
<br><br>
<br>Extensiones para Navegadores: Bloqueadores de sitios maliciosos.
<br>Gestores de Contraseñas: Evitan el ingreso de credenciales en sitios falsos.
<br>Correos Electrónicos con Filtros Antiphishing: Soluciones empresariales de seguridad.
<br>Plataformas de Concienciación: Simulaciones de phishing para entrenamiento.
<br><br>El phishing es una de las amenazas más comunes en la ciberseguridad, pero con medidas preventivas adecuadas, es posible minimizar el riesgo de caer en este tipo de engaño. La educación y la precaución son fundamentales para la seguridad en línea.]]></description><link>programacion-de-servicios-y-procesos\phishing.html</link><guid isPermaLink="false">PROGRAMACION-DE-SERVICIOS-Y-PROCESOS/Phishing.md</guid><pubDate>Sun, 16 Feb 2025 11:55:52 GMT</pubDate></item><item><title><![CDATA[Pixel Tracking]]></title><description><![CDATA[ 
 <br><br>El Pixel Tracking es una técnica utilizada en marketing digital y ciberseguridad para rastrear la actividad de los usuarios en sitios web, correos electrónicos y aplicaciones. Consiste en una pequeña imagen invisible (normalmente de 1x1 píxel) incrustada en un contenido digital que envía información al servidor cuando se carga.<br><br>
<br>Se incrusta un píxel transparente en un correo electrónico o página web.
<br>Cuando el usuario abre el correo o accede al sitio web, el píxel se carga desde un servidor.
<br>El servidor registra información sobre la interacción del usuario, como:

<br>Dirección IP
<br>Tipo de dispositivo y navegador
<br>Ubicación aproximada
<br>Hora y fecha de la visualización
<br>Actividades realizadas en la página


<br><br><br>
<br>Permite a los anunciantes medir la efectividad de sus campañas.
<br>Rastrea conversiones y comportamientos del usuario.
<br>Personaliza anuncios según la actividad del usuario.
<br><br>
<br>Se usa en email marketing para saber si un destinatario ha abierto un correo.
<br>Permite medir la tasa de apertura y engagement.
<br><br>
<br>Se emplea para rastrear el comportamiento de los visitantes en un sitio web.
<br>Ayuda a optimizar la experiencia del usuario y mejorar el contenido.
<br><br>
<br>Detecta accesos sospechosos o no autorizados.
<br>Se usa en investigaciones forenses digitales.
<br><br>Un píxel de seguimiento puede ser un simple elemento &lt;img&gt; en un correo o página web:<br>&lt;img src="https://servidor.com/tracking-pixel.png" width="1" height="1" style="display:none;" /&gt;
<br>Cuando este píxel se carga, el servidor registra la actividad.<br><br>Si bien es una herramienta útil en marketing y análisis, también puede ser usada para rastrear usuarios sin su consentimiento, lo que genera preocupaciones de privacidad.<br><br>
<br>Bloquear imágenes en correos electrónicos: Muchos clientes de correo ofrecen la opción de no cargar imágenes automáticamente.
<br>Usar extensiones de privacidad: Herramientas como uBlock Origin o Privacy Badger pueden bloquear píxeles de seguimiento.
<br>Utilizar VPN o servidores proxy: Para ocultar la dirección IP real.
<br>Revisar políticas de privacidad de sitios web y servicios de correo.
<br><br>El Pixel Tracking es una técnica poderosa para recopilar datos de usuarios, utilizada tanto en marketing como en ciberseguridad. Sin embargo, plantea riesgos de privacidad que los usuarios deben conocer y mitigar mediante herramientas y configuraciones adecuadas.]]></description><link>programacion-de-servicios-y-procesos\pixel-tracking.html</link><guid isPermaLink="false">PROGRAMACION-DE-SERVICIOS-Y-PROCESOS/Pixel - Tracking.md</guid><pubDate>Sun, 16 Feb 2025 11:59:29 GMT</pubDate></item><item><title><![CDATA[Procesos C]]></title><description><![CDATA[ 
 <br>En el lenguaje de programación C, un proceso es una instancia en ejecución de un programa. Cada proceso se ejecuta en un espacio de memoria separado y puede interactuar con otros procesos mediante diversas técnicas como pipes, colas de mensajes y memoria compartida.<br><br>En C, la función más común para crear procesos es fork(), que genera un nuevo proceso hijo que es una copia del proceso padre.<br><br>#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

int main() {
    pid_t pid = fork();
    
    if (pid &lt; 0) {
        printf("Error al crear el proceso.\n");
        return 1;
    } else if (pid == 0) {
        printf("Soy el proceso hijo con PID: %d\n", getpid());
    } else {
        printf("Soy el proceso padre con PID: %d y mi hijo tiene PID: %d\n", getpid(), pid);
    }
    return 0;
}
<br><br>
<br>fork() devuelve 0 en el proceso hijo y el PID del hijo en el proceso padre.
<br>getpid() obtiene el PID del proceso actual.
<br>getppid() obtiene el PID del proceso padre.
<br><br>Para reemplazar el proceso actual con un nuevo programa, se utiliza la familia de funciones exec().<br><br>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;

int main() {
    char *args[] = {"/bin/ls", "-l", NULL};
    execvp(args[0], args);
    
    printf("Este mensaje no se imprimirá si execvp() tiene éxito.\n");
    return 0;
}
<br><br>El proceso padre puede esperar a que el hijo termine usando wait() o waitpid().<br><br>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/wait.h&gt;
#include &lt;unistd.h&gt;

int main() {
    pid_t pid = fork();
    if (pid == 0) {
        printf("Proceso hijo ejecutándose.\n");
        sleep(2);
        printf("Proceso hijo terminando.\n");
        exit(0);
    } else {
        printf("Esperando a que termine el hijo...\n");
        wait(NULL);
        printf("El hijo ha terminado.\n");
    }
    return 0;
}
]]></description><link>programacion-de-servicios-y-procesos\procesos-c.html</link><guid isPermaLink="false">PROGRAMACION-DE-SERVICIOS-Y-PROCESOS/Procesos C.md</guid><pubDate>Sun, 16 Feb 2025 11:10:35 GMT</pubDate></item><item><title><![CDATA[Proxies en Seguridad Informática]]></title><description><![CDATA[ 
 <br><br>Un proxy es un servidor intermedio que actúa como puente entre un cliente y el destino final en la red. Su función principal es mejorar la seguridad, el anonimato y el rendimiento en la navegación.<br><br>Existen diferentes tipos de proxies según su función y configuración:<br><br>
<br>Se coloca entre el cliente y el servidor de destino.
<br>Se usa para filtrar tráfico, restringir accesos o mejorar el rendimiento.
<br>Ejemplo: Empresas que bloquean sitios web específicos para sus empleados.
<br><br>
<br>Se sitúa frente a un servidor para gestionar las solicitudes de clientes.
<br>Mejora la seguridad y optimiza la carga de los servidores.
<br>Ejemplo: Un sitio web de alto tráfico usa un proxy inverso para distribuir la carga entre varios servidores.
<br><br>
<br>No requiere configuración en el cliente, ya que intercepta el tráfico automáticamente.
<br>Se usa en redes empresariales para monitoreo y filtrado de contenido.
<br><br>
<br>Oculta la dirección IP del cliente al servidor de destino.
<br>Se utiliza para mejorar la privacidad en la navegación web.
<br><br>
<br>No solo oculta la IP del cliente, sino que también evita que el destino detecte que se está usando un proxy.
<br><br>
<br>Permite manejar diferentes tipos de tráfico, no solo HTTP/HTTPS.
<br>Es más versátil que los proxies tradicionales y puede ser usado en aplicaciones como juegos en línea o torrents.
<br><br>
<br>Privacidad y Anonimato: Ocultan la IP real del usuario.
<br>Filtrado de Contenidos: Empresas y escuelas pueden restringir sitios web específicos.
<br>Optimización de Carga: Reducción del ancho de banda con almacenamiento en caché.
<br>Seguridad Adicional: Protección contra ataques directos al servidor.
<br>Acceso a Contenidos Restringidos: Permiten acceder a servicios bloqueados geográficamente.
<br><br>
<br>Reducción de Velocidad: Puede ralentizar la conexión dependiendo de la configuración.
<br>Falta de Cifrado: Un proxy simple no cifra la comunicación, lo que puede comprometer la seguridad.
<br>Proxies Maliciosos: Algunos proxies gratuitos pueden registrar y vender datos del usuario.
<br><br><br><br>Ejemplo de configuración de proxy en un sistema Linux:<br>export http_proxy="http://proxy.ejemplo.com:8080"
export https_proxy="http://proxy.ejemplo.com:8080"
<br><br>Ejemplo de cómo hacer una solicitud HTTP utilizando un proxy en Python:<br>import requests

proxies = {
    "http": "http://proxy.ejemplo.com:8080",
    "https": "http://proxy.ejemplo.com:8080"
}

respuesta = requests.get("http://www.google.com", proxies=proxies)
print(respuesta.text)
<br><br>Los proxies son herramientas esenciales en seguridad informática para mejorar el anonimato, la seguridad y el rendimiento de la red. Sin embargo, es fundamental elegir proxies confiables y evaluar si una VPN es una mejor alternativa para garantizar mayor privacidad y seguridad.]]></description><link>programacion-de-servicios-y-procesos\proxies.html</link><guid isPermaLink="false">PROGRAMACION-DE-SERVICIOS-Y-PROCESOS/Proxies.md</guid><pubDate>Sun, 16 Feb 2025 11:50:42 GMT</pubDate></item><item><title><![CDATA[<strong>¿Qué es la Programación de Servicios y Procesos (PSP)?</strong>]]></title><description><![CDATA[ 
 <br><br>La Programación de Servicios y Procesos (PSP) se encarga del desarrollo de aplicaciones que gestionan procesos concurrentes, comunicación entre procesos y servicios de red. Es fundamental en sistemas operativos, servidores y aplicaciones distribuidas, permitiendo la ejecución eficiente de múltiples tareas en paralelo.<br>En PSP se trabajan conceptos como:<br>
<br>Procesos y hilos: Para gestionar la ejecución de múltiples tareas simultáneamente.
<br>Sockets y redes: Para la comunicación entre aplicaciones a través de protocolos como TCP y UDP.
<br>Servicios: Para la implementación de servidores y clientes en entornos distribuidos.
<br>Seguridad: Para garantizar la integridad y confidencialidad de los datos en sistemas y redes.
<br><a data-href="Indice" href="\indice.html" class="internal-link" target="_self" rel="noopener nofollow">Indice</a>  para ver todas las notas<br>
<br><a data-href="Procesos C" href="\programacion-de-servicios-y-procesos\procesos-c.html" class="internal-link" target="_self" rel="noopener nofollow">Procesos C</a>
<br><a data-href="Hilos - Java" href="\programacion-de-servicios-y-procesos\hilos-java.html" class="internal-link" target="_self" rel="noopener nofollow">Hilos - Java</a>

<br><a data-href="Android - Java" href="\programacion-de-servicios-y-procesos\android-java.html" class="internal-link" target="_self" rel="noopener nofollow">Android - Java</a>


<br><a data-href="Sockets" href="\programacion-de-servicios-y-procesos\sockets.html" class="internal-link" target="_self" rel="noopener nofollow">Sockets</a> 

<br><a data-href="Sockets - Java" href="\programacion-de-servicios-y-procesos\sockets-java.html" class="internal-link" target="_self" rel="noopener nofollow">Sockets - Java</a>
<br><a data-href="Swing - Java" href="\programacion-de-servicios-y-procesos\swing-java.html" class="internal-link" target="_self" rel="noopener nofollow">Swing - Java</a>


<br>Segunda Trimestre:<br>
<br><a data-href="Servicios" href="\programacion-de-servicios-y-procesos\servicios.html" class="internal-link" target="_self" rel="noopener nofollow">Servicios</a>

<br><a data-href="FTP" href="\programacion-de-servicios-y-procesos\ftp.html" class="internal-link" target="_self" rel="noopener nofollow">FTP</a>
<br><a data-href="Conexiones de Servicios" href="\programacion-de-servicios-y-procesos\conexiones-de-servicios.html" class="internal-link" target="_self" rel="noopener nofollow">Conexiones de Servicios</a>
<br><a data-href="API - REST" href="\programacion-de-servicios-y-procesos\api-rest.html" class="internal-link" target="_self" rel="noopener nofollow">API - REST</a>


<br><a data-href="Seguridad" href="\programacion-de-servicios-y-procesos\seguridad.html" class="internal-link" target="_self" rel="noopener nofollow">Seguridad</a>

<br><a data-href="Criptografía Simétrica y Asimétrica" href="\programacion-de-servicios-y-procesos\criptografía-simétrica-y-asimétrica.html" class="internal-link" target="_self" rel="noopener nofollow">Criptografía Simétrica y Asimétrica</a>
<br><a data-href="Hash" href="\programacion-de-servicios-y-procesos\hash.html" class="internal-link" target="_self" rel="noopener nofollow">Hash</a>
<br><a data-href="Proxies" href="\programacion-de-servicios-y-procesos\proxies.html" class="internal-link" target="_self" rel="noopener nofollow">Proxies</a>
<br><a data-href="VPN" href="\programacion-de-servicios-y-procesos\vpn.html" class="internal-link" target="_self" rel="noopener nofollow">VPN</a>
<br><a data-href="Phishing" href="\programacion-de-servicios-y-procesos\phishing.html" class="internal-link" target="_self" rel="noopener nofollow">Phishing</a>
<br><a data-href="Pixel - Tracking" href="\programacion-de-servicios-y-procesos\pixel-tracking.html" class="internal-link" target="_self" rel="noopener nofollow">Pixel - Tracking</a>
<br><a data-href="Cross-site" href="\programacion-de-servicios-y-procesos\cross-site.html" class="internal-link" target="_self" rel="noopener nofollow">Cross-site</a>
<br><a data-href="Cifrados clasico" href="\programacion-de-servicios-y-procesos\cifrados-clasico.html" class="internal-link" target="_self" rel="noopener nofollow">Cifrados clasico</a>
<br><a data-href="Red TOR - Onion" href="\programacion-de-servicios-y-procesos\red-tor-onion.html" class="internal-link" target="_self" rel="noopener nofollow">Red TOR - Onion</a>
<br><a data-href="DNS Spoofing e inyeccion" href="\programacion-de-servicios-y-procesos\dns-spoofing-e-inyeccion.html" class="internal-link" target="_self" rel="noopener nofollow">DNS Spoofing e inyeccion</a>


]]></description><link>programacion-de-servicios-y-procesos\psp.html</link><guid isPermaLink="false">PROGRAMACION-DE-SERVICIOS-Y-PROCESOS/PSP.md</guid><pubDate>Wed, 19 Feb 2025 09:26:04 GMT</pubDate></item><item><title><![CDATA[Red Tor y Dominios .onion]]></title><description><![CDATA[ 
 <br><br>La Red Tor (The Onion Router) es un sistema de comunicaciones anónimas que permite a los usuarios navegar por Internet sin revelar su identidad ni su ubicación. Tor redirige el tráfico a través de múltiples nodos encriptados, proporcionando anonimato y privacidad en la web.<br><br>
<br>Encaminamiento en Cebolla: El tráfico de datos se cifra en múltiples capas y pasa por una serie de nodos aleatorios antes de llegar a su destino.
<br>Red de Nodos:

<br>Nodo de entrada: Primer nodo que recibe la conexión.
<br>Nodo intermedio: Pasa el tráfico sin conocer su origen o destino.
<br>Nodo de salida: Desencripta la última capa y envía los datos al destino final.


<br>Navegación Anónima: Gracias a este proceso, la IP real del usuario permanece oculta.
<br><br>Los sitios web en la red Tor utilizan la extensión .onion, que no está disponible en la web tradicional. Para acceder a estos sitios, se debe usar el navegador Tor o configuraciones especializadas.<br><br>d34x2lk1j1f2.onion
<br>Estos sitios son utilizados para preservar la privacidad de usuarios y servicios legítimos, pero también pueden albergar contenido ilegal.<br><br>
<br>Anonimato: Oculta la identidad y la dirección IP del usuario.
<br>Evasión de censura: Permite el acceso a información restringida en algunos países.
<br>Protección contra vigilancia: Previene la monitorización del tráfico de Internet.
<br><br>
<br>Velocidad lenta debido a la encriptación y el enrutamiento a través de múltiples nodos.
<br>Uso indebido: La red es utilizada tanto para fines legítimos como para actividades ilegales.
<br>No garantiza anonimato total si no se toman medidas adicionales de seguridad.
<br><br>
<br>No iniciar sesión en cuentas personales para evitar filtraciones de identidad.
<br>Desactivar JavaScript en el navegador Tor para minimizar vulnerabilidades.
<br>No descargar archivos desconocidos, ya que podrían contener malware.
<br>Usar una VPN combinada con Tor para mayor privacidad.
<br><br>
<br>I2P (Invisible Internet Project): Similar a Tor, pero con un enfoque en la anonimización de servicios internos.
<br>Freenet: Red descentralizada enfocada en compartir información sin censura.
<br><br>La Red Tor es una herramienta poderosa para el anonimato y la privacidad en línea, aunque debe usarse con precaución para evitar riesgos de seguridad. Es una solución útil para periodistas, activistas y usuarios que buscan proteger su identidad en la web.]]></description><link>programacion-de-servicios-y-procesos\red-tor-onion.html</link><guid isPermaLink="false">PROGRAMACION-DE-SERVICIOS-Y-PROCESOS/Red TOR - Onion.md</guid><pubDate>Sun, 16 Feb 2025 12:07:18 GMT</pubDate></item><item><title><![CDATA[Seguridad en la Informática]]></title><description><![CDATA[ 
 <br><br>La seguridad informática es el conjunto de prácticas y tecnologías diseñadas para proteger sistemas, redes y datos contra accesos no autorizados, ataques cibernéticos y fallos de seguridad. Su objetivo es garantizar la confidencialidad, integridad y disponibilidad de la información.<br><br><br>Software malicioso diseñado para dañar sistemas:<br>
<br>Virus: Se replican y afectan archivos del sistema.
<br>Troyanos: Se disfrazan de software legítimo.
<br>Ransomware: Secuestra archivos y exige un rescate.
<br>Spyware: Roba información sin el conocimiento del usuario.
<br><br>Técnica de ingeniería social que busca obtener datos personales a través de correos fraudulentos o sitios web falsos.<br><br>Intento sistemático de adivinar contraseñas probando múltiples combinaciones hasta encontrar la correcta.<br><br>Consiste en manipular consultas SQL para acceder a bases de datos de forma no autorizada.<br><br>Saturación de un servidor con múltiples solicitudes para colapsarlo y dejarlo inaccesible.<br><br><br>
<br>Utilizar contraseñas largas y complejas.
<br>No reutilizar contraseñas en diferentes servicios.
<br>Implementar gestores de contraseñas.
<br><br>Añadir una capa extra de seguridad con códigos de verificación, biometría o dispositivos físicos.<br><br>Utilizar algoritmos de cifrado como AES y RSA para proteger información sensible en tránsito y en reposo.<br><br>Mantener el software, sistemas operativos y dispositivos actualizados para corregir vulnerabilidades conocidas.<br><br>Implementar soluciones de seguridad que protejan contra accesos no autorizados y amenazas en tiempo real.<br><br>
<br>Configurar correctamente routers y puntos de acceso.
<br>Usar VPN para conexiones seguras.
<br>Segmentar redes para minimizar riesgos.
<br><br>Capacitar a los usuarios sobre buenas prácticas en seguridad informática para evitar ataques de ingeniería social.<br><br>
<br>Principio del Mínimo Privilegio: Restringir permisos solo a lo necesario.
<br>Validación de Entradas: Evitar inyecciones SQL y otras vulnerabilidades.
<br>Pruebas de Penetración: Simular ataques para identificar debilidades.
<br><br>La seguridad informática es un aspecto crucial en el mundo digital actual. Implementar medidas preventivas y mantener una mentalidad proactiva es esencial para proteger sistemas y datos frente a amenazas en constante evolución.]]></description><link>programacion-de-servicios-y-procesos\seguridad.html</link><guid isPermaLink="false">PROGRAMACION-DE-SERVICIOS-Y-PROCESOS/Seguridad.md</guid><pubDate>Sun, 16 Feb 2025 11:46:41 GMT</pubDate></item><item><title><![CDATA[Servicios]]></title><description><![CDATA[ 
 <br>En el contexto de la Programación de Servicios y Procesos (<a data-href="PSP" href="\programacion-de-servicios-y-procesos\psp.html" class="internal-link" target="_self" rel="noopener nofollow">PSP</a>), un servicio es una aplicación que se ejecuta en segundo plano para proporcionar funcionalidades a otros procesos o dispositivos en una red. Los servicios pueden ser locales (dentro de un sistema operativo) o distribuidos (basados en una arquitectura cliente-servidor).<br><br>Los servicios en PSP presentan las siguientes características:<br>
<br>Ejecución en segundo plano: No requieren interacción directa con el usuario.
<br>Inicio automático o manual: Pueden ejecutarse al arrancar el sistema o bajo demanda.
<br>Persistencia: Se mantienen en ejecución hasta que sean detenidos o el sistema finalice.
<br>Acceso remoto: Pueden ser utilizados por otras aplicaciones a través de la red.
<br>Seguridad: Deben gestionar autenticación y control de acceso para evitar vulnerabilidades.
<br><br><br>Estos servicios se ejecutan en un solo sistema operativo y realizan tareas en segundo plano. Ejemplos:<br>
<br>Demonios en Linux: Servicios como cron (programador de tareas) y sshd (servidor SSH).
<br>Servicios en Windows: Como el Spooler de impresión y Windows Update.
<br><br>Permiten la comunicación entre dispositivos dentro de una red o a través de Internet. Ejemplos:<br>
<br>Servidores web (Apache, Nginx)
<br>Servidores de base de datos (MySQL, PostgreSQL)
<br>Servicios de mensajería (MQTT, RabbitMQ)
<br>Servicios en la nube (APIs REST, SOAP, microservicios)
<br><br>En PSP, muchos servicios siguen la arquitectura Cliente-Servidor, donde:<br>
<br>El servidor gestiona y proporciona el servicio.
<br>El cliente realiza solicitudes y consume el servicio.
<br>Ejemplo de un servicio basado en Sockets en Java:<br>import java.io.*;
import java.net.*;

public class ServidorSimple {
    public static void main(String[] args) throws IOException {
        ServerSocket servidor = new ServerSocket(5000);
        System.out.println("Servicio en ejecución...");
        
        while (true) {
            Socket socket = servidor.accept();
            PrintWriter salida = new PrintWriter(socket.getOutputStream(), true);
            salida.println("Bienvenido al servicio");
            socket.close();
        }
    }
}
<br><br>Algunas de las tecnologías y protocolos más utilizados en la programación de servicios incluyen:<br>
<br>Protocolos de comunicación: HTTP, HTTPS, FTP, WebSockets, MQTT.
<br>APIs y Web Services: REST, SOAP, GraphQL.
<br>Arquitectura de microservicios: Docker, Kubernetes, Spring Boot.
<br>Seguridad en servicios: OAuth, JWT, TLS/SSL.
<br><br>Dado que los servicios pueden ser vulnerables a ataques externos, es importante implementar buenas prácticas de seguridad:<br>
<br>Autenticación y autorización (OAuth2, JWT).
<br>Cifrado de datos (TLS/SSL, AES, RSA).
<br>Protección contra ataques (DDoS, SQL Injection, Cross-Site Scripting).
<br><br>Los servicios en Programación de Servicios y Procesos son fundamentales para la automatización, la gestión de sistemas y la comunicación en redes. Desde servicios locales hasta distribuidos, su implementación eficiente y segura es clave para el correcto funcionamiento de las aplicaciones modernas.]]></description><link>programacion-de-servicios-y-procesos\servicios.html</link><guid isPermaLink="false">PROGRAMACION-DE-SERVICIOS-Y-PROCESOS/Servicios.md</guid><pubDate>Sun, 16 Feb 2025 11:36:28 GMT</pubDate></item><item><title><![CDATA[¿Qué es un Socket?]]></title><description><![CDATA[ 
 <br><br>Un socket es un punto final de comunicación en una red entre dos dispositivos. Se utiliza para enviar y recibir datos entre procesos de una misma máquina o a través de Internet.<br><br>Existen dos tipos principales de sockets:<br>
<br>Sockets TCP (Stream Sockets): Orientados a conexión, garantizan la entrega y el orden de los datos.
<br>Sockets UDP (Datagram Sockets): No garantizan el orden ni la entrega de los datos, pero son más rápidos y eficientes en ciertos casos.
<br><br>En una comunicación basada en sockets, generalmente se usa un modelo cliente-servidor:<br>
<br>Servidor: Escucha y espera conexiones entrantes.
<br>Cliente: Se conecta al servidor y envía solicitudes.
<br>El flujo de comunicación es el siguiente:<br>
<br>El servidor crea un socket y lo vincula a un puerto.
<br>El servidor espera conexiones entrantes.
<br>Un cliente crea un socket y solicita una conexión al servidor.
<br>Se establece la conexión y se intercambian datos.
<br>La comunicación finaliza y se cierran los sockets.
<br><br>Cuando se trabaja con sockets, es importante considerar aspectos de seguridad como:<br>
<br>Cifrado de datos: Uso de TLS/SSL para proteger la comunicación.
<br>Validación de datos: Evitar ataques de inyección y manipulación de paquetes.
<br>Control de acceso: Limitar conexiones a IPs confiables y usar autenticación.
<br><br>Los sockets son ampliamente utilizados en aplicaciones como:<br>
<br>Aplicaciones web: Comunicación entre servidores y navegadores.
<br>Mensajería instantánea: Chats en tiempo real.
<br>Videojuegos en red: Sincronización entre jugadores.
<br>IoT: Dispositivos inteligentes que intercambian datos.
]]></description><link>programacion-de-servicios-y-procesos\sockets.html</link><guid isPermaLink="false">PROGRAMACION-DE-SERVICIOS-Y-PROCESOS/Sockets.md</guid><pubDate>Sun, 16 Feb 2025 11:30:29 GMT</pubDate></item><item><title><![CDATA[Sockets - Java]]></title><description><![CDATA[ 
 <br>Los <a data-href="Sockets" href="\programacion-de-servicios-y-procesos\sockets.html" class="internal-link" target="_self" rel="noopener nofollow">Sockets</a> en Java permiten la comunicación entre aplicaciones a través de una red. Java proporciona la API java.net para trabajar con sockets y desarrollar aplicaciones cliente-servidor basadas en TCP y UDP.<br><br>TCP (Transmission Control Protocol) proporciona una comunicación confiable y orientada a conexión entre dos procesos.<br><br>import java.io.*;
import java.net.*;

public class ServidorTCP {
    public static void main(String[] args) throws IOException {
        int puerto = 5000;
        ServerSocket servidor = new ServerSocket(puerto);
        System.out.println("Servidor escuchando en el puerto " + puerto);

        Socket socket = servidor.accept(); // Espera una conexión
        BufferedReader entrada = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        PrintWriter salida = new PrintWriter(socket.getOutputStream(), true);

        String mensaje = entrada.readLine();
        System.out.println("Mensaje recibido: " + mensaje);
        salida.println("Mensaje recibido: " + mensaje);

        socket.close();
        servidor.close();
    }
}
<br><br>import java.io.*;
import java.net.*;

public class ClienteTCP {
    public static void main(String[] args) throws IOException {
        String servidor = "localhost";
        int puerto = 5000;

        Socket socket = new Socket(servidor, puerto);
        PrintWriter salida = new PrintWriter(socket.getOutputStream(), true);
        BufferedReader entrada = new BufferedReader(new InputStreamReader(socket.getInputStream()));

        salida.println("Hola, servidor!");
        String respuesta = entrada.readLine();
        System.out.println("Respuesta del servidor: " + respuesta);

        socket.close();
    }
}
<br><br>UDP (User Datagram Protocol) es un protocolo sin conexión, más rápido pero menos confiable que TCP.<br><br>import java.net.*;

public class ServidorUDP {
    public static void main(String[] args) throws Exception {
        int puerto = 5000;
        DatagramSocket socket = new DatagramSocket(puerto);
        byte[] buffer = new byte[1024];

        System.out.println("Servidor UDP escuchando en el puerto " + puerto);

        DatagramPacket paquete = new DatagramPacket(buffer, buffer.length);
        socket.receive(paquete);
        
        String mensaje = new String(paquete.getData(), 0, paquete.getLength());
        System.out.println("Mensaje recibido: " + mensaje);

        socket.close();
    }
}
<br><br>import java.net.*;

public class ClienteUDP {
    public static void main(String[] args) throws Exception {
        String servidor = "localhost";
        int puerto = 5000;
        String mensaje = "Hola, servidor UDP!";
        
        DatagramSocket socket = new DatagramSocket();
        byte[] buffer = mensaje.getBytes();
        DatagramPacket paquete = new DatagramPacket(buffer, buffer.length, InetAddress.getByName(servidor), puerto);
        
        socket.send(paquete);
        System.out.println("Mensaje enviado al servidor UDP");
        
        socket.close();
    }
}
]]></description><link>programacion-de-servicios-y-procesos\sockets-java.html</link><guid isPermaLink="false">PROGRAMACION-DE-SERVICIOS-Y-PROCESOS/Sockets - Java.md</guid><pubDate>Sun, 16 Feb 2025 11:31:28 GMT</pubDate></item><item><title><![CDATA[Swing - Java]]></title><description><![CDATA[ 
 <br> Swing es una biblioteca de Java utilizada para desarrollar interfaces gráficas de usuario (GUI). Forma parte de Java Foundation Classes (JFC) y permite crear aplicaciones con componentes gráficos como ventanas, botones, menús y cuadros de texto.<br><br>
<br>Basado en AWT: Usa java.awt como base pero ofrece componentes más avanzados.
<br>Plataforma Independiente: Funciona en cualquier sistema que tenga una JVM.
<br>Ligero: No depende de los componentes nativos del sistema operativo.
<br>Personalizable: Se pueden modificar los estilos y comportamientos de los componentes.
<br><br>El componente principal en Swing es JFrame, que representa una ventana.<br><br>import javax.swing.*;

public class VentanaSimple {
    public static void main(String[] args) {
        JFrame ventana = new JFrame("Mi primera ventana");
        ventana.setSize(400, 300);
        ventana.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        ventana.setVisible(true);
    }
}
<br><br><br>Los botones permiten la interacción con el usuario.<br>import javax.swing.*;
import java.awt.event.*;

public class BotonEjemplo {
    public static void main(String[] args) {
        JFrame ventana = new JFrame("Ejemplo de JButton");
        JButton boton = new JButton("Clic aquí");
        
        boton.addActionListener(e -&gt; JOptionPane.showMessageDialog(null, "Botón presionado"));
        
        ventana.add(boton);
        ventana.setSize(300, 200);
        ventana.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        ventana.setVisible(true);
    }
}
<br><br>Se usan para mostrar texto o imágenes en la interfaz.<br>JLabel etiqueta = new JLabel("Texto de ejemplo");
ventana.add(etiqueta);
<br><br>JTextField campoTexto = new JTextField(20);
JTextArea areaTexto = new JTextArea(5, 20);
<br><br>JMenuBar barraMenu = new JMenuBar();
JMenu menu = new JMenu("Archivo");
JMenuItem item = new JMenuItem("Abrir");
menu.add(item);
barraMenu.add(menu);
ventana.setJMenuBar(barraMenu);
<br><br>Swing ofrece diferentes layouts para organizar los componentes:<br>
<br>FlowLayout (disposición en fila)
<br>BorderLayout (norte, sur, este, oeste, centro)
<br>GridLayout (disposición en cuadrícula)
<br>BoxLayout (columna o fila)
<br>Ejemplo de GridLayout:<br>ventana.setLayout(new GridLayout(2, 2));
<br><br>Para manejar eventos como clics o teclas presionadas, se utilizan ActionListener, MouseListener, y otros.<br>Ejemplo con ActionListener:<br>boton.addActionListener(e -&gt; System.out.println("Botón presionado"));
]]></description><link>programacion-de-servicios-y-procesos\swing-java.html</link><guid isPermaLink="false">PROGRAMACION-DE-SERVICIOS-Y-PROCESOS/Swing - Java.md</guid><pubDate>Sun, 16 Feb 2025 11:34:30 GMT</pubDate></item><item><title><![CDATA[VPN (Virtual Private Network)]]></title><description><![CDATA[ 
 <br><br>Una VPN (Red Privada Virtual) es una tecnología que permite establecer una conexión segura y cifrada entre un dispositivo y una red privada a través de Internet. Su principal función es proteger la privacidad del usuario, garantizar la seguridad de los datos y permitir el acceso a recursos restringidos geográficamente.<br><br>
<br>Cifrado de Datos: La VPN cifra la conexión entre el dispositivo del usuario y el servidor VPN, evitando que terceros intercepten la información.
<br>Cambio de IP: Al conectarse a un servidor VPN, la dirección IP del usuario se reemplaza por la del servidor, ocultando su ubicación real.
<br>Túnel Seguro: Los datos viajan a través de un túnel cifrado, lo que impide que hackers, ISP o gobiernos monitoreen la actividad del usuario.
<br><br><br>
<br>Permite a usuarios conectarse a una red privada desde cualquier ubicación.
<br>Usado por empresas para permitir acceso seguro a sus redes internas.
<br><br>
<br>Conecta dos redes privadas de manera segura.
<br>Comúnmente utilizado por empresas con múltiples sucursales.
<br><br>
<br>Se accede a través de un navegador web utilizando certificados SSL/TLS.
<br>No requiere software adicional en el cliente.
<br><br>
<br>Capa 2 (L2TP, PPTP): Permiten la transmisión de tráfico de red en la capa de enlace de datos.
<br>Capa 3 (IPsec, OpenVPN): Operan en la capa de red y cifran los paquetes de datos.
<br><br><br><br>
<br>Privacidad en Internet: Oculta la IP real y la actividad de navegación.
<br>Seguridad en Redes Públicas: Protege datos en conexiones Wi-Fi abiertas.
<br>Acceso a Contenidos Restringidos: Permite ver contenido bloqueado por ubicación.
<br>Evitar la Censura: Ayuda en países con restricciones en Internet.
<br>Protección contra Hackers: Cifra los datos y previene ataques de intermediario (MITM).
<br><br>
<br>Reducción de Velocidad: El cifrado puede disminuir la velocidad de conexión.
<br>Confiabilidad del Proveedor: Algunas VPN gratuitas pueden registrar y vender datos del usuario.
<br>Compatibilidad: Algunos servicios pueden bloquear el acceso a usuarios con VPN.
<br><br>Ejemplo de conexión a una VPN OpenVPN en Linux:<br>sudo apt update
sudo apt install openvpn
sudo openvpn --config mi_vpn.ovpn
<br><br>Ejemplo de cómo verificar la dirección IP antes y después de conectarse a una VPN:<br>import requests

print("IP antes de VPN:", requests.get("https://api64.ipify.org").text)

# Aquí se activaría la VPN manualmente en el sistema

print("IP después de VPN:", requests.get("https://api64.ipify.org").text)
<br><br>Las VPNs son herramientas esenciales para garantizar privacidad, seguridad y acceso a contenido restringido en Internet. Es importante elegir un proveedor confiable y un protocolo adecuado según las necesidades del usuario.]]></description><link>programacion-de-servicios-y-procesos\vpn.html</link><guid isPermaLink="false">PROGRAMACION-DE-SERVICIOS-Y-PROCESOS/VPN.md</guid><pubDate>Sun, 16 Feb 2025 11:53:35 GMT</pubDate></item><item><title><![CDATA[API]]></title><description><![CDATA[ 
 <br><a data-href="Entidad Relación" href="\proyectos-fempa\proyecto-final\entidad-relación.html" class="internal-link" target="_self" rel="noopener nofollow">Entidad Relación</a><br>Necesitamos consultar información de especies y razas tanto para entrenar la IA como para contener las posibles enfermedades y especies y razas que puede tener una Mascota <br>Para acceder a información sobre enfermedades y sus posibles tratamientos, existen varias opciones de APIs y servicios que podrías considerar:<br>
<br>
MedlinePlus API: MedlinePlus es un servicio de la Biblioteca Nacional de Medicina de Estados Unidos que proporciona información sobre enfermedades, condiciones de salud y tratamientos. Su API te permite acceder a una amplia gama de datos médicos.

<br>
Disease Ontology API: Disease Ontology es una base de datos que proporciona información estructurada sobre enfermedades humanas. Su API permite acceder a datos sobre enfermedades y sus relaciones.

<br>
RXNav API: RXNav es un servicio proporcionado por la Biblioteca Nacional de Medicina de Estados Unidos que ofrece información sobre medicamentos, incluidos detalles sobre su uso en el tratamiento de diversas enfermedades.

<br>
OpenFDA API: Aunque está más centrado en datos relacionados con la Administración de Alimentos y Medicamentos (FDA) de EE. UU., OpenFDA proporciona acceso a información sobre medicamentos, dispositivos médicos y productos alimenticios, lo que puede incluir detalles sobre su uso en el tratamiento de enfermedades.

<br>
ClinicalTrials.gov API: Este API proporciona acceso a información sobre ensayos clínicos en curso, que pueden incluir información sobre tratamientos para diversas enfermedades.

<br>Antes de utilizar cualquiera de estos servicios, asegúrate de revisar sus políticas de uso, ya que algunos pueden requerir registro o tener restricciones de acceso. Además, ten en cuenta las regulaciones de privacidad y seguridad de datos al trabajar con información médica.<br>Sí, hay varias opciones de APIs gratuitas que puedes utilizar para traducir texto de un idioma a otro. Aquí tienes algunas de las opciones más populares:<br>
<br>
Google Cloud Translation API: Este API proporciona traducción automática de texto entre miles de pares de idiomas. Ofrece una cantidad generosa de traducciones gratuitas por mes. Puedes consultar la documentación en <a data-tooltip-position="top" aria-label="https://cloud.google.com/translate/docs" rel="noopener nofollow" class="external-link" href="https://cloud.google.com/translate/docs" target="_blank">Google Cloud Translation API</a>.

<br>
Microsoft Translator Text API: Ofrece traducción automática entre más de 70 idiomas. Microsoft proporciona una cantidad limitada de traducciones gratuitas al mes. Puedes encontrar más información en <a data-tooltip-position="top" aria-label="https://www.microsoft.com/en-us/translator/translatorapi.aspx" rel="noopener nofollow" class="external-link" href="https://www.microsoft.com/en-us/translator/translatorapi.aspx" target="_blank">Microsoft Translator Text API</a>.

<br>
DeepL API: DeepL es conocido por su precisión en la traducción automática. Ofrece un API que permite la traducción entre varios idiomas. Ofrecen una opción gratuita con un límite de uso, y planes de pago para necesidades más exigentes. Puedes encontrar más información en <a data-tooltip-position="top" aria-label="https://www.deepl.com/pro-api" rel="noopener nofollow" class="external-link" href="https://www.deepl.com/pro-api" target="_blank">DeepL API</a>.

<br>
IBM Watson Language Translator: Este API permite la traducción automática de texto entre varios idiomas y ofrece una cantidad gratuita de traducciones al mes. Puedes obtener más información en <a data-tooltip-position="top" aria-label="https://www.ibm.com/cloud/watson-language-translator" rel="noopener nofollow" class="external-link" href="https://www.ibm.com/cloud/watson-language-translator" target="_blank">IBM Watson Language Translator</a>.

<br>Recuerda revisar los términos de servicio y las restricciones de uso de cada API antes de implementarlas en tu proyecto. Además, ten en cuenta que algunas de estas APIs pueden requerir que te registres para obtener una clave de API y proporcionar detalles de facturación para uso más allá de los límites gratuitos.]]></description><link>proyectos-fempa\proyecto-final\api.html</link><guid isPermaLink="false">PROYECTOS - FEMPA/PROYECTO - FINAL/API.md</guid><pubDate>Tue, 19 Mar 2024 20:23:56 GMT</pubDate></item><item><title><![CDATA[Arquitectura Limpia]]></title><description><![CDATA[ 
 <br>En general es mejor aplicar la arquitectura limpia en el backend pero en fronted tenemos framework que nos obligan a trabajen de una forma o otra<br>Pero en front end podemos usa:<br>
<br>core: Núcleo o lógica de nuestro front y tenemos toda la funcionaliadad sin depender de otras carpteas
<br>ui: capa que contiene todo lo relacionado al framework y la interfaz
<br><br>Contiene el:<br>
<br>model: contiene entidadd(clases) y los objectos de nuestra aplcaicsion y que no esten ligados al 100% a las API
<br>services: Clases que brindadn funcionaldiad a nuestra aplicacion
<br>usecases: refleja las funionalidad de la aplicacion con un metodo llamado execute()  o run()
<br>repositories: Todas las clases encargadas de la conexion con las APIs externas de servidor. 
<br>blocs: clases que unen la capa de ui y el core prubea las funciones sin usar el ui
<br><br>Contiene el:<br>
<br>Pages: Componentes que esten relacionado con el router de nuestra aplicacion
<br>smarts: usa el blocs para conectar con el core
<br>dumbs: Componentes que se apoyan los smarts para crear la interfaz grafica adecuada a nuestra aplicacion
]]></description><link>proyectos-fempa\proyecto-final\arquitectura-limpia.html</link><guid isPermaLink="false">PROYECTOS - FEMPA/PROYECTO - FINAL/Arquitectura Limpia.md</guid><pubDate>Thu, 13 Feb 2025 11:17:42 GMT</pubDate></item><item><title><![CDATA[CasosDe Uso]]></title><description><![CDATA[ 
 ]]></description><link>proyectos-fempa\proyecto-final\casosde-uso.html</link><guid isPermaLink="false">PROYECTOS - FEMPA/PROYECTO - FINAL/CasosDe Uso.md</guid><pubDate>Mon, 06 May 2024 20:15:36 GMT</pubDate></item><item><title><![CDATA[Comandos para crear proyecto]]></title><description><![CDATA[ 
 <br>mvn compile jib:build: crea imagen del proyecto de jhister<br>
docker-compose -f src/main/docker/app.yml up]]></description><link>proyectos-fempa\proyecto-final\comandos-para-crear-proyecto.html</link><guid isPermaLink="false">PROYECTOS - FEMPA/PROYECTO - FINAL/Comandos para crear proyecto.md</guid><pubDate>Sat, 13 Apr 2024 16:01:51 GMT</pubDate></item><item><title><![CDATA[Entidad Relación]]></title><description><![CDATA[ 
 <br>Acorde a los <a data-href="Requistos Funcionales" href="\proyectos-fempa\proyecto-final\requistos-funcionales.html" class="internal-link" target="_self" rel="noopener nofollow">Requistos Funcionales</a> se a hehco lo siguiente con su respectivamen cjsutificacion:<br>Entidades:<br>
<br>
Terapia: Id_terapia, descripcion, nombre, id_emfermedad

<br>
Factor:id_Factor, causa (Que lo provoca generalmente), nombre, tipo(ambiental, quimica,etc).

<br>
Cuidadaro / Hotel de perro:ID de cuidador/hotel (clave primaria), nombre, dirección, teléfono, servicios ofrecidos, etc.

<br>
Dueño de mascotas: ID de dueño (clave primaria), nombre, dirección, teléfono, etc.

<br>
Cita: Atributos: ID de cita (clave primaria), fecha, hora, motivo (estética o veterinario), etc.

<br>
Mascota(ID_mascota, nombre_mascota, fecha_nacimiento, ID_especie, ID_raza, ID_dueño)

<br>
Especie(ID_especie, nombre_especie)

<br>
Raza(ID_raza, nombre_raza, ID_especie)

<br>
Enfermedad(ID_enfermedad, nombre_enfermedad, descripción, tratamiento_recomendado)

<br>
Historial(ID_historial, ID_animal, fecha_consulta, diagnóstico, ID_enfermedad, )

<br>
Medicamento(ID_medicamento, nombre_medicamento, descripción)

<br>
Tratamiento(ID_tratamiento, ID_historial, fecha_inicio, fecha_fin, notas,)

<br>
Estética: ID de estética (clave primaria), nombre del esteticista, dirección, teléfono, especialidad (p. ej., peluquería, baño, corte de uñas, etc.), certificaciones o estudios en estética, etc.

<br>
Veterinario: ID de veterinario (clave primaria), nombre del veterinario, dirección, teléfono, especialidad (p. ej., medicina interna, cirugía, odontología, etc.), certificaciones o estudios en veterinaria, etc.
Relaciones:<br>


<br>
Mascota(ID_mascota) es de Especie(ID_especie)  1-N

<br>
Mascota(ID_mascota) es de Raza(ID_raza) 1-N

<br>
Enfermedad(ID_enfermedad) es común en Raza(ID_raza) N - N

<br>
Enfermedad(ID_enfermedad) es común en Especie(ID_raza) N - N

<br>
Enfermedad es generado por un factor o mas(n - n)

<br>
Historial(ID_historial) es de Mascota(ID_animal) 1 - N

<br>
Historial(ID_historial) tiene Enfermedad(ID_enfermedad) N - N

<br>
Historial(ID_historial) incluye Medicamento(ID_medicamento) N - N

<br>
Tratamiento(ID_tratamiento) pertenece a Historial(ID_historial) 1 -N

<br>
Dueño puede tener muchas Mascota 1 -N

<br>
Mascota puede tener citas 1 -N

<br>
Cuidador / Hotel - Mascota N -N

<br>
Cita puede ser programada con un esteticista o veterinario 1 - N

<br>
Tratamiento - enfermedad n - n

<br>
Persona: Nombre, Apellido, DNI, Edad,ID_Persona

<br>
Dueños: ID_Persona, id_perro, id_gato, Locacion, nombre, apellido, edad

<br>
Veterinarios: id_veterinario, nombre, apellido, especialidad, horarioDeTrabajo

<br>
Hoteles: id_hotel, tipo, 

<br>
Citas: id_cita, persona_id, id_animal, estetica, tratamiento.

<br>
Medicamentos: id_medicamento, 

<br>
Enfermedades

<br>
Empleado

<br>
Dueño de mascotas: ID de dueño (clave primaria), nombre, dirección, teléfono, etc.

<br>
Mascota: Atributos: ID de mascota (clave primaria), nombre, especie, raza, etc.

<br>
Cita: Atributos: ID de cita (clave primaria), fecha, hora, motivo (estética o veterinario), etc.

<br>Relaciones:<br>
<br>Relación entre Dueño de mascotas y Mascota:

<br>Un dueño puede tener varias mascotas.
<br>Una mascota pertenece a un único dueño.
<br>Relación de uno a muchos.


<br>Relación entre Mascota y Cita:

<br>Una mascota puede tener varias citas.
<br>Una cita está asociada a una única mascota.
<br>Relación de uno a muchos.


<br>Relación entre Cita y Tipo de Servicio (Estética o Veterinario):

<br>Una cita puede tener un tipo de servicio.
<br>Un tipo de servicio puede estar asociado a varias citas.
<br>Relación de uno a muchos.


<br>Justificación:<br>
<br>
Dueño - Mascota:

<br>La cardinalidad de esta relación sería "1:N", lo que significa que un dueño puede tener muchas mascotas, pero cada mascota pertenece a un único dueño.


<br>
Mascota - Especie:

<br>La cardinalidad aquí también sería "1:N", donde una especie puede tener muchas mascotas, pero cada mascota pertenece a una única especie.


<br>
Mascota - Raza:

<br>Similarmente, la cardinalidad sería "1:N". Una raza puede tener muchas mascotas, pero cada mascota pertenece a una única raza.


<br>
Enfermedad - Raza:

<br>La cardinalidad aquí sería "M:N", ya que una enfermedad puede ser común en varias razas, y una raza puede estar asociada con varias enfermedades.


<br>
Historial - Mascota:

<br>La cardinalidad sería "1:N", ya que un historial médico pertenece a una única mascota, pero una mascota puede tener varios historiales médicos (por ejemplo, consultas previas).


<br>
Historial - Enfermedad:

<br>Se puede diagnosticar varias enfermedades en un historial y una enfermada puede estar en mas de un historial


<br>
Historial - Medicamento:

<br>Igualmente, la cardinalidad sería "1:N". Cada historial médico puede incluir varios medicamentos, pero cada medicamento está asociado a un único historial médico.


<br>
Tratamiento - Historial:

<br>La cardinalidad sería "1:N". Cada tratamiento pertenece a un único historial médico, pero un historial médico puede tener varios tratamientos asociados.


<br>
Relación entre Dueño de mascotas y Mascota:

<br>Un dueño puede tener varias mascotas (1 a muchos).
<br>Una mascota pertenece a un único dueño (1 a 1).


<br>
Relación entre Mascota y Cita:

<br>Una mascota puede tener varias citas (1 a muchos).
<br>Una cita está asociada a una única mascota (1 a 1).


<br>
Relación entre Mascota y Cuidador/Hotel:

<br>Una mascota puede ser cuidada por varios cuidadores o alojada en diferentes hoteles (muchos a muchos).
<br>Un cuidador/hotel puede tener varias mascotas bajo su cuidado (muchos a muchos).


<br>
Relación entre Cita y Estética/Veterinario:

<br>Una cita puede ser programada con un esteticista o un veterinario (1 a 1).
<br>Un esteticista o un veterinario puede tener varias citas programadas (1 a muchos).


<br><img alt="entidad_relacion.png" src="\proyectos-fempa\proyecto-final\entidad_relacion.png"><br>Con esto pasamos a que <a data-href="API" href="\proyectos-fempa\proyecto-final\api.html" class="internal-link" target="_self" rel="noopener nofollow">API</a>]]></description><link>proyectos-fempa\proyecto-final\entidad-relación.html</link><guid isPermaLink="false">PROYECTOS - FEMPA/PROYECTO - FINAL/Entidad Relación.md</guid><pubDate>Tue, 19 Mar 2024 23:29:29 GMT</pubDate><enclosure url="proyectos-fempa\proyecto-final\entidad_relacion.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;proyectos-fempa\proyecto-final\entidad_relacion.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Etapas PFC]]></title><description><![CDATA[ 
 <br>Tecnologías:<br>
React, Spring , Java, IA identicadora de Animales(gatos, perros),  React, Python, React Native<br>Listado:<br>
<br>Requistos Funcionales
<br>Diseño de base de datos
<br>Uso de la herramienta que te hace todo el proyecto de apring
<br>Python IA
<br>Datos de animales
<br>Crear Interfaz
<br>Unir funcionalidades con todo
<br>mvn compile jib:build ]]></description><link>proyectos-fempa\proyecto-final\etapas-pfc.html</link><guid isPermaLink="false">PROYECTOS - FEMPA/PROYECTO - FINAL/Etapas PFC.md</guid><pubDate>Mon, 15 Apr 2024 17:41:33 GMT</pubDate></item><item><title><![CDATA[Requisitos Funcionales]]></title><description><![CDATA[ 
 <br><a data-href="Etapas PFC" href="\proyectos-fempa\proyecto-final\etapas-pfc.html" class="internal-link" target="_self" rel="noopener nofollow">Etapas PFC</a><br><br>
<br>Sistema de gestión (CRUD) de reporte de animales
<br>Sistema de gestión (CRUD) de animales
<br>Sistema de gestión (CRUD) de hoteles de perros
<br>Sistema de gestión (CRUD) de citas a Veterinario
<br>Sistema de gestión (CRUD) de Farmacia de animales
<br>Cámara que identifica si es un gato o perro
<br>Cámara que identifica algunas especies de perros, y de ahi saca toda las posibles enfermedades del mismo 
<br>Camara que identifica los gatos y algunas especies y de ahi saca sus posibles problemas o enfermedades 
<br>Aplicacion movil que se pueda conseguir cita veterinario
<br>Aplicacion movil que se pude sacar turno de hotel de veterinario
<br>Aplicación móvil para sacar turno para corte de pelo y bañado de animal
<br>Guardas grandes cantidades de datos
<br>Notifcaciones
<br>Gurdar fotos de estados inicial de mascota y mejorar
<br><br>
<br>React
<br>Spring boot
<br>Spring Segurity
<br>Python
<br>MySQL
<br>Con esto justificamos:<br><a data-href="Entidad Relación" href="\proyectos-fempa\proyecto-final\entidad-relación.html" class="internal-link" target="_self" rel="noopener nofollow">Entidad Relación</a>]]></description><link>proyectos-fempa\proyecto-final\requistos-funcionales.html</link><guid isPermaLink="false">PROYECTOS - FEMPA/PROYECTO - FINAL/Requistos Funcionales.md</guid><pubDate>Sun, 19 May 2024 23:20:02 GMT</pubDate></item><item><title><![CDATA[Clientes - Compradores]]></title><description><![CDATA[ 
 <br><br>Aquellas personas que no tienen tiempo y a la vez una persona que adopto o compro una mascota en este caso con perros y necesita sacar cita rápidamente, entonces registramos rápidamente, con una foto de la mascota le mostraremos las posibles característica y en base de algunas preguntas formular ya una ficha de la misma mascota y prepara una cita para el misma, si la mascota cuenta con un problema se puede conseguir cita, o que aparezca un veterinario a domicilio o con la formulación de algunas preguntas del síntoma y fotos de herida o demás poder realizar un diagnostico no oficial.<br>Cliente:<br>Edad: 20 - 40<br>
Que cuenta con propiedades propias ya sea campo o chale y lejos de la ciudad contando con 20 a 1hs para llegar a una veterinaria<br>
Solteros.<br>
Que viven solos<br>
Recientemente adoptaron a una mascota<br>
O buscan una cita con un veterinario<br>
Necesitan un diagnostico rápido pero no oficial para saber la gravedad de la salud de su mascota<br>Hombre o Mujer<br>
Amantes de perros<br>
que adopto a un perro o uno nuevo y cuenta con una mascota<br>
Que cuenta con una o dos propiedades<br>
Clase media<br>
Distancia lejana a la ciudad tardan dado entre 20 a 1hr para llegar a una veterinaria<br>
30 años<br>
Soltero/a<br>
Casi sin tiempo libre]]></description><link>proyectos-fempa\proyecto-via-creadon\clientes-compradores.html</link><guid isPermaLink="false">PROYECTOS - FEMPA/PROYECTO - VIA CREADON/Clientes - Compradores.md</guid><pubDate>Wed, 04 Oct 2023 09:19:42 GMT</pubDate></item><item><title><![CDATA[Competidores:]]></title><description><![CDATA[ 
 <br><br>
<br>qvet
<br>MyVete
<br>Smart Vet
<br>IDEXX Laboratories
<br>AVImark (APP)
<br>ezyVet (APP)
<br>Vetstar (APP)
<br>ImproMed
<br>Intravet
<br>VIA Information Systems (APP)
<br>DVMAX (APP)
<br>Vetter Software (APP)
<br>Animal Intelligence Software (APP)
<br>Cornerstone (APP)
<br>ARK
<br>Gestor Vet
<br>Iverter
<br>WinVet
<br>ZooVet
<br>System Animal (APP)
<br>Okvet (gratuitio)
<br>System Pet
]]></description><link>proyectos-fempa\proyecto-via-creadon\competidores.html</link><guid isPermaLink="false">PROYECTOS - FEMPA/PROYECTO - VIA CREADON/Competidores.md</guid><pubDate>Wed, 04 Oct 2023 09:19:42 GMT</pubDate></item><item><title><![CDATA[Listas de Propuestas:]]></title><description><![CDATA[ 
 <br><br>
<br>Sistema de librería junto con evaluación de empleados y supervisores

<br>Mejoras: Comparación entre horas y cantidad de prestamos. Algún sistema de productividad<a data-tooltip-position="top" aria-label="https://medium.com/front-end-weekly/detecci%C3%B3n-de-objetos-en-tiempo-real-en-10-l%C3%ADneas-de-c%C3%B3digo-con-tensorflow-js-a0ea199a1d12" rel="noopener nofollow" class="external-link" href="https://medium.com/front-end-weekly/detecci%C3%B3n-de-objetos-en-tiempo-real-en-10-l%C3%ADneas-de-c%C3%B3digo-con-tensorflow-js-a0ea199a1d12" target="_blank">Detección de objetos en tiempo real en 10 líneas de código con TensorFlow.js | by Francisco Suarez | Frontend Weekly | Medium</a> 


<br>Videojuego: 

<br>Juego 3D que cuente algo algún mensaje o  genera una mecánica no usada que este basado en algún truco psicológico (entrevistar un psicólogo para saber más).


<br>Aplicación de tareas

<br>Divide una tarea en partes y con fechas definas que pueden cambiar y que se pueden sincronizar entre dispositivos como un plugin de productividad en Google Chrome o Firefox.


<br>Aplicación de organización (Solo para computadoras)
<br>Mascara detector de movimiento y seguridad:

<br>Se puede combinar con tecnologías que conozco y poder detectar aquellas personas comunes.


<br>Lista de comandos a voz mejorado ya que son muy malos
<br>Sistema de veterinario:

<br>Detecta el tipo de animal , características  del mismo posibles enfermedades y demás
<br>Aplicación que se puede usar inteligencia artificial para sacar la ficha de del animal y demás y ahorrar tiempo de productividad a través de la cámara podemos sacar un fichado de manera rápida, programando con la veterinario mas cercana o llamar al veterinario mas cercano que podamos usar.
<br>Puedo usar un ERP ya conocido y atreves de una API podemos entre comunicar la información.
<br><a data-tooltip-position="top" aria-label="https://www.youtube.com/watch?v=UxGzzBg9YDM" rel="noopener nofollow" class="external-link" href="https://www.youtube.com/watch?v=UxGzzBg9YDM" target="_blank">02 Hola Mundo SISTEMA VETERINARIO (PHP y MySql) FullStack - YouTube</a>
<br>


]]></description><link>proyectos-fempa\proyecto-via-creadon\listas-de-propuestas.html</link><guid isPermaLink="false">PROYECTOS - FEMPA/PROYECTO - VIA CREADON/Listas de propuestas.md</guid><pubDate>Wed, 04 Oct 2023 09:19:42 GMT</pubDate></item><item><title><![CDATA[Ofertas Sustitutivas]]></title><description><![CDATA[ 
 <br><br>
<br>Systema Animal
<br>AVI Mark mobile
<br>ezyVet Mobile
<br>IDEX Vet Connect PLUS
<br>VIA mobile
<br>DVMAX
<br>Vetstoria
<br>Vetter Software
<br>VisionVPM Mobile
]]></description><link>proyectos-fempa\proyecto-via-creadon\ofertas-sustitutivas.html</link><guid isPermaLink="false">PROYECTOS - FEMPA/PROYECTO - VIA CREADON/Ofertas Sustitutivas.md</guid><pubDate>Wed, 04 Oct 2023 09:19:42 GMT</pubDate></item><item><title><![CDATA[Potenciales]]></title><description><![CDATA[ 
 <br>Persona Mayor 60<br>
Solitaria/o<br>
Con una o dos mascotas<br>
No recibe ayuda de algún familiar<br>
Que vive en el campo o chale<br>
Perros ya cercana a la edad limite de tiempo de vida conocido<br>
No cuenta tiempo zpara llevar a veterinario]]></description><link>proyectos-fempa\proyecto-via-creadon\potenciales.html</link><guid isPermaLink="false">PROYECTOS - FEMPA/PROYECTO - VIA CREADON/Potenciales.md</guid><pubDate>Wed, 04 Oct 2023 09:19:42 GMT</pubDate></item><item><title><![CDATA[<strong>Blockchain: Concepto y Funcionamiento</strong>]]></title><description><![CDATA[ 
 <br><br><br>El Blockchain es una tecnología de almacenamiento y transmisión de información que funciona como un registro digital descentralizado. Se caracteriza por ser seguro, inmutable y transparente, lo que permite realizar transacciones sin intermediarios.<br><br>Un blockchain se compone de bloques de datos conectados de forma secuencial, formando una cadena de bloques. Cada bloque contiene:<br>
<br>Datos de la transacción.
<br>Hash (una firma digital única del bloque).
<br>Hash del bloque anterior, lo que lo vincula con el anterior y crea una cadena inmutable.
<br><br><br>✅ Descentralización: No depende de una entidad central, sino que los datos están distribuidos en múltiples nodos.<br>
✅ Inmutabilidad: Una vez que los datos se registran en un bloque, no pueden modificarse sin alterar toda la cadena.<br>
✅ Seguridad: Utiliza criptografía para proteger los datos.<br>
✅ Transparencia: Cualquier usuario puede verificar las transacciones en la red.  <br><br><br>
<br>Un usuario solicita una transacción.
<br>La transacción es transmitida a una red de nodos.
<br>Los nodos verifican la transacción a través de algoritmos de consenso.
<br>Una vez validada, la transacción se agrupa en un bloque junto con otras transacciones.
<br>El bloque es añadido a la cadena de bloques.
<br>La transacción queda registrada de forma permanente.
<br><br><br><br><br><br>🌍 Criptomonedas: Base de Bitcoin, Ethereum y otras criptomonedas.<br>
📜 Contratos Inteligentes (Smart Contracts): Automatización de acuerdos sin intermediarios.<br>
🏦 Banca y Finanzas: Reducción de fraudes y costos en transferencias.<br>
📊 Gestión de Identidad: Protección de datos personales y autenticación.<br>
📦 Logística y Cadena de Suministro: Seguimiento transparente de productos.  <br><br><br>const crypto = require('crypto');

class Block {
    constructor(index, previousHash, data) {
        this.index = index;
        this.previousHash = previousHash;
        this.timestamp = Date.now();
        this.data = data;
        this.hash = this.calculateHash();
    }

    calculateHash() {
        return crypto.createHash('sha256')
            .update(this.index + this.previousHash + this.timestamp + JSON.stringify(this.data))
            .digest('hex');
    }
}

// Ejemplo de bloque
const block1 = new Block(1, "0000", { amount: 100 });
console.log(block1);

]]></description><link>sistema-gestion-empresarial\block-chain.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Block Chain.md</guid><pubDate>Fri, 14 Feb 2025 22:01:09 GMT</pubDate></item><item><title><![CDATA[<strong>¿Qué es el Sueldo Bruto?</strong>]]></title><description><![CDATA[ 
 <br><br>El sueldo bruto es la cantidad total que un empleado percibe antes de aplicar descuentos y deducciones. No representa el monto final que recibe en su cuenta bancaria, ya que se le deben restar impuestos y otros conceptos.<br><br>Para calcular el sueldo neto (lo que realmente recibe el trabajador), se deben considerar las siguientes deducciones:  <br>
<br>Impuestos: En muchos países, se descuenta alrededor del 15% en impuestos sobre el salario.  
<br>Comisiones bancarias: Algunas entidades bancarias aplican retenciones o comisiones sobre la acreditación del sueldo.  
<br>Aportes previsionales y de seguridad social: Se descuentan contribuciones obligatorias, como jubilación, obra social, seguro de salud, etc.  
<br><br><br>Sueldo\ Neto = Sueldo\ Bruto - Impuestos - Deducciones<br>Si el sueldo bruto es $1000 y se le descuenta 15% en impuestos más una comisión bancaria de $20, el cálculo sería:<br>[<br>
Sueldo\ Neto = 1000 - (1000 \times 0.15) - 20 = 830<br>
]<br>Por lo tanto, el trabajador recibiría $830 en su cuenta bancaria.]]></description><link>sistema-gestion-empresarial\bruto.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Bruto.md</guid><pubDate>Fri, 14 Feb 2025 22:02:16 GMT</pubDate></item><item><title><![CDATA[<strong>Caja Ciega</strong>]]></title><description><![CDATA[ 
 <br><br><br>La caja ciega es una técnica utilizada en la gestión de <a data-href="Cajas" href="\sistema-gestion-empresarial\cajas.html" class="internal-link" target="_self" rel="noopener nofollow">Cajas</a> para evitar que el operador tenga acceso a la Z completa o al arqueo total. En su lugar, solo puede visualizar el monto que debería haber en la caja, sin conocer los valores exactos previamente registrados.  <br><br>✅ Prevención de fraudes y errores en la manipulación del dinero.<br>
✅ Mayor control en el cierre de caja, evitando ajustes indebidos.<br>
✅ Facilita auditorías internas, asegurando transparencia en la contabilidad.  <br><br>
<br>El sistema registra automáticamente todas las transacciones realizadas.  
<br>Al momento del cierre, el cajero no tiene acceso al total de ventas ni al saldo final esperado.  
<br>Solo se muestra el monto que debería haber en caja, permitiendo contar y registrar el efectivo.  
<br>Un supervisor o el sistema verifica si la cantidad coincide con lo esperado.  
]]></description><link>sistema-gestion-empresarial\caja-ciega.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Caja ciega.md</guid><pubDate>Fri, 14 Feb 2025 22:03:47 GMT</pubDate></item><item><title><![CDATA[<strong>Cajas</strong>]]></title><description><![CDATA[ 
 <br><br><br>El Departamento de Cajas es una sección dentro de una <a data-href="Departamento de una Empresa" href="\sistema-gestion-empresarial\departamento-de-una-empresa.html" class="internal-link" target="_self" rel="noopener nofollow">Departamento de una Empresa</a> encargada de la gestión del flujo de efectivo, la supervisión de transacciones y el control del cierre de caja.  <br><br>
<br>Realizar el cierre de caja (también llamado "Z" o arqueo de caja).  
<br>Registrar y analizar movimientos financieros.  
<br>Garantizar que el dinero en caja coincida con las transacciones registradas.  
<br>Implementar controles como la <a data-href="Caja ciega" href="\sistema-gestion-empresarial\caja-ciega.html" class="internal-link" target="_self" rel="noopener nofollow">Caja ciega</a> para mayor seguridad.  
<br><br>La "Z" o arqueo de caja es un procedimiento en el cual se verifica el efectivo disponible en la caja registradora comparándolo con las transacciones realizadas. El sistema:  <br>
<br>Recopila todas las transacciones desde la última "Z".  
<br>Calcula el valor que debería haber en caja.  
<br>Analiza los movimientos y detecta posibles inconsistencias.  
<br>Genera un informe final con el saldo esperado y cualquier diferencia detectada.  
]]></description><link>sistema-gestion-empresarial\cajas.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Cajas.md</guid><pubDate>Fri, 14 Feb 2025 22:04:57 GMT</pubDate></item><item><title><![CDATA[<strong>CFDP</strong>]]></title><description><![CDATA[ 
 <br><br><br>El Centro de Procesamiento de Datos (CFDP) es una infraestructura tecnológica encargada de almacenar, gestionar y procesar grandes volúmenes de información dentro de una organización.  <br><br>
<br>Procesamiento de datos en tiempo real para toma de decisiones.  
<br>Almacenamiento seguro de información en servidores o en la nube.  
<br>Gestión de redes y conectividad para asegurar el flujo eficiente de datos.  
<br>Seguridad informática para proteger la integridad y confidencialidad de la información.  
<br>Optimización de recursos tecnológicos mediante virtualización y automatización.  
]]></description><link>sistema-gestion-empresarial\cfdp.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/CFDP.md</guid><pubDate>Fri, 14 Feb 2025 22:08:50 GMT</pubDate></item><item><title><![CDATA[<strong>Departamento Comercial</strong>]]></title><description><![CDATA[ 
 <br><br><br>El Departamento Comercial es el área encargada de la gestión de ventas, atención a clientes y estrategias comerciales para aumentar los ingresos de la empresa. Su principal objetivo es captar y fidelizar clientes, además de diseñar estrategias para mejorar la competitividad en el mercado.  <br><br>
<br>Gestión de ventas: Controla la oferta de productos o servicios de la empresa.  
<br>Relación con clientes: Desarrolla estrategias de fidelización y captación de clientes.  
<br>Análisis del mercado: Evalúa la competencia y las oportunidades de negocio.  
<br>Estrategias de crecimiento: Diseña planes de expansión y penetración en nuevos mercados.  
]]></description><link>sistema-gestion-empresarial\comercial.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Comercial.md</guid><pubDate>Sun, 16 Feb 2025 09:37:06 GMT</pubDate></item><item><title><![CDATA[Compras]]></title><description><![CDATA[ 
 <br><br>El Departamento de Compras es una unidad dentro de un <a data-href="Departamento de una Empresa" href="\sistema-gestion-empresarial\departamento-de-una-empresa.html" class="internal-link" target="_self" rel="noopener nofollow">Departamento de una Empresa</a> encargada de gestionar la adquisición de bienes y servicios necesarios para el funcionamiento de la organización. Su principal función es comprar a los proveedores asegurando la mejor calidad, precio y condiciones comerciales.  <br><br>
<br>Seleccionar y negociar con proveedores para obtener las mejores condiciones.  
<br>Gestionar pedidos y contratos asegurando el abastecimiento oportuno.  
<br>Evaluar la calidad de productos y servicios adquiridos.  
<br>Optimizar costos sin comprometer la calidad ni la operatividad de la empresa.  
<br>Coordinar con otros departamentos para satisfacer sus necesidades de suministro.  
]]></description><link>sistema-gestion-empresarial\compras.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Compras.md</guid><pubDate>Fri, 14 Feb 2025 22:08:21 GMT</pubDate></item><item><title><![CDATA[<strong>Módulo de Ventas y CRM en ERP</strong>]]></title><description><![CDATA[ 
 <br><br><br>Este <a data-href="módulo" href="\sistema-gestion-empresarial\módulo.html" class="internal-link" target="_self" rel="noopener nofollow">módulo</a> gestiona las relaciones con los clientes y los procesos de ventas para mejorar la experiencia del usuario y aumentar la fidelización.  <br><br>
<br>Registro y seguimiento de clientes y prospectos.  
<br>Automatización del ciclo de ventas.  
<br>Análisis de comportamiento del cliente y preferencias.  
<br>Gestión de campañas de marketing y ventas.  
<br>Un CRM bien implementado mejora la rentabilidad y la retención de clientes.  ]]></description><link>sistema-gestion-empresarial\crm.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/CRM.md</guid><pubDate>Sun, 16 Feb 2025 09:57:34 GMT</pubDate></item><item><title><![CDATA[<strong>CRP (Capacity Requirements Planning)</strong>]]></title><description><![CDATA[ 
 <br><br><br>El CRP (Capacity Requirements Planning) es uno de los <a data-href="módulo" href="\sistema-gestion-empresarial\módulo.html" class="internal-link" target="_self" rel="noopener nofollow">módulo</a>s de los ERP dedicado a la planificación de los requerimientos de capacidad dentro de una empresa. Su función principal es asegurar que los recursos productivos, como mano de obra y maquinaria, sean suficientes para cumplir con la demanda de producción.  <br><br>
<br>Analiza la capacidad de producción disponible en función de la demanda.  
<br>Optimiza el uso de recursos para evitar sobrecargas o ineficiencias.  
<br>Coordina con el MRP (Material Requirements Planning) para asegurar la disponibilidad de materiales y recursos.  
<br>Genera reportes y proyecciones para mejorar la toma de decisiones.  
<br><br>
<br>CRP (Capacity Requirements Planning) → Gestiona la capacidad de producción y recursos.  
<br><a data-href="CRM" href="\sistema-gestion-empresarial\crm.html" class="internal-link" target="_self" rel="noopener nofollow">CRM</a> (Customer Relationship Management) → Gestiona las relaciones con los clientes.  
<br>El CRP es clave en la planificación operativa de una empresa, asegurando que la capacidad de producción sea suficiente para cumplir con los pedidos sin generar desperdicios o retrasos.  ]]></description><link>sistema-gestion-empresarial\crp.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/CRP.md</guid><pubDate>Sun, 16 Feb 2025 09:54:38 GMT</pubDate></item><item><title><![CDATA[<strong>Datos: Tipos y Clasificación</strong>]]></title><description><![CDATA[ 
 <br><br><br>Los datos son unidades de información que pueden ser procesadas, analizadas y utilizadas para la toma de decisiones en diferentes contextos, como la informática, la estadística y la ciencia de datos.  <br>Los datos pueden clasificarse en heterogéneos y homogéneos según sus características y estructura.  <br><br><br>Los datos homogéneos son aquellos que tienen el mismo tipo, estructura o formato. Se caracterizan por su uniformidad, lo que facilita su procesamiento y análisis.  <br><br>
<br>Un conjunto de números enteros: [10, 20, 30, 40, 50]  
<br>Una lista de nombres de personas: ["Ana", "Luis", "Carlos", "Marta"]  
<br>Un array de valores booleanos: [true, false, true, true]  
<br>En programación, los datos homogéneos suelen almacenarse en arrays o vectores donde todos los elementos son del mismo tipo.  <br><br><br>Los datos heterogéneos son aquellos que tienen diferentes tipos, estructuras o formatos dentro del mismo conjunto.  <br><br>
<br>Un conjunto que mezcla números, texto y booleanos: [10, "Carlos", true, 25.5]  
<br>Un objeto en JavaScript con diferentes tipos de datos:  
<br>
let persona = { nombre: "Ana", edad: 30, activo: true };


]]></description><link>sistema-gestion-empresarial\datos.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Datos.md</guid><pubDate>Fri, 14 Feb 2025 22:13:31 GMT</pubDate></item><item><title><![CDATA[<strong>¿Qué es un Departamento en una Empresa?</strong>]]></title><description><![CDATA[ 
 <br><br>Un departamento dentro de una empresa es una unidad organizativa encargada de gestionar un área específica de la compañía. Cada departamento tiene responsabilidades, objetivos y procesos que contribuyen al funcionamiento y crecimiento del negocio.  <br><br><br>Las empresas pueden contar con diversos departamentos según su tamaño y sector. Algunos de los más comunes son:  <br>
<br><a data-href="Comercial" href="\sistema-gestion-empresarial\comercial.html" class="internal-link" target="_self" rel="noopener nofollow">Comercial</a>  
<br><a data-href="IT" href="\sistema-gestion-empresarial\it.html" class="internal-link" target="_self" rel="noopener nofollow">IT</a> (Tecnología de la Información)  
<br><a data-href="Financiero" href="\sistema-gestion-empresarial\financiero.html" class="internal-link" target="_self" rel="noopener nofollow">Financiero</a>  
<br><a data-href="RRHH" href="\sistema-gestion-empresarial\rrhh.html" class="internal-link" target="_self" rel="noopener nofollow">RRHH</a> (Recursos Humanos)  
<br><a data-href="Logística" href="\sistema-gestion-empresarial\logística.html" class="internal-link" target="_self" rel="noopener nofollow">Logística</a>  
<br><a data-href="Jurídico" href="\sistema-gestion-empresarial\jurídico.html" class="internal-link" target="_self" rel="noopener nofollow">Jurídico</a>  
<br><a data-href="Compras" href="\sistema-gestion-empresarial\compras.html" class="internal-link" target="_self" rel="noopener nofollow">Compras</a>  
<br><a data-href="Marketing" href="\sistema-gestion-empresarial\marketing.html" class="internal-link" target="_self" rel="noopener nofollow">Marketing</a>  
<br><a data-href="Cajas" href="\sistema-gestion-empresarial\cajas.html" class="internal-link" target="_self" rel="noopener nofollow">Cajas</a>  
<br><a data-href="Innovación" href="\sistema-gestion-empresarial\innovación.html" class="internal-link" target="_self" rel="noopener nofollow">Innovación</a>  
<br>Cada uno cumple un rol clave en la gestión y operación de la empresa.  <br><br><br>Las empresas suelen estructurarse en una pirámide jerárquica, donde cada departamento tiene un responsable con objetivos definidos.  <br><br>
<br>CIO (Chief Information Officer) → Es el director de tecnología que reporta directamente al presidente de la empresa. Se encarga de la estrategia tecnológica y la digitalización de la compañía.  
<br>CTO (Chief Technology Officer) → Posee un conocimiento técnico más profundo que el CIO y lidera el desarrollo y mantenimiento de la tecnología dentro de la empresa. Responde ante el CIO.  
]]></description><link>sistema-gestion-empresarial\departamento-de-una-empresa.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Departamento de una Empresa.md</guid><pubDate>Fri, 14 Feb 2025 22:18:46 GMT</pubDate></item><item><title><![CDATA[EAN13]]></title><description><![CDATA[ 
 <br><br>El EAN13 (European Article Number 13) es un sistema de código de barras utilizado en productos comerciales para su identificación. Contiene 13 dígitos numéricos que representan el país de origen, el fabricante y el producto específico.  <br><br>
<br>3 primeros dígitos: Código de país.  
<br>4 o 5 dígitos siguientes: Código del fabricante.  
<br>5 o 4 dígitos siguientes: Código del producto.  
<br>Último dígito: Dígito de control para verificar la validez del código.  
<br><br>Un código "7791234567895" podría representar un producto fabricado en Argentina (779), con el código del fabricante (12345) y un identificador único del producto (6789).  <br><br><br>
<br>Identificación de productos en supermercados y tiendas.  
<br>Control de inventarios en almacenes.  
<br>Relación con sistemas de <a data-href="Trazabilidad" href="\sistema-gestion-empresarial\trazabilidad.html" class="internal-link" target="_self" rel="noopener nofollow">Trazabilidad</a> para rastrear productos.  
]]></description><link>sistema-gestion-empresarial\ean13.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/EAN13.md</guid><pubDate>Sun, 16 Feb 2025 10:20:22 GMT</pubDate></item><item><title><![CDATA[<strong>¿Qué es una Empresa?</strong>]]></title><description><![CDATA[ 
 <br><br>Una empresa es una organización formada por recursos humanos, materiales y financieros con el objetivo de producir bienes o servicios para satisfacer necesidades del mercado y obtener rentabilidad.  <br><br><br>✅ Interactúa con el entorno externo.<br>
✅ Recibe entradas (insumos, información, capital).<br>
✅ Realiza procesos internos para transformar los insumos en productos o servicios.<br>
✅ Genera una salida (productos, servicios, información).<br>
✅ Ejemplo: Una fábrica que compra materia prima, la procesa y vende productos.  <br><br>❌ No recibe entradas del entorno externo.<br>
❌ Funciona de manera autónoma sin interacción con factores externos.<br>
❌ Son poco comunes en el ámbito empresarial, ya que todas las empresas requieren recursos externos.<br>
✅ Ejemplo: Una organización autosuficiente que genera sus propios recursos sin depender del mercado externo.  ]]></description><link>sistema-gestion-empresarial\empresa.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Empresa.md</guid><pubDate>Sun, 16 Feb 2025 09:43:44 GMT</pubDate></item><item><title><![CDATA[<strong>Empresas Privadas</strong>]]></title><description><![CDATA[ 
 <br><br><br>Una empresa privada es una organización cuyo capital, gestión y decisiones pertenecen a individuos o entidades privadas, sin intervención directa del gobierno. Su principal objetivo es generar beneficio económico a través de la producción de bienes y servicios.  <br><br>✅ Propiedad privada: Pertenecen a personas, socios o inversionistas.<br>
✅ Financiación propia: Se sustentan con inversiones privadas, préstamos o ventas.<br>
✅ Objetivo de lucro: Buscan maximizar ganancias para los propietarios o accionistas.<br>
✅ Autonomía: Toman decisiones sin control directo del Estado.<br>
✅ Competencia en el mercado: Operan en mercados donde deben diferenciarse de la competencia.  <br><br><br>
<br>
Según su tamaño  

<br>Microempresas: Menos de 10 empleados.  
<br>Pequeñas empresas: Entre 10 y 50 empleados.  
<br>Medianas empresas: Entre 50 y 250 empleados.  
<br>Grandes empresas: Más de 250 empleados.  


<br>
Según su estructura legal  

<br>Empresas individuales: Propiedad de una sola persona.  
<br>Sociedades: Propiedad compartida entre varios socios.  
<br>Corporaciones: Empresas grandes con accionistas.  


<br>
Según su actividad económica  

<br>Industriales: Fabricación de productos.  
<br>Comerciales: Compra y venta de bienes.  
<br>De servicios: Prestación de servicios (consultoría, tecnología, salud, etc.).  


<br><br><br>
<br>Tecnología: Apple, Microsoft, Google.  
<br>Automotriz: Ford, Toyota, BMW.  
<br>Alimentación: Coca-Cola, Nestlé, McDonald's.  
<br>Finanzas: JPMorgan Chase, Banco Santander.  
<br><br><br>]]></description><link>sistema-gestion-empresarial\empresas-privadas.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Empresas Privadas.md</guid><pubDate>Sun, 16 Feb 2025 09:45:00 GMT</pubDate></item><item><title><![CDATA[<strong>Empresas Públicas</strong>]]></title><description><![CDATA[ 
 <br><br><br>Una empresa pública es una organización cuyo capital y gestión están controlados total o parcialmente por el Estado. Su objetivo principal no siempre es generar ganancias, sino brindar servicios esenciales a la sociedad y fomentar el desarrollo económico.  <br><br>✅ Propiedad estatal: Pertenecen al gobierno, ya sea nacional, provincial o municipal.<br>
✅ Financiamiento público: Se sostienen con fondos del Estado, impuestos o tarifas por servicios.<br>
✅ Objetivo social: Priorizan el bienestar y acceso a servicios básicos antes que la rentabilidad.<br>
✅ Regulación gubernamental: Su funcionamiento está sujeto a leyes y normativas estatales.<br>
✅ Servicios esenciales: Suelen operar en sectores estratégicos como energía, transporte, salud y educación.  <br><br><br>
<br>
Según su propiedad  

<br>Totalmente públicas: Controladas al 100% por el Estado.  
<br>Mixtas: El Estado comparte propiedad con inversores privados.  


<br>
Según su función  

<br>Empresas de servicios públicos: Agua, electricidad, gas, transporte.  
<br>Empresas industriales y comerciales: Producción de bienes y servicios con fines comerciales.  
<br>Empresas estratégicas: Seguridad, telecomunicaciones, defensa nacional.  


<br><br><br>
<br>Transporte: RENFE (España), Subte de Buenos Aires (Argentina), Metro de Londres (Reino Unido).  
<br>Energía: YPF (Argentina), Petrobras (Brasil), CFE (México).  
<br>Comunicación: BBC (Reino Unido), RTVE (España).  
<br>Correos: Correo Argentino, USPS (EE.UU.), Correos de México.  
<br><br><br><br><br><br>✅ Ventajas<br>
✔️ Garantizan servicios esenciales para todos.<br>
✔️ No dependen de la rentabilidad, permitiendo accesibilidad y precios regulados.<br>
✔️ Pueden impulsar el desarrollo económico en sectores estratégicos.  <br>❌ Desventajas<br>
⚠️ Menor eficiencia y burocracia en la gestión.<br>
⚠️ Dependencia del presupuesto estatal, lo que puede generar déficit.<br>
⚠️ Posibles problemas de corrupción o mala administración.  ]]></description><link>sistema-gestion-empresarial\empresas-publicas.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Empresas Publicas.md</guid><pubDate>Sun, 16 Feb 2025 09:47:11 GMT</pubDate></item><item><title><![CDATA[<strong>ERP (Enterprise Resource Planning)</strong>]]></title><description><![CDATA[ 
 <br><br><br>Un ERP (Enterprise Resource Planning) es un <a data-href="Software Horizontal" href="\sistema-gestion-empresarial\software-horizontal.html" class="internal-link" target="_self" rel="noopener nofollow">Software Horizontal</a> estándar diseñado para gestionar de manera integral los procesos internos de una empresa. No cubre funcionalidades específicas de cada sector, pero permite la personalización mediante la compra de módulos adicionales.  <br><br>Uno de los módulos clave en los ERP es el <a data-href="CRP" href="\sistema-gestion-empresarial\crp.html" class="internal-link" target="_self" rel="noopener nofollow">CRP</a> (Capacity Requirements Planning), que se encarga de la planificación de los recursos productivos. Además, un ERP puede incluir módulos como:  <br>
<br><a data-href="Finanzas y Contabilidad" href="\sistema-gestion-empresarial\finanzas-y-contabilidad.html" class="internal-link" target="_self" rel="noopener nofollow">Finanzas y Contabilidad</a>: Gestión de ingresos, egresos y presupuestos.  
<br><a data-href="Recursos Humanos" href="\sistema-gestion-empresarial\recursos-humanos.html" class="internal-link" target="_self" rel="noopener nofollow">Recursos Humanos</a>: Administración de empleados, nóminas y contrataciones.  
<br><a data-href="Logística y Almacenes" href="\sistema-gestion-empresarial\logística-y-almacenes.html" class="internal-link" target="_self" rel="noopener nofollow">Logística y Almacenes</a>: Control de inventario y cadena de suministro.  
<br>Ventas y <a data-href="CRM" href="\sistema-gestion-empresarial\crm.html" class="internal-link" target="_self" rel="noopener nofollow">CRM</a>: Relación con clientes y gestión de ventas.  
<br><br>Algunas de las soluciones de ERP más utilizadas en el mercado son:  <br>
<br><a data-href="SAP" href="\sistema-gestion-empresarial\sap.html" class="internal-link" target="_self" rel="noopener nofollow">SAP</a>  
<br>Oracle ERP  
<br>Microsoft Dynamics 365  
<br>Odoo  
<br><br>✅ Ventajas :<br>
<br>No es necesario preocuparse por las actualizaciones de versión, ya que son gestionadas por el proveedor.  
<br>Reducción de costos operativos al centralizar procesos en un solo sistema.  
<br>Facilita la integración de datos entre diferentes áreas de la empresa.  
<br>Mayor control y automatización de tareas administrativas.  
<br>❌ Desventajas:<br>
<br>Puede requerir una alta inversión inicial para implementación y personalización.  
<br>Algunas empresas necesitan desarrollos adicionales para cubrir necesidades específicas.  
<br>Curva de aprendizaje para los empleados al adaptarse al nuevo sistema.  
]]></description><link>sistema-gestion-empresarial\erp.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/ERP.md</guid><pubDate>Sun, 16 Feb 2025 10:00:19 GMT</pubDate></item><item><title><![CDATA[<strong>ERP vs SaaS</strong>]]></title><description><![CDATA[ 
 <br><br><br>Un <a data-href="ERP" href="\sistema-gestion-empresarial\erp.html" class="internal-link" target="_self" rel="noopener nofollow">ERP</a> y un <a data-href="SaaS" href="\sistema-gestion-empresarial\saas.html" class="internal-link" target="_self" rel="noopener nofollow">SaaS</a> son modelos de software utilizados en empresas, pero tienen diferencias clave en su implementación, acceso y costos.  <br><br>
<br>Software de gestión empresarial que integra múltiples áreas de la empresa.  
<br>Puede ser local (on-premise) o en la nube.  
<br>Requiere una inversión inicial alta en licencias y servidores.  
<br>Mayor personalización y control sobre el sistema.  
<br><br>
<br>Software basado en suscripción, donde se paga por su uso.  
<br>No requiere instalación, ya que funciona en la nube.  
<br>Costo inicial bajo, pero pagos recurrentes.  
<br>Menos personalizable que un <a data-href="ERP" href="\sistema-gestion-empresarial\erp.html" class="internal-link" target="_self" rel="noopener nofollow">ERP</a> on-premise, pero más accesible y escalable.  
<br><br><br>🔹 Mayor rentabilidad para los proveedores: El modelo de suscripción garantiza ingresos constantes en lugar de una venta única.<br>
🔹 Menos costos de infraestructura: No es necesario comprar servidores o licencias costosas.<br>
🔹 Accesibilidad y escalabilidad: Se puede acceder desde cualquier lugar y ajustar según las necesidades de la empresa.  <br><br><br>]]></description><link>sistema-gestion-empresarial\erp-vs-saas.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/ERP vs SAAS.md</guid><pubDate>Sun, 16 Feb 2025 10:07:19 GMT</pubDate></item><item><title><![CDATA[<strong>Estrategia en el Ámbito Empresarial</strong>]]></title><description><![CDATA[ 
 <br><br><br>Una estrategia empresarial es el conjunto de acciones y decisiones diseñadas para alcanzar un <a data-href="Objetivo" href="\sistema-gestion-empresarial\objetivo.html" class="internal-link" target="_self" rel="noopener nofollow">Objetivo</a> dentro de una organización. Define la manera en que una empresa opera, compite y crece en su sector.  <br><br>
<br>Visión y misión: Define la dirección y propósito de la empresa.  
<br>Análisis del entorno: Evaluación de oportunidades y amenazas del mercado.  
<br>Planificación de recursos: Uso eficiente de capital, talento y tecnología.  
<br>Diferenciación y ventaja competitiva: Estrategias para destacar frente a la competencia.  
<br>Ejecución y seguimiento: Implementación y ajuste de la estrategia según resultados.  
<br><br><br>
<br>
Estrategia Corporativa  

<br>Define la dirección global de la empresa.  
<br>Ejemplo: Expansión a nuevos mercados o diversificación de productos.  


<br>
Estrategia Competitiva  

<br>Cómo la empresa se posiciona frente a la competencia.  
<br>Ejemplo: Diferenciación por calidad o liderazgo en costos.  


<br>
Estrategia Funcional  

<br>Aplicación de estrategias en departamentos específicos (marketing, ventas, producción).  
<br>Ejemplo: Campañas publicitarias para mejorar la visibilidad de la marca.  


<br><br><br>Una empresa de tecnología puede definir como estrategia:  <br>🔹 Objetivo: Aumentar su cuota de mercado en un 20% en dos años.<br>
🔹 Acción: Invertir en innovación y mejorar la atención al cliente.<br>
🔹 Resultado esperado: Mayor fidelización y crecimiento en ventas.  ]]></description><link>sistema-gestion-empresarial\estrategia.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Estrategia.md</guid><pubDate>Sun, 16 Feb 2025 10:09:33 GMT</pubDate></item><item><title><![CDATA[<strong>Departamento Financiero</strong>]]></title><description><![CDATA[ 
 <br><br><br>El Departamento Financiero es el encargado de administrar los recursos económicos de la empresa, garantizando la estabilidad y rentabilidad del negocio.  <br><br>
<br>Gestión de ingresos y egresos para garantizar un flujo de caja saludable.  
<br>Elaboración de presupuestos y reportes financieros.  
<br>Optimización de costos y análisis de inversiones.  
<br>Cumplimiento de obligaciones fiscales y contables.  
<br>Relación con bancos e inversores para financiamiento.  
]]></description><link>sistema-gestion-empresarial\financiero.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Financiero.md</guid><pubDate>Sun, 16 Feb 2025 09:39:36 GMT</pubDate></item><item><title><![CDATA[<strong>Módulo de Finanzas y Contabilidad en ERP</strong>]]></title><description><![CDATA[ 
 <br><br><br>Este <a data-href="módulo" href="\sistema-gestion-empresarial\módulo.html" class="internal-link" target="_self" rel="noopener nofollow">módulo</a> gestiona todos los aspectos financieros de la empresa, asegurando un control preciso de los ingresos, egresos y presupuestos.  <br><br>
<br>Registro y control de ingresos y egresos.  
<br>Gestión de presupuestos y planificación financiera.  
<br>Automatización de la contabilidad y generación de reportes financieros.  
<br>Cálculo de impuestos y cumplimiento normativo.  
<br>Este <a data-href="módulo" href="\sistema-gestion-empresarial\módulo.html" class="internal-link" target="_self" rel="noopener nofollow">módulo</a> es esencial para garantizar la estabilidad económica de la empresa.  ]]></description><link>sistema-gestion-empresarial\finanzas-y-contabilidad.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Finanzas y Contabilidad.md</guid><pubDate>Sun, 16 Feb 2025 09:52:46 GMT</pubDate></item><item><title><![CDATA[<strong>Departamento de Innovación</strong>]]></title><description><![CDATA[ 
 <br><br><br>El Departamento de Innovación se enfoca en el desarrollo de nuevas ideas, productos, servicios y procesos dentro de la empresa, con el objetivo de mejorar la competitividad y eficiencia.  <br><br>
<br>Investigación y desarrollo (I+D) de nuevos productos y servicios.  
<br>Optimización de procesos internos a través de nuevas metodologías.  
<br>Implementación de nuevas tecnologías en la empresa.  
<br>Fomento de una cultura de innovación y mejora continua.  
<br>Análisis de tendencias del mercado para anticiparse a cambios.  
]]></description><link>sistema-gestion-empresarial\innovación.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Innovación.md</guid><pubDate>Sun, 16 Feb 2025 09:39:04 GMT</pubDate></item><item><title><![CDATA[<strong>Departamento de IT (Tecnología de la Información)</strong>]]></title><description><![CDATA[ 
 <br><br><br>El Departamento de IT es responsable de la infraestructura tecnológica de la empresa. Su misión es garantizar que los sistemas informáticos, software y redes funcionen de manera eficiente y segura.  <br><br>
<br>Desarrollo y mantenimiento de software y bases de datos.  
<br>Gestión de redes, servidores y seguridad informática.  
<br>Soporte técnico a los empleados y resolución de problemas tecnológicos.  
<br>Implementación de nuevas tecnologías para optimizar procesos.  
<br>Protección de datos y cumplimiento de normativas de ciberseguridad.  
]]></description><link>sistema-gestion-empresarial\it.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/IT.md</guid><pubDate>Sun, 16 Feb 2025 09:37:16 GMT</pubDate></item><item><title><![CDATA[<strong>Departamento Jurídico</strong>]]></title><description><![CDATA[ 
 <br><br><br>El Departamento Jurídico es el encargado de velar por el cumplimiento de las leyes y normativas dentro de la empresa, reduciendo riesgos legales.  <br><br>
<br>Asesoría legal en contratos y acuerdos comerciales.  
<br>Representación legal ante disputas o litigios.  
<br>Supervisión del cumplimiento normativo y regulaciones.  
<br>Gestión de patentes, marcas y propiedad intelectual.  
<br>Prevención de riesgos legales en la operación de la empresa.  
]]></description><link>sistema-gestion-empresarial\jurídico.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Jurídico.md</guid><pubDate>Sun, 16 Feb 2025 09:36:51 GMT</pubDate></item><item><title><![CDATA[<strong>Departamento de Logística</strong>]]></title><description><![CDATA[ 
 <br><br><br>El Departamento de Logística es el encargado de gestionar el transporte, almacenamiento y distribución de productos dentro de una empresa. Su objetivo es asegurar que los productos lleguen a los clientes o a los puntos de venta de manera eficiente, optimizando costos y tiempos.  <br><br>
<br>Gestión de proveedores y suministros, asegurando que los materiales lleguen en tiempo y forma.  
<br>Almacenamiento y control de inventarios para evitar desabastecimientos o excesos.  
<br>Distribución y transporte de productos desde la empresa hasta el cliente final.  
<br>Optimización de rutas y costos logísticos para mejorar la eficiencia en la entrega.  
<br>Seguimiento de pedidos y control de calidad en la entrega de productos.  
]]></description><link>sistema-gestion-empresarial\logística.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Logística.md</guid><pubDate>Sun, 16 Feb 2025 09:41:47 GMT</pubDate></item><item><title><![CDATA[<strong>Módulo de Logística y Almacenes en ERP</strong>]]></title><description><![CDATA[ 
 <br><br><br>Este módulo optimiza la gestión de inventarios, almacenamiento y distribución de productos dentro de la empresa.  <br><br>
<br>Control de stock y gestión de inventarios.  
<br>Optimización de envíos y recepción de mercancías.  
<br>Coordinación con proveedores para la entrega de productos.  
<br>Reducción de costos en almacenamiento y transporte.  
<br>Es clave para empresas que manejan productos físicos y grandes volúmenes de mercancía.  ]]></description><link>sistema-gestion-empresarial\logística-y-almacenes.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Logística y Almacenes.md</guid><pubDate>Sun, 16 Feb 2025 09:56:40 GMT</pubDate></item><item><title><![CDATA[<strong>Departamento de Marketing</strong>]]></title><description><![CDATA[ 
 <br><br><br>El Departamento de Marketing se encarga de diseñar y ejecutar estrategias para promocionar los productos o servicios de la empresa. Su misión es atraer clientes, generar ventas y fortalecer la imagen de la marca en el mercado.  <br><br>
<br>Investigación de mercado para identificar tendencias y necesidades del público.  
<br>Desarrollo de estrategias publicitarias y promocionales.  
<br>Gestión de redes sociales, campañas digitales y contenido publicitario.  
<br>Posicionamiento de la marca a través de branding y estrategias de comunicación.  
<br>Análisis de métricas y retorno de inversión (ROI) para optimizar campañas.  
<br><br>Este departamento es clave para el crecimiento y diferenciación de la empresa en el mercado. Un marketing bien ejecutado atrae clientes, fideliza consumidores y mejora la rentabilidad de la organización.  ]]></description><link>sistema-gestion-empresarial\marketing.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Marketing.md</guid><pubDate>Fri, 14 Feb 2025 22:59:43 GMT</pubDate></item><item><title><![CDATA[<strong>¿Qué es un Módulo?</strong>]]></title><description><![CDATA[ 
 <br><br><br>Un módulo es una unidad funcional dentro de un sistema que cumple un propósito específico. Los módulos permiten dividir grandes sistemas en partes más pequeñas y manejables, facilitando la organización y el mantenimiento.  <br>En el contexto de ERP (<a data-href="ERP (Enterprise Resource Planning)" href="\ERP (Enterprise Resource Planning)" class="internal-link" target="_self" rel="noopener nofollow">ERP (Enterprise Resource Planning)</a>), un módulo representa un componente independiente que gestiona una función empresarial específica, como finanzas, recursos humanos o logística.  <br><br><br>Un ERP se compone de varios módulos, cada uno diseñado para gestionar una función clave de la empresa. Algunos de los módulos más importantes son:  <br>
<br><a data-href="CRP" href="\sistema-gestion-empresarial\crp.html" class="internal-link" target="_self" rel="noopener nofollow">CRP</a>(Capacity Requirements Planning): Planificación de la capacidad de producción.  
<br>Módulo de <a data-href="Finanzas y Contabilidad" href="\sistema-gestion-empresarial\finanzas-y-contabilidad.html" class="internal-link" target="_self" rel="noopener nofollow">Finanzas y Contabilidad</a> en ERP: Gestión de ingresos, egresos y contabilidad.  
<br>Módulo de <a data-href="Recursos Humanos" href="\sistema-gestion-empresarial\recursos-humanos.html" class="internal-link" target="_self" rel="noopener nofollow">Recursos Humanos</a> en ERP: Administración del personal y nóminas.  
<br>Módulo de <a data-href="Logística y Almacenes" href="\sistema-gestion-empresarial\logística-y-almacenes.html" class="internal-link" target="_self" rel="noopener nofollow">Logística y Almacenes</a>en ERP: Control de inventarios y distribución.  
<br>Módulo de Ventas y <a data-href="CRM" href="\sistema-gestion-empresarial\crm.html" class="internal-link" target="_self" rel="noopener nofollow">CRM</a> en ERP: Gestión de clientes y ventas.  
<br><a data-href="SAP" href="\sistema-gestion-empresarial\sap.html" class="internal-link" target="_self" rel="noopener nofollow">SAP</a> (Ejemplo de ERP): Ejemplo de un ERP con múltiples módulos.  
<br>Cada módulo opera de forma autónoma pero está interconectado con los demás, asegurando un flujo eficiente de información dentro de la empresa.  <br><br><br>
<br>Independencia funcional: Puede operar por sí solo dentro de un sistema.  
<br>Interconectividad: Se comunica con otros módulos para compartir información.  
<br>Especialización: Está diseñado para una función específica dentro del sistema.  
<br>Flexibilidad: Puede añadirse o modificarse sin afectar el funcionamiento del ERP en su totalidad.  
<br><br><br>
<br>El módulo de ventas recibe un pedido de un cliente.  
<br>El módulo de inventarios verifica la disponibilidad del producto.  
<br>El módulo de finanzas registra la transacción y actualiza los ingresos.  
<br>El módulo de logística gestiona el envío del producto al cliente.  
<br>Este flujo de trabajo demuestra cómo los módulos se complementan dentro de un sistema ERP para mejorar la eficiencia de una empresa.  ]]></description><link>sistema-gestion-empresarial\módulo.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/módulo.md</guid><pubDate>Sun, 16 Feb 2025 09:59:34 GMT</pubDate></item><item><title><![CDATA[Neto]]></title><description><![CDATA[ 
 <br><br>El sueldo neto es la cantidad de dinero que un trabajador recibe después de aplicar todas las deducciones al sueldo <a data-href="Bruto" href="\sistema-gestion-empresarial\bruto.html" class="internal-link" target="_self" rel="noopener nofollow">Bruto</a>. Representa el monto final que se deposita en la cuenta del empleado.  <br><br><br>Sueldo Neto = Sueldo Bruto - Impuestos - Aportes obligatorios<br>Ejemplo de cálculo:<br>
🔹 Sueldo bruto: $2,500<br>
🔹 Deducciones (impuestos, seguridad social, jubilación): $500<br>
🔹 Sueldo neto recibido: $2,000  <br><br><br>
<br>Impuestos sobre la renta → Depende de las leyes fiscales del país.  
<br>Aportes a la seguridad social → Jubilación, salud, obra social.  
<br>Retenciones bancarias o sindicales → En algunos casos, los bancos aplican comisiones.  
<br><br><br>]]></description><link>sistema-gestion-empresarial\neto.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Neto.md</guid><pubDate>Sun, 16 Feb 2025 10:39:18 GMT</pubDate></item><item><title><![CDATA[Objetivo]]></title><description><![CDATA[ 
 <br><br>Un objetivo es la meta que se desea alcanzar dentro de una organización, identidad o individuo. Representa un resultado concreto que guía las acciones y decisiones de una empresa o persona.  <br><br>Los objetivos varían según los puestos y responsabilidades dentro de una organización:  <br>
<br>Presidentes o directivos: Suelen enfocarse en el crecimiento y expansión de la empresa.  
<br>Programadores: Su objetivo principal es desarrollar software eficiente y funcional.  
<br><a data-href="Departamento de una Empresa" href="\sistema-gestion-empresarial\departamento-de-una-empresa.html" class="internal-link" target="_self" rel="noopener nofollow">Departamento de una Empresa</a>: Cada departamento tiene un objetivo específico alineado con la estrategia de la empresa.  
<br><br><br>
<br>Específico: Debe ser claro y bien definido.  
<br>Medible: Debe permitir evaluar el progreso.  
<br>Alcanzable: Debe ser realista según los recursos disponibles.  
<br>Relevante: Debe aportar valor a la organización.  
<br>Temporal: Debe tener un plazo definido para su cumplimiento.  
<br><br><br>🔹 Empresa tecnológica: Desarrollar un nuevo software en los próximos 12 meses.<br>
🔹 Departamento de Ventas: Aumentar las ventas en un 15% en el próximo trimestre.<br>
🔹 Equipo de Marketing: Mejorar la visibilidad de la marca mediante campañas digitales.  ]]></description><link>sistema-gestion-empresarial\objetivo.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Objetivo.md</guid><pubDate>Sun, 16 Feb 2025 10:10:36 GMT</pubDate></item><item><title><![CDATA[Procedimiento]]></title><description><![CDATA[ 
 <br><br>Un procedimiento es un conjunto de instrucciones detalladas que establecen cómo realizar una tarea dentro de un <a data-href="Proceso" href="\sistema-gestion-empresarial\proceso.html" class="internal-link" target="_self" rel="noopener nofollow">Proceso</a>.  <br><br>
<br>Es una guía paso a paso para realizar una actividad específica.  
<br>Estandariza tareas para mejorar la eficiencia.  
<br>Facilita la automatización con tecnologías como <a data-href="RPA" href="\sistema-gestion-empresarial\rpa.html" class="internal-link" target="_self" rel="noopener nofollow">RPA</a>.  
<br>Se aplica en distintas áreas como calidad, producción y administración.  
<br><br><br>Procedimiento para Facturación en un Proceso de Venta:  <br>1️⃣ Ingresar al sistema de facturación.<br>
2️⃣ Seleccionar el cliente y validar los datos.<br>
3️⃣ Ingresar el pedido y verificar precios.<br>
4️⃣ Generar la factura y enviarla al cliente.<br>
5️⃣ Archivar el documento en el sistema.  <br>Este procedimiento forma parte del proceso de venta general.  <br><br><br>
<br>Un procedimiento es una serie de pasos detallados dentro de un proceso.  
<br>Un proceso puede contener varios procedimientos para diferentes tareas.  
<br>Para conocer la estructura general de un proceso, revisa la nota sobre <a data-href="Proceso" href="\sistema-gestion-empresarial\proceso.html" class="internal-link" target="_self" rel="noopener nofollow">Proceso</a>.  ]]></description><link>sistema-gestion-empresarial\procedimiento.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Procedimiento.md</guid><pubDate>Sun, 16 Feb 2025 10:32:19 GMT</pubDate></item><item><title><![CDATA[Proceso]]></title><description><![CDATA[ 
 <br><br>Un proceso es un conjunto de actividades organizadas que tienen un inicio, desarrollo y fin, con el objetivo de producir un resultado específico. Se aplica en diversas áreas como negocios, manufactura, informática y administración.  <br><br>
<br>Tiene una entrada (insumos, datos o recursos).  
<br>Involucra una serie de pasos organizados.  
<br>Genera una salida (producto, servicio o resultado final).  
<br>Puede incluir uno o más procedimientos dentro de su estructura.  
<br><br>Proceso de Venta en una Empresa:  <br>1️⃣ Recepción del pedido del cliente.<br>
2️⃣ Verificación de inventario.<br>
3️⃣ Generación de la factura.<br>
4️⃣ Despacho del producto.<br>
5️⃣ Entrega al cliente y seguimiento post-venta.  <br>Cada paso del proceso puede contener un procedimiento detallado.  <br><br><br>
<br>Un proceso es más amplio y puede contener varios procedimientos.  
<br>Un procedimiento es un conjunto de instrucciones específicas dentro de un proceso.  
<br>Para más detalles sobre instrucciones específicas, revisa la nota sobre <a data-href="Procedimiento" href="\sistema-gestion-empresarial\procedimiento.html" class="internal-link" target="_self" rel="noopener nofollow">Procedimiento</a>.  ]]></description><link>sistema-gestion-empresarial\proceso.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Proceso.md</guid><pubDate>Sun, 16 Feb 2025 10:31:27 GMT</pubDate></item><item><title><![CDATA[Programa Z]]></title><description><![CDATA[ 
 <br><br>El Programa Z es una API o middleware que funciona como un programa intermedio para compartir datos entre un <a data-href="ERP" href="\sistema-gestion-empresarial\erp.html" class="internal-link" target="_self" rel="noopener nofollow">ERP</a> y otros sistemas o aplicaciones externas. Su objetivo es facilitar la integración entre plataformas sin modificar el núcleo del ERP.  <br><br>
<br>Intercambio de datos entre el ERP y otras aplicaciones.  
<br>Automatización de procesos para evitar la entrada manual de datos.  
<br>Compatibilidad con distintos sistemas mediante formatos estándar (JSON, XML, CSV).  
<br>Seguridad en la transferencia de información a través de protocolos como REST o SOAP.  
<br><br><br> Conexión <a data-href="ERP" href="\sistema-gestion-empresarial\erp.html" class="internal-link" target="_self" rel="noopener nofollow">ERP</a> - Tienda Online: Sincroniza inventarios entre el ERP y un e-commerce. <br>Integración <a data-href="ERP" href="\sistema-gestion-empresarial\erp.html" class="internal-link" target="_self" rel="noopener nofollow">ERP</a> - <a data-href="CRM" href="\sistema-gestion-empresarial\crm.html" class="internal-link" target="_self" rel="noopener nofollow">CRM</a>: Comparte datos de clientes y pedidos con un sistema de gestión de relaciones.  <br>Conexión con Bancos: Permite que el ERP envíe y reciba información de pagos y transacciones financieras.  <br><br><br>
<br>Reducción de errores en la transferencia manual de datos.  
<br>Mayor eficiencia al automatizar procesos entre sistemas.  
<br>Escalabilidad al permitir integrar nuevas herramientas sin afectar el ERP.  
]]></description><link>sistema-gestion-empresarial\programa-z.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Programa Z.md</guid><pubDate>Sun, 16 Feb 2025 10:24:47 GMT</pubDate></item><item><title><![CDATA[Programación a Medida]]></title><description><![CDATA[ 
 <br><br>La programación a medida es el desarrollo de software específico para una empresa, negocio o usuario, adaptado completamente a sus necesidades. A diferencia del <a data-href="Software Estándar" href="\sistema-gestion-empresarial\software-estándar.html" class="internal-link" target="_self" rel="noopener nofollow">Software Estándar</a>, este tipo de software se crea desde cero o se personaliza profundamente para cumplir con requerimientos específicos.  <br><br><br>
<br>Desarrollado según los requisitos del cliente → No incluye funciones innecesarias.  
<br>Flexibilidad total → Se adapta a los procesos internos de la empresa.  
<br>Mayor integración → Compatible con otros sistemas ya existentes en la organización.  
<br>Escalabilidad → Permite agregar nuevas funciones conforme crece el negocio.  
<br><br><br>
<br>Un ERP personalizado desarrollado exclusivamente para una empresa.  
<br>Un sistema de gestión interna para optimizar procesos específicos.  
<br>Un software financiero diseñado con reglas contables específicas para un país o industria.  
<br>Un portal de clientes exclusivo con funcionalidades propias.  
<br><br><br>✅ Ventajas:<br>
<br>Se adapta 100% a las necesidades del cliente.  
<br>Puede integrarse con otros sistemas existentes.  
<br>No depende de un proveedor externo para actualizaciones.  
<br>❌ Desventajas  :<br>
<br>Requiere mayor tiempo y costos de desarrollo.  
<br>Necesita mantenimiento y actualizaciones periódicas.  
<br>Puede requerir personal especializado para su gestión.  
<br><br><br>
<br>Un software estándar ofrece una solución genérica y lista para usar.  
<br>La programación a medida permite desarrollar un software único y personalizado, pero con mayores costos y tiempo de desarrollo.  
]]></description><link>sistema-gestion-empresarial\programación-a-medida.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Programación a Medida.md</guid><pubDate>Sun, 16 Feb 2025 10:44:08 GMT</pubDate></item><item><title><![CDATA[Puertos Virtuales]]></title><description><![CDATA[ 
 <br><br>Un puerto virtual es una interfaz de comunicación utilizada por el sistema operativo para enviar y recibir datos sin depender de un puerto físico. Estos puertos permiten la comunicación entre programas, dispositivos o redes simulando la funcionalidad de un puerto tradicional.  <br><br>
<br>Permiten la comunicación entre aplicaciones dentro de un mismo sistema.  
<br>Simulan la conexión de dispositivos físicos como impresoras, escáneres o módems.  
<br>Facilitan la integración de software y hardware sin necesidad de modificar la infraestructura.  
<br>Se usan en virtualización y redes para la conexión de máquinas virtuales o servicios remotos.  
<br><br><br><br>Simulan puertos COM (serie) o LPT (paralelo) para permitir que programas o dispositivos accedan a periféricos virtuales.  <br>Ejemplo: Un software de control industrial que se conecta a una máquina mediante un puerto COM virtual.  <br><br>Permiten la comunicación entre dispositivos y servicios a través de la red sin requerir un puerto físico.  <br> Ejemplo: Una máquina virtual con un puerto de red virtual que la conecta a Internet sin necesitar una tarjeta de red física.  <br><br>Algunas aplicaciones crean puertos virtuales para transferir datos entre distintos programas sin hardware adicional.  <br>Ejemplo: Un software de impresión PDF que crea un puerto virtual en el sistema para procesar documentos sin una impresora real.  <br><br><br><br><br><br>VPN (Red Privada Virtual): Usa puertos virtuales para conectar dispositivos a una red remota de manera segura.  <br>Máquinas virtuales: Emulan puertos físicos para conectarse a periféricos o redes.  <br>Servicios en la nube: Aplicaciones como servidores de bases de datos o plataformas web utilizan puertos virtuales para la comunicación interna.  ]]></description><link>sistema-gestion-empresarial\puertos-virtuales.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Puertos Virtuales.md</guid><pubDate>Sun, 16 Feb 2025 10:25:52 GMT</pubDate></item><item><title><![CDATA[QR]]></title><description><![CDATA[ 
 <br><br>El Código QR (Quick Response Code) es un tipo de código de barras bidimensional que almacena información en un patrón de cuadrados en blanco y negro.  <br><br>
<br>Puede almacenar más información que un código de barras tradicional.  
<br>Se puede escanear con un smartphone o escáner QR.  
<br>Soporta texto, enlaces, números, imágenes, datos de contacto, etc.  
<br><br>
<br>En comercio, se usa para pagos digitales, como en billeteras electrónicas.  
<br>En <a data-href="Trazabilidad" href="\sistema-gestion-empresarial\trazabilidad.html" class="internal-link" target="_self" rel="noopener nofollow">Trazabilidad</a>, permite acceder a información sobre la procedencia de productos.  
<br>En marketing, se usa en carteles para dirigir a los clientes a páginas web o redes sociales.  
<br><br><br>]]></description><link>sistema-gestion-empresarial\qr.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/QR.md</guid><pubDate>Sun, 16 Feb 2025 10:21:20 GMT</pubDate></item><item><title><![CDATA[<strong>Módulo de Recursos Humanos en ERP</strong>]]></title><description><![CDATA[ 
 <br><br><br>El <a data-href="módulo" href="\sistema-gestion-empresarial\módulo.html" class="internal-link" target="_self" rel="noopener nofollow">módulo</a> de Recursos Humanos (RRHH) en un ERP permite gestionar empleados, nóminas y el desempeño del personal.  <br><br>
<br>Administración de nóminas y beneficios.  
<br>Reclutamiento y selección de nuevos empleados.  
<br>Evaluaciones de desempeño y capacitaciones.  
<br>Control de horarios, permisos y vacaciones.  
<br>Facilita la gestión del talento humano dentro de la empresa.  ]]></description><link>sistema-gestion-empresarial\recursos-humanos.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Recursos Humanos.md</guid><pubDate>Sun, 16 Feb 2025 09:55:42 GMT</pubDate></item><item><title><![CDATA[RFID]]></title><description><![CDATA[ 
 <br><br>La Identificación por Radiofrecuencia (RFID) es una tecnología que permite identificar y rastrear objetos mediante ondas de radio. Utiliza etiquetas electrónicas (tags) que almacenan información y pueden ser leídas a distancia sin contacto visual directo.  <br><br>
<br>Etiqueta RFID (Tag): Contiene un chip con datos del producto.  
<br>Lector RFID: Emite señales de radio y recibe la información del tag.  
<br>Base de datos: Almacena la información recibida para análisis.  
<br><br>Trazabilidad en logística: Permite rastrear paquetes sin escanear cada uno manualmente.  <br>Control de inventarios: Un lector RFID puede registrar cientos de productos a la vez en un almacén.  <br>Seguridad y acceso: Se usa en tarjetas de acceso para edificios y sistemas de transporte público.  <br><br><br>]]></description><link>sistema-gestion-empresarial\rfid.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/RFID.md</guid><pubDate>Sun, 16 Feb 2025 10:22:17 GMT</pubDate></item><item><title><![CDATA[RPA]]></title><description><![CDATA[ 
 <br><br>La Automatización de Procesos Robóticos (RPA) es una tecnología que utiliza software o robots para ejecutar tareas repetitivas sin intervención humana. Su objetivo es mejorar la eficiencia, reducir errores y optimizar el uso de recursos.  <br><br>Los bots de RPA interactúan con sistemas y aplicaciones imitando las acciones humanas, como:  <br>
<br>Introducir datos en formularios.  
<br>Enviar correos electrónicos automatizados.  
<br>Extraer información de documentos.  
<br>Realizar cálculos y generar reportes.  
<br><br><br>
<br>
Un <a data-href="Proceso" href="\sistema-gestion-empresarial\proceso.html" class="internal-link" target="_self" rel="noopener nofollow">Proceso</a> es una secuencia de actividades que llevan a un resultado final.  

<br>
Un <a data-href="Procedimiento" href="\sistema-gestion-empresarial\procedimiento.html" class="internal-link" target="_self" rel="noopener nofollow">Procedimiento</a> es un conjunto de instrucciones que indican cómo ejecutar una tarea dentro del proceso.  

<br>
RPA automatiza procesos y procedimientos, eliminando la necesidad de intervención manual.  
Ejemplo:  

<br>
Un banco tiene un proceso de verificación de identidad.  

<br>
Dentro del proceso, hay un procedimiento que indica cómo validar documentos.  

<br>
Un bot de RPA puede automatizar este procedimiento leyendo y verificando documentos automáticamente.  

<br><br><br>
<br>Ahorro de tiempo al eliminar tareas manuales repetitivas.  
<br>Reducción de errores al minimizar la intervención humana.  
<br>Mayor productividad al permitir que los empleados se enfoquen en tareas estratégicas.  
<br>Escalabilidad para adaptarse a grandes volúmenes de datos.  
<br><br><br>Finanzas: Automatización de conciliaciones bancarias.<br>
Recursos Humanos: Procesamiento de solicitudes de vacaciones.<br>
Atención al Cliente: Chatbots que responden consultas automáticamente.<br>
Logística: Gestión automática de pedidos e inventarios.  ]]></description><link>sistema-gestion-empresarial\rpa.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/RPA.md</guid><pubDate>Sun, 16 Feb 2025 10:28:19 GMT</pubDate></item><item><title><![CDATA[<strong>Departamento de Recursos Humanos (RRHH)</strong>]]></title><description><![CDATA[ 
 <br><br><br>El Departamento de Recursos Humanos (RRHH) es el responsable de la gestión del personal dentro de la empresa. Su misión es atraer, retener y desarrollar el talento humano.<br><br>
<br>Reclutamiento y selección de empleados.  
<br>Gestión de nóminas, beneficios y clima laboral.  
<br>Capacitación y desarrollo profesional del personal.  
<br>Resolución de conflictos y cumplimiento de normativas laborales.  
<br>Implementación de estrategias de motivación y bienestar laboral.  
]]></description><link>sistema-gestion-empresarial\rrhh.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/RRHH.md</guid><pubDate>Sun, 16 Feb 2025 09:38:12 GMT</pubDate></item><item><title><![CDATA[<strong>Software como Servicio (SaaS)</strong>]]></title><description><![CDATA[ 
 <br><br><br>Es un tipo de software que se alquila por un período determinado en lugar de comprarse de forma permanente. El usuario paga una suscripción para acceder al programa y utilizar sus funciones mientras dure el contrato.  <br><br>
<br>Acceso basado en suscripción: Se paga por su uso durante un tiempo definido.  
<br>No es de propiedad del usuario: Solo se tiene derecho de uso mientras dure el contrato. 
<br>Actualizaciones automáticas: El proveedor gestiona las mejoras y el mantenimiento.  
<br>Acceso remoto: En muchos casos, se ejecuta en la nube y no requiere instalación local.  
<br><br>
<br><a data-href="ERP" href="\sistema-gestion-empresarial\erp.html" class="internal-link" target="_self" rel="noopener nofollow">ERP</a> (Enterprise Resource Planning) como <a data-href="SAP" href="\sistema-gestion-empresarial\sap.html" class="internal-link" target="_self" rel="noopener nofollow">SAP</a>, Oracle ERP, Microsoft Dynamics.  
<br>Herramientas de productividad: Microsoft 365, Google Workspace.  
<br>Plataformas de diseño: Adobe Creative Cloud.  
<br>Sistemas de almacenamiento en la nube: Dropbox, Google Drive.  
<br><br><br>✅ Ventajas:<br>✔️ Costos iniciales más bajos en comparación con la compra de licencias.<br>
✔️ Actualizaciones y soporte técnico incluidos.<br>
✔️ Escalabilidad según las necesidades de la empresa.  <br>❌ Desventajas:<br>⚠️ Dependencia de pagos recurrentes para seguir usándolo.<br>
⚠️ Posible pérdida de acceso si no se renueva la suscripción.<br>
⚠️ En algunos casos, requiere conexión a internet para su funcionamiento.  ]]></description><link>sistema-gestion-empresarial\saas.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/SAAS.md</guid><pubDate>Sun, 16 Feb 2025 10:02:26 GMT</pubDate></item><item><title><![CDATA[<strong>SAP (Ejemplo de ERP)</strong>]]></title><description><![CDATA[ 
 <br><br><br>SAP es una de las soluciones <a data-href="ERP" href="\sistema-gestion-empresarial\erp.html" class="internal-link" target="_self" rel="noopener nofollow">ERP</a> más utilizadas a nivel mundial. Permite gestionar todas las áreas de una empresa, desde finanzas y contabilidad hasta logística y recursos humanos.  <br><br>
<br>Modular y personalizable según las necesidades de la empresa.  
<br>Integra múltiples funciones en un solo sistema.  
<br>Compatible con empresas de todos los tamaños e industrias.  
<br>SAP es ampliamente utilizado por grandes corporaciones debido a su capacidad de adaptación y escalabilidad.  ]]></description><link>sistema-gestion-empresarial\sap.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/SAP.md</guid><pubDate>Sun, 16 Feb 2025 09:59:00 GMT</pubDate></item><item><title><![CDATA[Scraping]]></title><description><![CDATA[ 
 <br><br>El scraping es una técnica utilizada para extraer información de sitios web de manera automatizada. Se emplean herramientas y scripts que analizan el código de una página web y extraen datos específicos sin necesidad de ingreso manual.  <br><br>1️⃣ Un bot o programa accede a una página web.<br>
2️⃣ Extrae datos estructurados de la página (como textos, imágenes, precios, etc.).<br>
3️⃣ Organiza y almacena la información en bases de datos o archivos.<br>
4️⃣ Se utiliza para análisis, seguimiento de mercado o toma de decisiones.  <br><br><br>Las empresas utilizan el scraping para obtener datos clave sin depender de accesos manuales. Algunos usos comunes incluyen:  <br>Análisis de la competencia → Empresas monitorean precios, productos y estrategias de mercado de sus competidores.<br>
Big Data e Inteligencia de Negocios → Se recopilan grandes volúmenes de información para análisis y estrategias comerciales.<br>
SEO y Marketing Digital → Extraen datos de tendencias, palabras clave y tráfico web para optimizar contenido.<br>
E-commerce → Seguimiento de precios y stock en tiendas online.<br>
Finanzas y Bolsa → Análisis de datos de mercado en tiempo real para toma de decisiones.  <br><br><br>
<br>
Retail y E-commerce:<br>
Una tienda online puede hacer scraping en sitios de la competencia para actualizar sus precios en tiempo real y mantenerse competitiva.  

<br>
Sector Financiero:<br>
Bancos y firmas de inversión utilizan scraping para recolectar datos sobre tendencias de mercado y cotizaciones bursátiles.  

<br>
SEO y Publicidad:<br>
Agencias de marketing extraen palabras clave de motores de búsqueda para mejorar la visibilidad online de sus clientes.  

<br><br><br>🔹 Python (BeautifulSoup, Scrapy, Selenium) → Para extraer y automatizar datos de páginas web.<br>
🔹 APIs y Web Scraping → Algunas páginas permiten el acceso legal a datos estructurados mediante API.<br>
🔹 Automatización con RPA → Empresas integran <a data-href="RPA" href="\sistema-gestion-empresarial\rpa.html" class="internal-link" target="_self" rel="noopener nofollow">RPA</a> para obtener datos de manera eficiente.  <br><br><br>⚠️ No todos los sitios permiten el scraping, ya que puede violar términos de servicio o derechos de autor.<br>
⚠️ Se recomienda usar scraping solo en sitios que lo permitan o mediante APIs oficiales.  ]]></description><link>sistema-gestion-empresarial\scraping.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Scraping.md</guid><pubDate>Sun, 16 Feb 2025 10:33:34 GMT</pubDate></item><item><title><![CDATA[Sistema de Gestión Empresarial]]></title><description><![CDATA[ 
 <br><br>Un Sistema de Gestión Empresarial es un conjunto de herramientas, metodologías y tecnologías utilizadas para organizar, administrar y optimizar los procesos dentro de una empresa. Estos sistemas permiten mejorar la eficiencia, reducir costos y tomar decisiones basadas en datos.  <br>Los sistemas de gestión pueden incluir software, procedimientos y estrategias que abarcan distintas áreas de la empresa, como finanzas, recursos humanos, producción, ventas y logística.  <br><br><br><br>
<br><a data-href="ERP" href="\sistema-gestion-empresarial\erp.html" class="internal-link" target="_self" rel="noopener nofollow">ERP</a> (Enterprise Resource Planning) → Sistema que integra y gestiona los procesos de una empresa.  
<br><a data-href="Software Estándar" href="\sistema-gestion-empresarial\software-estándar.html" class="internal-link" target="_self" rel="noopener nofollow">Software Estándar</a> → Programas preconfigurados para necesidades generales.  
<br><a data-href="Programación a Medida" href="\sistema-gestion-empresarial\programación-a-medida.html" class="internal-link" target="_self" rel="noopener nofollow">Programación a Medida</a> → Desarrollo de software personalizado según las necesidades de la empresa.  
<br><a data-href="Software Vertical" href="\sistema-gestion-empresarial\software-vertical.html" class="internal-link" target="_self" rel="noopener nofollow">Software Vertical</a> → Soluciones especializadas en industrias específicas.  
<br><br>
<br><a data-href="Sueldo" href="\sistema-gestion-empresarial\sueldo.html" class="internal-link" target="_self" rel="noopener nofollow">Sueldo</a> → Definición y tipos de sueldos en una empresa.  
<br><a data-href="Sueldo Fijo" href="\sistema-gestion-empresarial\sueldo-fijo.html" class="internal-link" target="_self" rel="noopener nofollow">Sueldo Fijo</a> → Pago estable sin importar el rendimiento.  
<br><a data-href="Sueldo Variable" href="\sistema-gestion-empresarial\sueldo-variable.html" class="internal-link" target="_self" rel="noopener nofollow">Sueldo Variable</a> → Remuneración basada en objetivos y productividad.  
<br><a data-href="Bruto" href="\sistema-gestion-empresarial\bruto.html" class="internal-link" target="_self" rel="noopener nofollow">Bruto</a> y <a data-href="Neto" href="\sistema-gestion-empresarial\neto.html" class="internal-link" target="_self" rel="noopener nofollow">Neto</a> → Diferencia entre el sueldo total y el monto final recibido.  
<br><br>
<br><a data-href="Proceso" href="\sistema-gestion-empresarial\proceso.html" class="internal-link" target="_self" rel="noopener nofollow">Proceso</a> → Conjunto de actividades organizadas para lograr un objetivo.  
<br><a data-href="Procedimiento" href="\sistema-gestion-empresarial\procedimiento.html" class="internal-link" target="_self" rel="noopener nofollow">Procedimiento</a> → Pasos detallados dentro de un proceso.  
<br><a data-href="RPA" href="\sistema-gestion-empresarial\rpa.html" class="internal-link" target="_self" rel="noopener nofollow">RPA</a> (Robotic Process Automation) → Automatización de procesos mediante robots de software.  
<br><br>
<br><a data-href="Programa Z" href="\sistema-gestion-empresarial\programa-z.html" class="internal-link" target="_self" rel="noopener nofollow">Programa Z</a> → APIs y software intermedio para integrar sistemas.  
<br><a data-href="Trazabilidad" href="\sistema-gestion-empresarial\trazabilidad.html" class="internal-link" target="_self" rel="noopener nofollow">Trazabilidad</a> → Seguimiento de productos y procesos en la cadena de suministro.  
<br><a data-href="EAN13" href="\sistema-gestion-empresarial\ean13.html" class="internal-link" target="_self" rel="noopener nofollow">EAN13</a> → Código de barras estándar para identificación de productos.  
<br><a data-href="QR" href="\sistema-gestion-empresarial\qr.html" class="internal-link" target="_self" rel="noopener nofollow">QR</a> → Código de respuesta rápida para compartir información.  
<br><a data-href="RFID" href="\sistema-gestion-empresarial\rfid.html" class="internal-link" target="_self" rel="noopener nofollow">RFID</a> → Tecnología de identificación por radiofrecuencia.  
<br><a data-href="Scraping" href="\sistema-gestion-empresarial\scraping.html" class="internal-link" target="_self" rel="noopener nofollow">Scraping</a> → Extracción automatizada de datos desde la web.  
<br><br>
<br><a data-href="Puertos Virtuales" href="\sistema-gestion-empresarial\puertos-virtuales.html" class="internal-link" target="_self" rel="noopener nofollow">Puertos Virtuales</a> → Interfaces de comunicación entre sistemas y dispositivos.  
<br><br>
<br><a data-href="Departamento de una Empresa" href="\sistema-gestion-empresarial\departamento-de-una-empresa.html" class="internal-link" target="_self" rel="noopener nofollow">Departamento de una Empresa</a> → Áreas clave dentro de una organización.  
<br><a data-href="Compras" href="\sistema-gestion-empresarial\compras.html" class="internal-link" target="_self" rel="noopener nofollow">Compras</a> → Gestión de proveedores y adquisiciones.  
<br><a data-href="Marketing" href="\sistema-gestion-empresarial\marketing.html" class="internal-link" target="_self" rel="noopener nofollow">Marketing</a> → Promoción y estrategias de ventas.  
<br><a data-href="Cajas" href="\sistema-gestion-empresarial\cajas.html" class="internal-link" target="_self" rel="noopener nofollow">Cajas</a> → Control y administración del flujo de efectivo.  
<br><a data-href="Comercial" href="\sistema-gestion-empresarial\comercial.html" class="internal-link" target="_self" rel="noopener nofollow">Comercial</a> → Gestión de ventas y relaciones con clientes.  
<br><a data-href="IT" href="\sistema-gestion-empresarial\it.html" class="internal-link" target="_self" rel="noopener nofollow">IT</a> (Tecnología de la Información) → Administración de sistemas y tecnología.  
<br><a data-href="Financiero" href="\sistema-gestion-empresarial\financiero.html" class="internal-link" target="_self" rel="noopener nofollow">Financiero</a> → Manejo de recursos económicos.  
<br><a data-href="RRHH" href="\sistema-gestion-empresarial\rrhh.html" class="internal-link" target="_self" rel="noopener nofollow">RRHH</a> (Recursos Humanos) → Gestión del talento humano.  
<br><a data-href="Jurídico" href="\sistema-gestion-empresarial\jurídico.html" class="internal-link" target="_self" rel="noopener nofollow">Jurídico</a> → Supervisión legal y regulatoria.  
<br><a data-href="Innovación" href="\sistema-gestion-empresarial\innovación.html" class="internal-link" target="_self" rel="noopener nofollow">Innovación</a> → Desarrollo de nuevos productos y servicios.  
]]></description><link>sistema-gestion-empresarial\sistema-de-gestión-empresarial.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Sistema de Gestión Empresarial.md</guid><pubDate>Sun, 16 Feb 2025 10:48:30 GMT</pubDate></item><item><title><![CDATA[Software Estándar]]></title><description><![CDATA[ 
 <br><br>El software estándar es una solución informática diseñada para cubrir necesidades generales de múltiples empresas o usuarios sin modificaciones específicas. Se trata de programas desarrollados para un mercado amplio, ofreciendo funcionalidades comunes sin requerir personalización.  <br><br>
<br>Desarrollo predefinido → No se ajusta a casos específicos, sino a necesidades generales.  
<br>Implementación rápida → Disponible para su uso inmediato sin necesidad de programación adicional.  
<br>Menor costo → Suele ser más económico que desarrollar software a medida.  
<br>Actualizaciones frecuentes → Mejoras constantes por parte del proveedor.  
<br><br><br>
<br>Suites de Oficina → Microsoft 365, Google Workspace.  
<br><a data-href="ERP" href="\sistema-gestion-empresarial\erp.html" class="internal-link" target="_self" rel="noopener nofollow">ERP</a> General → <a data-href="ERP" href="\sistema-gestion-empresarial\erp.html" class="internal-link" target="_self" rel="noopener nofollow">ERP</a>, <a data-href="SAP" href="\sistema-gestion-empresarial\sap.html" class="internal-link" target="_self" rel="noopener nofollow">SAP</a>, Oracle ERP, Microsoft Dynamics.  
<br><a data-href="CRM" href="\sistema-gestion-empresarial\crm.html" class="internal-link" target="_self" rel="noopener nofollow">CRM</a> Común → Salesforce, HubSpot.  
<br>Sistemas de Facturación → Programas de contabilidad estándar como QuickBooks o ContaPlus.  
<br><br><br>✅ Ventajas:<br>
<br>Reducción de costos en comparación con el desarrollo a medida.  
<br>Soporte técnico y actualizaciones constantes.  
<br>Implementación inmediata sin necesidad de programación avanzada.  
<br>❌ Desventajas  <br>
<br>No se adapta completamente a las necesidades específicas de algunas empresas.  
<br>Puede incluir funciones innecesarias o carecer de características personalizadas.  
<br>Depende del proveedor para cambios y mejoras.  
<br><br><br>
<br>Un software estándar es una solución preconfigurada lista para usar.  
<br>Un software a medida se desarrolla desde cero según las necesidades de un cliente.  
<br>Si una empresa necesita más personalización y funcionalidades específicas, es posible que requiera programación a medida.  ]]></description><link>sistema-gestion-empresarial\software-estándar.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Software Estándar.md</guid><pubDate>Sun, 16 Feb 2025 10:40:53 GMT</pubDate></item><item><title><![CDATA[<strong>Software Horizontal</strong>]]></title><description><![CDATA[ 
 <br><br><br>Un software horizontal es un sistema estándar diseñado para cualquier tipo de empresa, sin importar su sector o industria. Se enfoca en procesos generales como contabilidad, ventas o recursos humanos, pero no en funciones específicas de un negocio en particular.  <br><br>
<br><a data-href="ERP" href="\sistema-gestion-empresarial\erp.html" class="internal-link" target="_self" rel="noopener nofollow">ERP</a> como <a data-href="SAP" href="\sistema-gestion-empresarial\sap.html" class="internal-link" target="_self" rel="noopener nofollow">SAP</a>, Oracle ERP, Microsoft Dynamics.  
<br>Sistemas de facturación estándar.  
<br>Software de gestión de clientes (CRM) genérico.  
<br>Si una empresa necesita funciones específicas, puede personalizar el software horizontal o adquirir módulos adicionales.  ]]></description><link>sistema-gestion-empresarial\software-horizontal.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Software Horizontal.md</guid><pubDate>Sun, 16 Feb 2025 09:49:46 GMT</pubDate></item><item><title><![CDATA[<strong>¿Qué es un Software Vertical?</strong>]]></title><description><![CDATA[ 
 <br><br><br>El software vertical es un sistema diseñado para un sector o industria específica. Surge como una especialización de un software horizontal, agregando funcionalidades adaptadas a necesidades concretas de un negocio.  <br>Un software vertical solo existe si hay un software horizontal base sobre el cual se construye. Actúa como un módulo especializado que amplía las capacidades del software general.  <br><br><br><br><br><br> <a data-href="Programación a Medida" href="\sistema-gestion-empresarial\programación-a-medida.html" class="internal-link" target="_self" rel="noopener nofollow">Programación a Medida</a>  <br>
<br>Creado desde cero según necesidades específicas.  
<br>Mayor personalización, pero más costoso y complejo de mantener.  
<br>Software Vertical (Basado en Software Horizontal)  <br>
<br>
Se adapta a una industria específica, pero con una base estándar.  

<br>
Más rápido de implementar y con costos reducidos.  
<a data-href="Software Estándar" href="\sistema-gestion-empresarial\software-estándar.html" class="internal-link" target="_self" rel="noopener nofollow">Software Estándar</a>  

<br>
Generalista, con funcionalidades básicas para cualquier empresa.  

<br>
Puede ampliarse con módulos verticales para cubrir necesidades específicas.  

<br><br><br>
<br>Un ERP médico basado en un <a data-href="ERP" href="\sistema-gestion-empresarial\erp.html" class="internal-link" target="_self" rel="noopener nofollow">ERP</a> estándar, pero con módulos especializados para hospitales (gestión de pacientes, citas médicas, historiales clínicos).  
<br>Un software de gestión inmobiliaria basado en un <a data-href="CRM" href="\sistema-gestion-empresarial\crm.html" class="internal-link" target="_self" rel="noopener nofollow">CRM</a> general, pero adaptado para venta y alquiler de propiedades.  
]]></description><link>sistema-gestion-empresarial\software-vertical.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Software vertical.md</guid><pubDate>Sun, 16 Feb 2025 10:36:04 GMT</pubDate></item><item><title><![CDATA[Sueldo]]></title><description><![CDATA[ 
 <br><br>El sueldo es la cantidad de dinero que un trabajador recibe como pago por su labor en una empresa. Puede incluir diferentes componentes, como salario base, bonos e incentivos.  <br>El sueldo puede dividirse en dos tipos principales:  <br>
<br><a data-href="Sueldo Fijo" href="\sistema-gestion-empresarial\sueldo-fijo.html" class="internal-link" target="_self" rel="noopener nofollow">Sueldo Fijo</a> → Se paga un monto estable, sin importar el rendimiento.  
<br><a data-href="Sueldo Variable" href="\sistema-gestion-empresarial\sueldo-variable.html" class="internal-link" target="_self" rel="noopener nofollow">Sueldo Variable</a> → Depende de la productividad, ventas u objetivos alcanzados.  
<br><br><br>
<br><a data-href="Bruto" href="\sistema-gestion-empresarial\bruto.html" class="internal-link" target="_self" rel="noopener nofollow">Bruto</a> → Es el monto total acordado antes de descuentos e impuestos.  
<br><a data-href="Neto" href="\sistema-gestion-empresarial\neto.html" class="internal-link" target="_self" rel="noopener nofollow">Neto</a> → Es el sueldo final que recibe el trabajador después de todas las deducciones.  
<br>Por ejemplo, si un trabajador tiene un sueldo bruto de $2,000, pero después de impuestos y aportes recibe $1,600, este último monto es el sueldo neto.  <br><br><br>
<br>Impuestos y contribuciones → Jubilación, salud, seguridad social.  
<br>Bonificaciones y comisiones → En caso de sueldos variables.  
<br>Horas extras y beneficios → Algunos empleos pagan adicionales por esfuerzo extra.  
]]></description><link>sistema-gestion-empresarial\sueldo.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Sueldo.md</guid><pubDate>Sun, 16 Feb 2025 10:37:55 GMT</pubDate></item><item><title><![CDATA[Sueldo Fijo]]></title><description><![CDATA[ 
 <br><br>El sueldo fijo es una modalidad de pago en la que un empleado recibe un monto estable de dinero en cada período de pago, independientemente de si alcanza sus <a data-href="Objetivo" href="\sistema-gestion-empresarial\objetivo.html" class="internal-link" target="_self" rel="noopener nofollow">Objetivo</a>s o no.  <br><br>
<br>Estabilidad económica: El trabajador recibe el mismo ingreso de forma regular.  
<br>No depende de resultados: Se paga independientemente del rendimiento o metas alcanzadas.  
<br>Generalmente mensual o quincenal: Se establece en un contrato de trabajo.  
<br>Incluye beneficios laborales: Como aportes a la seguridad social, vacaciones y aguinaldo (según la legislación del país).  
<br><br><br><br>Tambien puede haber una mezcla de ambos llamado <a data-href="Sueldo Mixto" href="\sistema-gestion-empresarial\sueldo-mixto.html" class="internal-link" target="_self" rel="noopener nofollow">Sueldo Mixto</a>. Otro que tambien puede llegar a pasar dependiendo del tipo de contrato que se allá hecho es el <a data-href="Sueldo por Horas" href="\sistema-gestion-empresarial\sueldo-por-horas.html" class="internal-link" target="_self" rel="noopener nofollow">Sueldo por Horas</a><br><br><br>Un programador contratado con un sueldo mensual de $2,500 recibe ese monto cada mes sin importar la cantidad de proyectos que complete.  <br>Un administrativo con sueldo fijo cobra lo mismo cada mes, aunque tenga días de menor carga laboral.  ]]></description><link>sistema-gestion-empresarial\sueldo-fijo.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Sueldo Fijo.md</guid><pubDate>Sun, 16 Feb 2025 10:17:30 GMT</pubDate></item><item><title><![CDATA[Sueldo Mixto]]></title><description><![CDATA[ 
 <br><br>El sueldo mixto es una combinación de <a data-href="Sueldo Fijo" href="\sistema-gestion-empresarial\sueldo-fijo.html" class="internal-link" target="_self" rel="noopener nofollow">Sueldo Fijo</a> y <a data-href="Sueldo Variable" href="\sistema-gestion-empresarial\sueldo-variable.html" class="internal-link" target="_self" rel="noopener nofollow">Sueldo Variable</a>, en la que el empleado recibe una parte estable de su salario y otra parte que depende de su desempeño.  <br><br>
<br>Brinda estabilidad y motivación: El sueldo fijo garantiza un ingreso mínimo, mientras que el variable incentiva la productividad.  
<br>Combinación flexible: Puede adaptarse a distintos roles y empresas.  
<br>Se usa en puestos comerciales, administrativos y de alto nivel.  
<br><br><br>Un vendedor tiene un sueldo fijo de $1,500 y gana comisiones del 3% sobre sus ventas. Si vende $10,000, recibe $300 adicionales, obteniendo un total de $1,800 en el mes.  <br>Un gerente de proyectos recibe un sueldo base, pero también un bono por objetivos cumplidos.  ]]></description><link>sistema-gestion-empresarial\sueldo-mixto.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Sueldo Mixto.md</guid><pubDate>Sun, 16 Feb 2025 10:15:26 GMT</pubDate></item><item><title><![CDATA[Sueldo por Horas]]></title><description><![CDATA[ 
 <br><br>El sueldo por horas es un tipo de pago basado en la cantidad de horas trabajadas, en lugar de un salario mensual fijo. Es común en empleos temporales, freelance o con horarios flexibles.  <br><br>
<br>Depende del tiempo trabajado: Cuantas más horas se trabajen, mayor será la ganancia.  
<br>Mayor flexibilidad: Se adapta a empleos con horarios cambiantes.  
<br>No garantiza un ingreso estable: Los ingresos pueden variar mes a mes.  
<br>Es común en trabajos por turnos o freelance.  
<br><br><br>Un diseñador gráfico freelance cobra $20 por hora. Si trabaja 30 horas en un mes, gana $600, pero si trabaja 50 horas, su ingreso será $1,000.  <br>Un trabajador de restaurante gana $12 por hora. Si trabaja 40 horas a la semana, su ingreso mensual será de $1,920.  ]]></description><link>sistema-gestion-empresarial\sueldo-por-horas.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Sueldo por Horas.md</guid><pubDate>Sun, 16 Feb 2025 10:17:15 GMT</pubDate></item><item><title><![CDATA[Sueldo Variable]]></title><description><![CDATA[ 
 <br><br>El sueldo variable es un tipo de remuneración que depende del rendimiento, productividad o cumplimiento de <a data-href="Objetivo" href="\sistema-gestion-empresarial\objetivo.html" class="internal-link" target="_self" rel="noopener nofollow">Objetivo</a>s dentro de la empresa. El monto a recibir puede cambiar en cada período de pago.  <br><br>
<br>Depende del desempeño: Se basa en resultados, ventas o productividad.  
<br>Incentiva la eficiencia: Motiva a los empleados a mejorar su rendimiento.  
<br>No es estable: Puede variar de un mes a otro según los logros alcanzados.  
<br>Se usa en cargos comerciales y por comisiones.  
<br><br><br>Un vendedor recibe una comisión del 5% por cada venta realizada. Si vende $20,000 en un mes, su comisión será $1,000, pero si el próximo mes vende solo $10,000, ganará $500.  <br>Un gerente puede recibir bonos por desempeño, dependiendo de si cumple con los objetivos de la empresa.  ]]></description><link>sistema-gestion-empresarial\sueldo-variable.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Sueldo Variable.md</guid><pubDate>Sun, 16 Feb 2025 10:13:46 GMT</pubDate></item><item><title><![CDATA[Trazabilidad]]></title><description><![CDATA[ 
 <br><br>La trazabilidad es el proceso que permite seguir el rastro de un producto en todas las etapas de su producción, distribución y comercialización. Su objetivo es garantizar el control, la seguridad y la transparencia en la cadena de suministro.  <br><br>
<br>Trazabilidad hacia atrás: Permite identificar el origen de un producto (proveedores, materias primas).  
<br>Trazabilidad interna: Controla el proceso de producción dentro de la empresa.  
<br>Trazabilidad hacia adelante: Permite rastrear el producto una vez que ha sido distribuido o vendido.  
<br><br>En la industria alimentaria, la trazabilidad permite identificar el lote de origen de un alimento en caso de contaminación o retiro del mercado.  <br> En logística, se utilizan códigos de barras (<a data-href="EAN13" href="\sistema-gestion-empresarial\ean13.html" class="internal-link" target="_self" rel="noopener nofollow">EAN13</a>), <a data-href="QR" href="\sistema-gestion-empresarial\qr.html" class="internal-link" target="_self" rel="noopener nofollow">QR</a> y <a data-href="RFID" href="\sistema-gestion-empresarial\rfid.html" class="internal-link" target="_self" rel="noopener nofollow">RFID</a> para rastrear envíos en tiempo real.  <br><br><br>🔹 Mejora la seguridad del consumidor.<br>
🔹 Facilita el control de calidad.<br>
🔹 Optimiza la gestión de inventarios y reduce pérdidas.<br>
🔹 Es clave en sectores como alimentación, farmacéutica, automotriz y logística.  ]]></description><link>sistema-gestion-empresarial\trazabilidad.html</link><guid isPermaLink="false">Sistema-Gestion-Empresarial/Trazabilidad.md</guid><pubDate>Sun, 16 Feb 2025 10:19:28 GMT</pubDate></item><item><title><![CDATA[Svelte]]></title><description><![CDATA[ 
 <br>Svelte es un <a data-href="Framework" href="\curso-spring\framework.html" class="internal-link" target="_self" rel="noopener nofollow">Framework</a> y a la vez un compilador directo que NO usa DOM para tras copilar como <a data-href="React" href="\curso_react\react.html" class="internal-link" target="_self" rel="noopener nofollow">React</a>, Vuet.]]></description><link>sveltekitcurso\svelte.html</link><guid isPermaLink="false">SvelteKitCurso/Svelte.md</guid><pubDate>Sun, 02 Mar 2025 11:13:31 GMT</pubDate></item><item><title><![CDATA[Indice]]></title><description><![CDATA[ 
 <br>
<br><a data-href="PSP" href="\programacion-de-servicios-y-procesos\psp.html" class="internal-link" target="_self" rel="noopener nofollow">PSP</a> (Programación de servicios y procesos)
<br><a data-href="PMDM" href="\programacion-de-multimedia-y-dispositivos-moviles\pmdm.html" class="internal-link" target="_self" rel="noopener nofollow">PMDM</a> (Programación de multimedia y dispositivos móviles)
<br><a data-href="Desarrollo De Interfaces" href="\desarrollo-de-interfacez\desarrollo-de-interfaces.html" class="internal-link" target="_self" rel="noopener nofollow">Desarrollo De Interfaces</a> 
<br><a data-href="Acceso a Datos" href="\acceso-a-datos\acceso-a-datos.html" class="internal-link" target="_self" rel="noopener nofollow">Acceso a Datos</a>
<br><a data-href="Sistema de Gestión Empresarial" href="\sistema-gestion-empresarial\sistema-de-gestión-empresarial.html" class="internal-link" target="_self" rel="noopener nofollow">Sistema de Gestión Empresarial</a>
<br><a data-href="Empresas e Iniciativa Emprendedora" href="\empresa-e-iniciativa-empredora\empresas-e-iniciativa-emprendedora.html" class="internal-link" target="_self" rel="noopener nofollow">Empresas e Iniciativa Emprendedora</a>
<br><a data-href="Ingles" href="\ingles\ingles.html" class="internal-link" target="_self" rel="noopener nofollow">Ingles</a>
<br><a data-href="Listas de propuestas" href="\proyectos-fempa\proyecto-via-creadon\listas-de-propuestas.html" class="internal-link" target="_self" rel="noopener nofollow">Listas de propuestas</a>
<br>Cursos aparte:

<br><a data-href="Spring" href="\curso-spring\spring.html" class="internal-link" target="_self" rel="noopener nofollow">Spring</a>
<br><a data-href="React" href="\curso_react\react.html" class="internal-link" target="_self" rel="noopener nofollow">React</a>
<br><a data-href="Android" href="\Android" class="internal-link" target="_self" rel="noopener nofollow">Android</a>
<br><a data-href="Docker" href="\Docker" class="internal-link" target="_self" rel="noopener nofollow">Docker</a>
<br><a data-href="Next" href="\Next" class="internal-link" target="_self" rel="noopener nofollow">Next</a>
<br><a data-href="Svelte Kit" href="\Svelte Kit" class="internal-link" target="_self" rel="noopener nofollow">Svelte Kit</a>
<br><a data-href="React Native" href="\React Native" class="internal-link" target="_self" rel="noopener nofollow">React Native</a>
<br><a data-href="TensorFlow" href="\curso-tenseflow\tensorflow.html" class="internal-link" target="_self" rel="noopener nofollow">TensorFlow</a>
<br><a data-href="Boostrap" href="\Boostrap" class="internal-link" target="_self" rel="noopener nofollow">Boostrap</a>


]]></description><link>indice.html</link><guid isPermaLink="false">Indice.md</guid><pubDate>Fri, 28 Feb 2025 11:21:24 GMT</pubDate></item></channel></rss>